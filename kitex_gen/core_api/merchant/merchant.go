// Code generated by Kitex v0.12.1. DO NOT EDIT.

package merchant

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	core_api "github.com/xh-polaris/ActiManage-IDL-gen/kitex_gen/core_api"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"MerchantListActivities": kitex.NewMethodInfo(
		merchantListActivitiesHandler,
		newMerchantListActivitiesArgs,
		newMerchantListActivitiesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantCreateActivity": kitex.NewMethodInfo(
		merchantCreateActivityHandler,
		newMerchantCreateActivityArgs,
		newMerchantCreateActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantDeleteActivity": kitex.NewMethodInfo(
		merchantDeleteActivityHandler,
		newMerchantDeleteActivityArgs,
		newMerchantDeleteActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantTopActivity": kitex.NewMethodInfo(
		merchantTopActivityHandler,
		newMerchantTopActivityArgs,
		newMerchantTopActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantLogin": kitex.NewMethodInfo(
		merchantLoginHandler,
		newMerchantLoginArgs,
		newMerchantLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantGetSetting": kitex.NewMethodInfo(
		merchantGetSettingHandler,
		newMerchantGetSettingArgs,
		newMerchantGetSettingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantUpdateSetting": kitex.NewMethodInfo(
		merchantUpdateSettingHandler,
		newMerchantUpdateSettingArgs,
		newMerchantUpdateSettingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantGetBookRecords": kitex.NewMethodInfo(
		merchantGetBookRecordsHandler,
		newMerchantGetBookRecordsArgs,
		newMerchantGetBookRecordsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantUpdateInfo": kitex.NewMethodInfo(
		merchantUpdateInfoHandler,
		newMerchantUpdateInfoArgs,
		newMerchantUpdateInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantGetInfo": kitex.NewMethodInfo(
		merchantGetInfoHandler,
		newMerchantGetInfoArgs,
		newMerchantGetInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantSetPassword": kitex.NewMethodInfo(
		merchantSetPasswordHandler,
		newMerchantSetPasswordArgs,
		newMerchantSetPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	merchantServiceInfo                = NewServiceInfo()
	merchantServiceInfoForClient       = NewServiceInfoForClient()
	merchantServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return merchantServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return merchantServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return merchantServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "merchant"
	handlerType := (*core_api.Merchant)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func merchantListActivitiesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantListActivitiesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Merchant).MerchantListActivities(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantListActivitiesArgs:
		success, err := handler.(core_api.Merchant).MerchantListActivities(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantListActivitiesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantListActivitiesArgs() interface{} {
	return &MerchantListActivitiesArgs{}
}

func newMerchantListActivitiesResult() interface{} {
	return &MerchantListActivitiesResult{}
}

type MerchantListActivitiesArgs struct {
	Req *core_api.MerchantListActivitiesReq
}

func (p *MerchantListActivitiesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantListActivitiesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantListActivitiesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantListActivitiesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantListActivitiesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantListActivitiesArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantListActivitiesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantListActivitiesArgs_Req_DEFAULT *core_api.MerchantListActivitiesReq

func (p *MerchantListActivitiesArgs) GetReq() *core_api.MerchantListActivitiesReq {
	if !p.IsSetReq() {
		return MerchantListActivitiesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantListActivitiesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantListActivitiesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantListActivitiesResult struct {
	Success *core_api.MerchantListActivitiesResp
}

var MerchantListActivitiesResult_Success_DEFAULT *core_api.MerchantListActivitiesResp

func (p *MerchantListActivitiesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.MerchantListActivitiesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantListActivitiesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantListActivitiesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantListActivitiesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantListActivitiesResult) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantListActivitiesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantListActivitiesResult) GetSuccess() *core_api.MerchantListActivitiesResp {
	if !p.IsSetSuccess() {
		return MerchantListActivitiesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantListActivitiesResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.MerchantListActivitiesResp)
}

func (p *MerchantListActivitiesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantListActivitiesResult) GetResult() interface{} {
	return p.Success
}

func merchantCreateActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantCreateActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Merchant).MerchantCreateActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantCreateActivityArgs:
		success, err := handler.(core_api.Merchant).MerchantCreateActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantCreateActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantCreateActivityArgs() interface{} {
	return &MerchantCreateActivityArgs{}
}

func newMerchantCreateActivityResult() interface{} {
	return &MerchantCreateActivityResult{}
}

type MerchantCreateActivityArgs struct {
	Req *core_api.MerchantCreateActivityReq
}

func (p *MerchantCreateActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantCreateActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantCreateActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantCreateActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantCreateActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantCreateActivityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantCreateActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantCreateActivityArgs_Req_DEFAULT *core_api.MerchantCreateActivityReq

func (p *MerchantCreateActivityArgs) GetReq() *core_api.MerchantCreateActivityReq {
	if !p.IsSetReq() {
		return MerchantCreateActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantCreateActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantCreateActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantCreateActivityResult struct {
	Success *core_api.Response
}

var MerchantCreateActivityResult_Success_DEFAULT *core_api.Response

func (p *MerchantCreateActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantCreateActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantCreateActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantCreateActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantCreateActivityResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantCreateActivityResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return MerchantCreateActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantCreateActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *MerchantCreateActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantCreateActivityResult) GetResult() interface{} {
	return p.Success
}

func merchantDeleteActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantDeleteActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Merchant).MerchantDeleteActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantDeleteActivityArgs:
		success, err := handler.(core_api.Merchant).MerchantDeleteActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantDeleteActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantDeleteActivityArgs() interface{} {
	return &MerchantDeleteActivityArgs{}
}

func newMerchantDeleteActivityResult() interface{} {
	return &MerchantDeleteActivityResult{}
}

type MerchantDeleteActivityArgs struct {
	Req *core_api.MerchantDeleteActivityReq
}

func (p *MerchantDeleteActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantDeleteActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantDeleteActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantDeleteActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantDeleteActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantDeleteActivityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantDeleteActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantDeleteActivityArgs_Req_DEFAULT *core_api.MerchantDeleteActivityReq

func (p *MerchantDeleteActivityArgs) GetReq() *core_api.MerchantDeleteActivityReq {
	if !p.IsSetReq() {
		return MerchantDeleteActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantDeleteActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantDeleteActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantDeleteActivityResult struct {
	Success *core_api.Response
}

var MerchantDeleteActivityResult_Success_DEFAULT *core_api.Response

func (p *MerchantDeleteActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantDeleteActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantDeleteActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantDeleteActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantDeleteActivityResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantDeleteActivityResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return MerchantDeleteActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantDeleteActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *MerchantDeleteActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantDeleteActivityResult) GetResult() interface{} {
	return p.Success
}

func merchantTopActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantTopActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Merchant).MerchantTopActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantTopActivityArgs:
		success, err := handler.(core_api.Merchant).MerchantTopActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantTopActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantTopActivityArgs() interface{} {
	return &MerchantTopActivityArgs{}
}

func newMerchantTopActivityResult() interface{} {
	return &MerchantTopActivityResult{}
}

type MerchantTopActivityArgs struct {
	Req *core_api.MerchantTopActivityReq
}

func (p *MerchantTopActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantTopActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantTopActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantTopActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantTopActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantTopActivityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantTopActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantTopActivityArgs_Req_DEFAULT *core_api.MerchantTopActivityReq

func (p *MerchantTopActivityArgs) GetReq() *core_api.MerchantTopActivityReq {
	if !p.IsSetReq() {
		return MerchantTopActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantTopActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantTopActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantTopActivityResult struct {
	Success *core_api.Response
}

var MerchantTopActivityResult_Success_DEFAULT *core_api.Response

func (p *MerchantTopActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantTopActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantTopActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantTopActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantTopActivityResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantTopActivityResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return MerchantTopActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantTopActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *MerchantTopActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantTopActivityResult) GetResult() interface{} {
	return p.Success
}

func merchantLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantLoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Merchant).MerchantLogin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantLoginArgs:
		success, err := handler.(core_api.Merchant).MerchantLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantLoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantLoginArgs() interface{} {
	return &MerchantLoginArgs{}
}

func newMerchantLoginResult() interface{} {
	return &MerchantLoginResult{}
}

type MerchantLoginArgs struct {
	Req *core_api.MerchantLoginReq
}

func (p *MerchantLoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantLoginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantLoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantLoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantLoginArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantLoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantLoginArgs_Req_DEFAULT *core_api.MerchantLoginReq

func (p *MerchantLoginArgs) GetReq() *core_api.MerchantLoginReq {
	if !p.IsSetReq() {
		return MerchantLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantLoginResult struct {
	Success *core_api.MerchantLoginResp
}

var MerchantLoginResult_Success_DEFAULT *core_api.MerchantLoginResp

func (p *MerchantLoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.MerchantLoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantLoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantLoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantLoginResult) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantLoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantLoginResult) GetSuccess() *core_api.MerchantLoginResp {
	if !p.IsSetSuccess() {
		return MerchantLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.MerchantLoginResp)
}

func (p *MerchantLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantLoginResult) GetResult() interface{} {
	return p.Success
}

func merchantGetSettingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantGetSettingReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Merchant).MerchantGetSetting(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantGetSettingArgs:
		success, err := handler.(core_api.Merchant).MerchantGetSetting(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantGetSettingResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantGetSettingArgs() interface{} {
	return &MerchantGetSettingArgs{}
}

func newMerchantGetSettingResult() interface{} {
	return &MerchantGetSettingResult{}
}

type MerchantGetSettingArgs struct {
	Req *core_api.MerchantGetSettingReq
}

func (p *MerchantGetSettingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantGetSettingReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantGetSettingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantGetSettingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantGetSettingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantGetSettingArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantGetSettingReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantGetSettingArgs_Req_DEFAULT *core_api.MerchantGetSettingReq

func (p *MerchantGetSettingArgs) GetReq() *core_api.MerchantGetSettingReq {
	if !p.IsSetReq() {
		return MerchantGetSettingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantGetSettingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantGetSettingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantGetSettingResult struct {
	Success *core_api.MerchantGetSettingResp
}

var MerchantGetSettingResult_Success_DEFAULT *core_api.MerchantGetSettingResp

func (p *MerchantGetSettingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.MerchantGetSettingResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantGetSettingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantGetSettingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantGetSettingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantGetSettingResult) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantGetSettingResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantGetSettingResult) GetSuccess() *core_api.MerchantGetSettingResp {
	if !p.IsSetSuccess() {
		return MerchantGetSettingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantGetSettingResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.MerchantGetSettingResp)
}

func (p *MerchantGetSettingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantGetSettingResult) GetResult() interface{} {
	return p.Success
}

func merchantUpdateSettingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantUpdateSettingReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Merchant).MerchantUpdateSetting(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantUpdateSettingArgs:
		success, err := handler.(core_api.Merchant).MerchantUpdateSetting(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantUpdateSettingResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantUpdateSettingArgs() interface{} {
	return &MerchantUpdateSettingArgs{}
}

func newMerchantUpdateSettingResult() interface{} {
	return &MerchantUpdateSettingResult{}
}

type MerchantUpdateSettingArgs struct {
	Req *core_api.MerchantUpdateSettingReq
}

func (p *MerchantUpdateSettingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantUpdateSettingReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantUpdateSettingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantUpdateSettingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantUpdateSettingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantUpdateSettingArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantUpdateSettingReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantUpdateSettingArgs_Req_DEFAULT *core_api.MerchantUpdateSettingReq

func (p *MerchantUpdateSettingArgs) GetReq() *core_api.MerchantUpdateSettingReq {
	if !p.IsSetReq() {
		return MerchantUpdateSettingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantUpdateSettingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantUpdateSettingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantUpdateSettingResult struct {
	Success *core_api.MerchantGetSettingResp
}

var MerchantUpdateSettingResult_Success_DEFAULT *core_api.MerchantGetSettingResp

func (p *MerchantUpdateSettingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.MerchantGetSettingResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantUpdateSettingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantUpdateSettingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantUpdateSettingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantUpdateSettingResult) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantGetSettingResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantUpdateSettingResult) GetSuccess() *core_api.MerchantGetSettingResp {
	if !p.IsSetSuccess() {
		return MerchantUpdateSettingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantUpdateSettingResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.MerchantGetSettingResp)
}

func (p *MerchantUpdateSettingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantUpdateSettingResult) GetResult() interface{} {
	return p.Success
}

func merchantGetBookRecordsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantListBookRecordsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Merchant).MerchantGetBookRecords(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantGetBookRecordsArgs:
		success, err := handler.(core_api.Merchant).MerchantGetBookRecords(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantGetBookRecordsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantGetBookRecordsArgs() interface{} {
	return &MerchantGetBookRecordsArgs{}
}

func newMerchantGetBookRecordsResult() interface{} {
	return &MerchantGetBookRecordsResult{}
}

type MerchantGetBookRecordsArgs struct {
	Req *core_api.MerchantListBookRecordsReq
}

func (p *MerchantGetBookRecordsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantListBookRecordsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantGetBookRecordsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantGetBookRecordsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantGetBookRecordsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantGetBookRecordsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantListBookRecordsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantGetBookRecordsArgs_Req_DEFAULT *core_api.MerchantListBookRecordsReq

func (p *MerchantGetBookRecordsArgs) GetReq() *core_api.MerchantListBookRecordsReq {
	if !p.IsSetReq() {
		return MerchantGetBookRecordsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantGetBookRecordsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantGetBookRecordsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantGetBookRecordsResult struct {
	Success *core_api.MerchantListBookRecordsResp
}

var MerchantGetBookRecordsResult_Success_DEFAULT *core_api.MerchantListBookRecordsResp

func (p *MerchantGetBookRecordsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.MerchantListBookRecordsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantGetBookRecordsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantGetBookRecordsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantGetBookRecordsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantGetBookRecordsResult) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantListBookRecordsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantGetBookRecordsResult) GetSuccess() *core_api.MerchantListBookRecordsResp {
	if !p.IsSetSuccess() {
		return MerchantGetBookRecordsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantGetBookRecordsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.MerchantListBookRecordsResp)
}

func (p *MerchantGetBookRecordsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantGetBookRecordsResult) GetResult() interface{} {
	return p.Success
}

func merchantUpdateInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantUpdateInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Merchant).MerchantUpdateInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantUpdateInfoArgs:
		success, err := handler.(core_api.Merchant).MerchantUpdateInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantUpdateInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantUpdateInfoArgs() interface{} {
	return &MerchantUpdateInfoArgs{}
}

func newMerchantUpdateInfoResult() interface{} {
	return &MerchantUpdateInfoResult{}
}

type MerchantUpdateInfoArgs struct {
	Req *core_api.MerchantUpdateInfoReq
}

func (p *MerchantUpdateInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantUpdateInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantUpdateInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantUpdateInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantUpdateInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantUpdateInfoArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantUpdateInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantUpdateInfoArgs_Req_DEFAULT *core_api.MerchantUpdateInfoReq

func (p *MerchantUpdateInfoArgs) GetReq() *core_api.MerchantUpdateInfoReq {
	if !p.IsSetReq() {
		return MerchantUpdateInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantUpdateInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantUpdateInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantUpdateInfoResult struct {
	Success *core_api.Response
}

var MerchantUpdateInfoResult_Success_DEFAULT *core_api.Response

func (p *MerchantUpdateInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantUpdateInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantUpdateInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantUpdateInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantUpdateInfoResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantUpdateInfoResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return MerchantUpdateInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantUpdateInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *MerchantUpdateInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantUpdateInfoResult) GetResult() interface{} {
	return p.Success
}

func merchantGetInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantGetInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Merchant).MerchantGetInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantGetInfoArgs:
		success, err := handler.(core_api.Merchant).MerchantGetInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantGetInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantGetInfoArgs() interface{} {
	return &MerchantGetInfoArgs{}
}

func newMerchantGetInfoResult() interface{} {
	return &MerchantGetInfoResult{}
}

type MerchantGetInfoArgs struct {
	Req *core_api.MerchantGetInfoReq
}

func (p *MerchantGetInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantGetInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantGetInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantGetInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantGetInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantGetInfoArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantGetInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantGetInfoArgs_Req_DEFAULT *core_api.MerchantGetInfoReq

func (p *MerchantGetInfoArgs) GetReq() *core_api.MerchantGetInfoReq {
	if !p.IsSetReq() {
		return MerchantGetInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantGetInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantGetInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantGetInfoResult struct {
	Success *core_api.MerchantGetInfoResp
}

var MerchantGetInfoResult_Success_DEFAULT *core_api.MerchantGetInfoResp

func (p *MerchantGetInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.MerchantGetInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantGetInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantGetInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantGetInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantGetInfoResult) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantGetInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantGetInfoResult) GetSuccess() *core_api.MerchantGetInfoResp {
	if !p.IsSetSuccess() {
		return MerchantGetInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantGetInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.MerchantGetInfoResp)
}

func (p *MerchantGetInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantGetInfoResult) GetResult() interface{} {
	return p.Success
}

func merchantSetPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantSetPasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Merchant).MerchantSetPassword(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantSetPasswordArgs:
		success, err := handler.(core_api.Merchant).MerchantSetPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantSetPasswordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantSetPasswordArgs() interface{} {
	return &MerchantSetPasswordArgs{}
}

func newMerchantSetPasswordResult() interface{} {
	return &MerchantSetPasswordResult{}
}

type MerchantSetPasswordArgs struct {
	Req *core_api.MerchantSetPasswordReq
}

func (p *MerchantSetPasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantSetPasswordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantSetPasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantSetPasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantSetPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantSetPasswordArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantSetPasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantSetPasswordArgs_Req_DEFAULT *core_api.MerchantSetPasswordReq

func (p *MerchantSetPasswordArgs) GetReq() *core_api.MerchantSetPasswordReq {
	if !p.IsSetReq() {
		return MerchantSetPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantSetPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantSetPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantSetPasswordResult struct {
	Success *core_api.Response
}

var MerchantSetPasswordResult_Success_DEFAULT *core_api.Response

func (p *MerchantSetPasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantSetPasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantSetPasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantSetPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantSetPasswordResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantSetPasswordResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return MerchantSetPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantSetPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *MerchantSetPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantSetPasswordResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MerchantListActivities(ctx context.Context, Req *core_api.MerchantListActivitiesReq) (r *core_api.MerchantListActivitiesResp, err error) {
	var _args MerchantListActivitiesArgs
	_args.Req = Req
	var _result MerchantListActivitiesResult
	if err = p.c.Call(ctx, "MerchantListActivities", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantCreateActivity(ctx context.Context, Req *core_api.MerchantCreateActivityReq) (r *core_api.Response, err error) {
	var _args MerchantCreateActivityArgs
	_args.Req = Req
	var _result MerchantCreateActivityResult
	if err = p.c.Call(ctx, "MerchantCreateActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantDeleteActivity(ctx context.Context, Req *core_api.MerchantDeleteActivityReq) (r *core_api.Response, err error) {
	var _args MerchantDeleteActivityArgs
	_args.Req = Req
	var _result MerchantDeleteActivityResult
	if err = p.c.Call(ctx, "MerchantDeleteActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantTopActivity(ctx context.Context, Req *core_api.MerchantTopActivityReq) (r *core_api.Response, err error) {
	var _args MerchantTopActivityArgs
	_args.Req = Req
	var _result MerchantTopActivityResult
	if err = p.c.Call(ctx, "MerchantTopActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantLogin(ctx context.Context, Req *core_api.MerchantLoginReq) (r *core_api.MerchantLoginResp, err error) {
	var _args MerchantLoginArgs
	_args.Req = Req
	var _result MerchantLoginResult
	if err = p.c.Call(ctx, "MerchantLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantGetSetting(ctx context.Context, Req *core_api.MerchantGetSettingReq) (r *core_api.MerchantGetSettingResp, err error) {
	var _args MerchantGetSettingArgs
	_args.Req = Req
	var _result MerchantGetSettingResult
	if err = p.c.Call(ctx, "MerchantGetSetting", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantUpdateSetting(ctx context.Context, Req *core_api.MerchantUpdateSettingReq) (r *core_api.MerchantGetSettingResp, err error) {
	var _args MerchantUpdateSettingArgs
	_args.Req = Req
	var _result MerchantUpdateSettingResult
	if err = p.c.Call(ctx, "MerchantUpdateSetting", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantGetBookRecords(ctx context.Context, Req *core_api.MerchantListBookRecordsReq) (r *core_api.MerchantListBookRecordsResp, err error) {
	var _args MerchantGetBookRecordsArgs
	_args.Req = Req
	var _result MerchantGetBookRecordsResult
	if err = p.c.Call(ctx, "MerchantGetBookRecords", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantUpdateInfo(ctx context.Context, Req *core_api.MerchantUpdateInfoReq) (r *core_api.Response, err error) {
	var _args MerchantUpdateInfoArgs
	_args.Req = Req
	var _result MerchantUpdateInfoResult
	if err = p.c.Call(ctx, "MerchantUpdateInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantGetInfo(ctx context.Context, Req *core_api.MerchantGetInfoReq) (r *core_api.MerchantGetInfoResp, err error) {
	var _args MerchantGetInfoArgs
	_args.Req = Req
	var _result MerchantGetInfoResult
	if err = p.c.Call(ctx, "MerchantGetInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantSetPassword(ctx context.Context, Req *core_api.MerchantSetPasswordReq) (r *core_api.Response, err error) {
	var _args MerchantSetPasswordArgs
	_args.Req = Req
	var _result MerchantSetPasswordResult
	if err = p.c.Call(ctx, "MerchantSetPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
