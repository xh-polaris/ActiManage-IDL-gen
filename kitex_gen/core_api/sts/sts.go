// Code generated by Kitex v0.12.2. DO NOT EDIT.

package sts

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	core_api "github.com/xh-polaris/ActiManage-IDL-gen/kitex_gen/core_api"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"StsApplySignedUrl": kitex.NewMethodInfo(
		stsApplySignedUrlHandler,
		newStsApplySignedUrlArgs,
		newStsApplySignedUrlResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"StsAIModify": kitex.NewMethodInfo(
		stsAIModifyHandler,
		newStsAIModifyArgs,
		newStsAIModifyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"StsSendVerifyCode": kitex.NewMethodInfo(
		stsSendVerifyCodeHandler,
		newStsSendVerifyCodeArgs,
		newStsSendVerifyCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"StsView": kitex.NewMethodInfo(
		stsViewHandler,
		newStsViewArgs,
		newStsViewResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	stsServiceInfo                = NewServiceInfo()
	stsServiceInfoForClient       = NewServiceInfoForClient()
	stsServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return stsServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return stsServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return stsServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "sts"
	handlerType := (*core_api.Sts)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.2",
		Extra:           extra,
	}
	return svcInfo
}

func stsApplySignedUrlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.StsApplySignedUrlReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Sts).StsApplySignedUrl(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *StsApplySignedUrlArgs:
		success, err := handler.(core_api.Sts).StsApplySignedUrl(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*StsApplySignedUrlResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newStsApplySignedUrlArgs() interface{} {
	return &StsApplySignedUrlArgs{}
}

func newStsApplySignedUrlResult() interface{} {
	return &StsApplySignedUrlResult{}
}

type StsApplySignedUrlArgs struct {
	Req *core_api.StsApplySignedUrlReq
}

func (p *StsApplySignedUrlArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.StsApplySignedUrlReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *StsApplySignedUrlArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *StsApplySignedUrlArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *StsApplySignedUrlArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *StsApplySignedUrlArgs) Unmarshal(in []byte) error {
	msg := new(core_api.StsApplySignedUrlReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var StsApplySignedUrlArgs_Req_DEFAULT *core_api.StsApplySignedUrlReq

func (p *StsApplySignedUrlArgs) GetReq() *core_api.StsApplySignedUrlReq {
	if !p.IsSetReq() {
		return StsApplySignedUrlArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *StsApplySignedUrlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StsApplySignedUrlArgs) GetFirstArgument() interface{} {
	return p.Req
}

type StsApplySignedUrlResult struct {
	Success *core_api.StsApplySignedUrlResp
}

var StsApplySignedUrlResult_Success_DEFAULT *core_api.StsApplySignedUrlResp

func (p *StsApplySignedUrlResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.StsApplySignedUrlResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *StsApplySignedUrlResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *StsApplySignedUrlResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *StsApplySignedUrlResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *StsApplySignedUrlResult) Unmarshal(in []byte) error {
	msg := new(core_api.StsApplySignedUrlResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *StsApplySignedUrlResult) GetSuccess() *core_api.StsApplySignedUrlResp {
	if !p.IsSetSuccess() {
		return StsApplySignedUrlResult_Success_DEFAULT
	}
	return p.Success
}

func (p *StsApplySignedUrlResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.StsApplySignedUrlResp)
}

func (p *StsApplySignedUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StsApplySignedUrlResult) GetResult() interface{} {
	return p.Success
}

func stsAIModifyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.StsAIModifyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Sts).StsAIModify(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *StsAIModifyArgs:
		success, err := handler.(core_api.Sts).StsAIModify(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*StsAIModifyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newStsAIModifyArgs() interface{} {
	return &StsAIModifyArgs{}
}

func newStsAIModifyResult() interface{} {
	return &StsAIModifyResult{}
}

type StsAIModifyArgs struct {
	Req *core_api.StsAIModifyReq
}

func (p *StsAIModifyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.StsAIModifyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *StsAIModifyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *StsAIModifyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *StsAIModifyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *StsAIModifyArgs) Unmarshal(in []byte) error {
	msg := new(core_api.StsAIModifyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var StsAIModifyArgs_Req_DEFAULT *core_api.StsAIModifyReq

func (p *StsAIModifyArgs) GetReq() *core_api.StsAIModifyReq {
	if !p.IsSetReq() {
		return StsAIModifyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *StsAIModifyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StsAIModifyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type StsAIModifyResult struct {
	Success *core_api.StsAIModifyResp
}

var StsAIModifyResult_Success_DEFAULT *core_api.StsAIModifyResp

func (p *StsAIModifyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.StsAIModifyResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *StsAIModifyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *StsAIModifyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *StsAIModifyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *StsAIModifyResult) Unmarshal(in []byte) error {
	msg := new(core_api.StsAIModifyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *StsAIModifyResult) GetSuccess() *core_api.StsAIModifyResp {
	if !p.IsSetSuccess() {
		return StsAIModifyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *StsAIModifyResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.StsAIModifyResp)
}

func (p *StsAIModifyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StsAIModifyResult) GetResult() interface{} {
	return p.Success
}

func stsSendVerifyCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.StsSendVerifyCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Sts).StsSendVerifyCode(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *StsSendVerifyCodeArgs:
		success, err := handler.(core_api.Sts).StsSendVerifyCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*StsSendVerifyCodeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newStsSendVerifyCodeArgs() interface{} {
	return &StsSendVerifyCodeArgs{}
}

func newStsSendVerifyCodeResult() interface{} {
	return &StsSendVerifyCodeResult{}
}

type StsSendVerifyCodeArgs struct {
	Req *core_api.StsSendVerifyCodeReq
}

func (p *StsSendVerifyCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.StsSendVerifyCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *StsSendVerifyCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *StsSendVerifyCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *StsSendVerifyCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *StsSendVerifyCodeArgs) Unmarshal(in []byte) error {
	msg := new(core_api.StsSendVerifyCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var StsSendVerifyCodeArgs_Req_DEFAULT *core_api.StsSendVerifyCodeReq

func (p *StsSendVerifyCodeArgs) GetReq() *core_api.StsSendVerifyCodeReq {
	if !p.IsSetReq() {
		return StsSendVerifyCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *StsSendVerifyCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StsSendVerifyCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type StsSendVerifyCodeResult struct {
	Success *core_api.Response
}

var StsSendVerifyCodeResult_Success_DEFAULT *core_api.Response

func (p *StsSendVerifyCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *StsSendVerifyCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *StsSendVerifyCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *StsSendVerifyCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *StsSendVerifyCodeResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *StsSendVerifyCodeResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return StsSendVerifyCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *StsSendVerifyCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *StsSendVerifyCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StsSendVerifyCodeResult) GetResult() interface{} {
	return p.Success
}

func stsViewHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.StsViewReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.Sts).StsView(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *StsViewArgs:
		success, err := handler.(core_api.Sts).StsView(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*StsViewResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newStsViewArgs() interface{} {
	return &StsViewArgs{}
}

func newStsViewResult() interface{} {
	return &StsViewResult{}
}

type StsViewArgs struct {
	Req *core_api.StsViewReq
}

func (p *StsViewArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.StsViewReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *StsViewArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *StsViewArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *StsViewArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *StsViewArgs) Unmarshal(in []byte) error {
	msg := new(core_api.StsViewReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var StsViewArgs_Req_DEFAULT *core_api.StsViewReq

func (p *StsViewArgs) GetReq() *core_api.StsViewReq {
	if !p.IsSetReq() {
		return StsViewArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *StsViewArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StsViewArgs) GetFirstArgument() interface{} {
	return p.Req
}

type StsViewResult struct {
	Success *core_api.Response
}

var StsViewResult_Success_DEFAULT *core_api.Response

func (p *StsViewResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *StsViewResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *StsViewResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *StsViewResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *StsViewResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *StsViewResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return StsViewResult_Success_DEFAULT
	}
	return p.Success
}

func (p *StsViewResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *StsViewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StsViewResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) StsApplySignedUrl(ctx context.Context, Req *core_api.StsApplySignedUrlReq) (r *core_api.StsApplySignedUrlResp, err error) {
	var _args StsApplySignedUrlArgs
	_args.Req = Req
	var _result StsApplySignedUrlResult
	if err = p.c.Call(ctx, "StsApplySignedUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StsAIModify(ctx context.Context, Req *core_api.StsAIModifyReq) (r *core_api.StsAIModifyResp, err error) {
	var _args StsAIModifyArgs
	_args.Req = Req
	var _result StsAIModifyResult
	if err = p.c.Call(ctx, "StsAIModify", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StsSendVerifyCode(ctx context.Context, Req *core_api.StsSendVerifyCodeReq) (r *core_api.Response, err error) {
	var _args StsSendVerifyCodeArgs
	_args.Req = Req
	var _result StsSendVerifyCodeResult
	if err = p.c.Call(ctx, "StsSendVerifyCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StsView(ctx context.Context, Req *core_api.StsViewReq) (r *core_api.Response, err error) {
	var _args StsViewArgs
	_args.Req = Req
	var _result StsViewResult
	if err = p.c.Call(ctx, "StsView", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
