// Code generated by Kitex v0.12.3. DO NOT EDIT.

package system

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	core_api "github.com/xh-polaris/ActiManage-IDL-gen/kitex_gen/core_api"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"SystemLogin": kitex.NewMethodInfo(
		systemLoginHandler,
		newSystemLoginArgs,
		newSystemLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SystemListMerchant": kitex.NewMethodInfo(
		systemListMerchantHandler,
		newSystemListMerchantArgs,
		newSystemListMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SystemGetMerchant": kitex.NewMethodInfo(
		systemGetMerchantHandler,
		newSystemGetMerchantArgs,
		newSystemGetMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SystemCreateMerchant": kitex.NewMethodInfo(
		systemCreateMerchantHandler,
		newSystemCreateMerchantArgs,
		newSystemCreateMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SystemUpdateMerchant": kitex.NewMethodInfo(
		systemUpdateMerchantHandler,
		newSystemUpdateMerchantArgs,
		newSystemUpdateMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SystemGetDashboard": kitex.NewMethodInfo(
		systemGetDashboardHandler,
		newSystemGetDashboardArgs,
		newSystemGetDashboardResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SystemGetOverallDashboard": kitex.NewMethodInfo(
		systemGetOverallDashboardHandler,
		newSystemGetOverallDashboardArgs,
		newSystemGetOverallDashboardResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ResetMerchantPassword": kitex.NewMethodInfo(
		resetMerchantPasswordHandler,
		newResetMerchantPasswordArgs,
		newResetMerchantPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteMerchant": kitex.NewMethodInfo(
		deleteMerchantHandler,
		newDeleteMerchantArgs,
		newDeleteMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	systemServiceInfo                = NewServiceInfo()
	systemServiceInfoForClient       = NewServiceInfoForClient()
	systemServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return systemServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return systemServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return systemServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "system"
	handlerType := (*core_api.System)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func systemLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SystemLoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).SystemLogin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SystemLoginArgs:
		success, err := handler.(core_api.System).SystemLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SystemLoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSystemLoginArgs() interface{} {
	return &SystemLoginArgs{}
}

func newSystemLoginResult() interface{} {
	return &SystemLoginResult{}
}

type SystemLoginArgs struct {
	Req *core_api.SystemLoginReq
}

func (p *SystemLoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SystemLoginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SystemLoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SystemLoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SystemLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SystemLoginArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SystemLoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SystemLoginArgs_Req_DEFAULT *core_api.SystemLoginReq

func (p *SystemLoginArgs) GetReq() *core_api.SystemLoginReq {
	if !p.IsSetReq() {
		return SystemLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SystemLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SystemLoginResult struct {
	Success *core_api.SystemLoginResp
}

var SystemLoginResult_Success_DEFAULT *core_api.SystemLoginResp

func (p *SystemLoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SystemLoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SystemLoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SystemLoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SystemLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SystemLoginResult) Unmarshal(in []byte) error {
	msg := new(core_api.SystemLoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SystemLoginResult) GetSuccess() *core_api.SystemLoginResp {
	if !p.IsSetSuccess() {
		return SystemLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SystemLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SystemLoginResp)
}

func (p *SystemLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemLoginResult) GetResult() interface{} {
	return p.Success
}

func systemListMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SystemListMerchantsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).SystemListMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SystemListMerchantArgs:
		success, err := handler.(core_api.System).SystemListMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SystemListMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSystemListMerchantArgs() interface{} {
	return &SystemListMerchantArgs{}
}

func newSystemListMerchantResult() interface{} {
	return &SystemListMerchantResult{}
}

type SystemListMerchantArgs struct {
	Req *core_api.SystemListMerchantsReq
}

func (p *SystemListMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SystemListMerchantsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SystemListMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SystemListMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SystemListMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SystemListMerchantArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SystemListMerchantsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SystemListMerchantArgs_Req_DEFAULT *core_api.SystemListMerchantsReq

func (p *SystemListMerchantArgs) GetReq() *core_api.SystemListMerchantsReq {
	if !p.IsSetReq() {
		return SystemListMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SystemListMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemListMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SystemListMerchantResult struct {
	Success *core_api.SystemListMerchantsReq
}

var SystemListMerchantResult_Success_DEFAULT *core_api.SystemListMerchantsReq

func (p *SystemListMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SystemListMerchantsReq)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SystemListMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SystemListMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SystemListMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SystemListMerchantResult) Unmarshal(in []byte) error {
	msg := new(core_api.SystemListMerchantsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SystemListMerchantResult) GetSuccess() *core_api.SystemListMerchantsReq {
	if !p.IsSetSuccess() {
		return SystemListMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SystemListMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SystemListMerchantsReq)
}

func (p *SystemListMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemListMerchantResult) GetResult() interface{} {
	return p.Success
}

func systemGetMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SystemGetMerchantReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).SystemGetMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SystemGetMerchantArgs:
		success, err := handler.(core_api.System).SystemGetMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SystemGetMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSystemGetMerchantArgs() interface{} {
	return &SystemGetMerchantArgs{}
}

func newSystemGetMerchantResult() interface{} {
	return &SystemGetMerchantResult{}
}

type SystemGetMerchantArgs struct {
	Req *core_api.SystemGetMerchantReq
}

func (p *SystemGetMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SystemGetMerchantReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SystemGetMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SystemGetMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SystemGetMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SystemGetMerchantArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SystemGetMerchantReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SystemGetMerchantArgs_Req_DEFAULT *core_api.SystemGetMerchantReq

func (p *SystemGetMerchantArgs) GetReq() *core_api.SystemGetMerchantReq {
	if !p.IsSetReq() {
		return SystemGetMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SystemGetMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemGetMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SystemGetMerchantResult struct {
	Success *core_api.SystemGetMerchantResp
}

var SystemGetMerchantResult_Success_DEFAULT *core_api.SystemGetMerchantResp

func (p *SystemGetMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SystemGetMerchantResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SystemGetMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SystemGetMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SystemGetMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SystemGetMerchantResult) Unmarshal(in []byte) error {
	msg := new(core_api.SystemGetMerchantResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SystemGetMerchantResult) GetSuccess() *core_api.SystemGetMerchantResp {
	if !p.IsSetSuccess() {
		return SystemGetMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SystemGetMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SystemGetMerchantResp)
}

func (p *SystemGetMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemGetMerchantResult) GetResult() interface{} {
	return p.Success
}

func systemCreateMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SystemCreateMerchantReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).SystemCreateMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SystemCreateMerchantArgs:
		success, err := handler.(core_api.System).SystemCreateMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SystemCreateMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSystemCreateMerchantArgs() interface{} {
	return &SystemCreateMerchantArgs{}
}

func newSystemCreateMerchantResult() interface{} {
	return &SystemCreateMerchantResult{}
}

type SystemCreateMerchantArgs struct {
	Req *core_api.SystemCreateMerchantReq
}

func (p *SystemCreateMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SystemCreateMerchantReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SystemCreateMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SystemCreateMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SystemCreateMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SystemCreateMerchantArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SystemCreateMerchantReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SystemCreateMerchantArgs_Req_DEFAULT *core_api.SystemCreateMerchantReq

func (p *SystemCreateMerchantArgs) GetReq() *core_api.SystemCreateMerchantReq {
	if !p.IsSetReq() {
		return SystemCreateMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SystemCreateMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemCreateMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SystemCreateMerchantResult struct {
	Success *core_api.Response
}

var SystemCreateMerchantResult_Success_DEFAULT *core_api.Response

func (p *SystemCreateMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SystemCreateMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SystemCreateMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SystemCreateMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SystemCreateMerchantResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SystemCreateMerchantResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return SystemCreateMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SystemCreateMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *SystemCreateMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemCreateMerchantResult) GetResult() interface{} {
	return p.Success
}

func systemUpdateMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SystemUpdateMerchantReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).SystemUpdateMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SystemUpdateMerchantArgs:
		success, err := handler.(core_api.System).SystemUpdateMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SystemUpdateMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSystemUpdateMerchantArgs() interface{} {
	return &SystemUpdateMerchantArgs{}
}

func newSystemUpdateMerchantResult() interface{} {
	return &SystemUpdateMerchantResult{}
}

type SystemUpdateMerchantArgs struct {
	Req *core_api.SystemUpdateMerchantReq
}

func (p *SystemUpdateMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SystemUpdateMerchantReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SystemUpdateMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SystemUpdateMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SystemUpdateMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SystemUpdateMerchantArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SystemUpdateMerchantReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SystemUpdateMerchantArgs_Req_DEFAULT *core_api.SystemUpdateMerchantReq

func (p *SystemUpdateMerchantArgs) GetReq() *core_api.SystemUpdateMerchantReq {
	if !p.IsSetReq() {
		return SystemUpdateMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SystemUpdateMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemUpdateMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SystemUpdateMerchantResult struct {
	Success *core_api.Response
}

var SystemUpdateMerchantResult_Success_DEFAULT *core_api.Response

func (p *SystemUpdateMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SystemUpdateMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SystemUpdateMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SystemUpdateMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SystemUpdateMerchantResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SystemUpdateMerchantResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return SystemUpdateMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SystemUpdateMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *SystemUpdateMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemUpdateMerchantResult) GetResult() interface{} {
	return p.Success
}

func systemGetDashboardHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SystemGetDashboardReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).SystemGetDashboard(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SystemGetDashboardArgs:
		success, err := handler.(core_api.System).SystemGetDashboard(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SystemGetDashboardResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSystemGetDashboardArgs() interface{} {
	return &SystemGetDashboardArgs{}
}

func newSystemGetDashboardResult() interface{} {
	return &SystemGetDashboardResult{}
}

type SystemGetDashboardArgs struct {
	Req *core_api.SystemGetDashboardReq
}

func (p *SystemGetDashboardArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SystemGetDashboardReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SystemGetDashboardArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SystemGetDashboardArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SystemGetDashboardArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SystemGetDashboardArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SystemGetDashboardReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SystemGetDashboardArgs_Req_DEFAULT *core_api.SystemGetDashboardReq

func (p *SystemGetDashboardArgs) GetReq() *core_api.SystemGetDashboardReq {
	if !p.IsSetReq() {
		return SystemGetDashboardArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SystemGetDashboardArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemGetDashboardArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SystemGetDashboardResult struct {
	Success *core_api.SystemGetDashboardResp
}

var SystemGetDashboardResult_Success_DEFAULT *core_api.SystemGetDashboardResp

func (p *SystemGetDashboardResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SystemGetDashboardResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SystemGetDashboardResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SystemGetDashboardResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SystemGetDashboardResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SystemGetDashboardResult) Unmarshal(in []byte) error {
	msg := new(core_api.SystemGetDashboardResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SystemGetDashboardResult) GetSuccess() *core_api.SystemGetDashboardResp {
	if !p.IsSetSuccess() {
		return SystemGetDashboardResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SystemGetDashboardResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SystemGetDashboardResp)
}

func (p *SystemGetDashboardResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemGetDashboardResult) GetResult() interface{} {
	return p.Success
}

func systemGetOverallDashboardHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SystemGetOverallDashboardReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).SystemGetOverallDashboard(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SystemGetOverallDashboardArgs:
		success, err := handler.(core_api.System).SystemGetOverallDashboard(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SystemGetOverallDashboardResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSystemGetOverallDashboardArgs() interface{} {
	return &SystemGetOverallDashboardArgs{}
}

func newSystemGetOverallDashboardResult() interface{} {
	return &SystemGetOverallDashboardResult{}
}

type SystemGetOverallDashboardArgs struct {
	Req *core_api.SystemGetOverallDashboardReq
}

func (p *SystemGetOverallDashboardArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SystemGetOverallDashboardReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SystemGetOverallDashboardArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SystemGetOverallDashboardArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SystemGetOverallDashboardArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SystemGetOverallDashboardArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SystemGetOverallDashboardReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SystemGetOverallDashboardArgs_Req_DEFAULT *core_api.SystemGetOverallDashboardReq

func (p *SystemGetOverallDashboardArgs) GetReq() *core_api.SystemGetOverallDashboardReq {
	if !p.IsSetReq() {
		return SystemGetOverallDashboardArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SystemGetOverallDashboardArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemGetOverallDashboardArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SystemGetOverallDashboardResult struct {
	Success *core_api.SystemGetOverallDashboardResp
}

var SystemGetOverallDashboardResult_Success_DEFAULT *core_api.SystemGetOverallDashboardResp

func (p *SystemGetOverallDashboardResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SystemGetOverallDashboardResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SystemGetOverallDashboardResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SystemGetOverallDashboardResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SystemGetOverallDashboardResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SystemGetOverallDashboardResult) Unmarshal(in []byte) error {
	msg := new(core_api.SystemGetOverallDashboardResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SystemGetOverallDashboardResult) GetSuccess() *core_api.SystemGetOverallDashboardResp {
	if !p.IsSetSuccess() {
		return SystemGetOverallDashboardResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SystemGetOverallDashboardResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SystemGetOverallDashboardResp)
}

func (p *SystemGetOverallDashboardResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemGetOverallDashboardResult) GetResult() interface{} {
	return p.Success
}

func resetMerchantPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ResetMerchantPasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).ResetMerchantPassword(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ResetMerchantPasswordArgs:
		success, err := handler.(core_api.System).ResetMerchantPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ResetMerchantPasswordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newResetMerchantPasswordArgs() interface{} {
	return &ResetMerchantPasswordArgs{}
}

func newResetMerchantPasswordResult() interface{} {
	return &ResetMerchantPasswordResult{}
}

type ResetMerchantPasswordArgs struct {
	Req *core_api.ResetMerchantPasswordReq
}

func (p *ResetMerchantPasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ResetMerchantPasswordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ResetMerchantPasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ResetMerchantPasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ResetMerchantPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ResetMerchantPasswordArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ResetMerchantPasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ResetMerchantPasswordArgs_Req_DEFAULT *core_api.ResetMerchantPasswordReq

func (p *ResetMerchantPasswordArgs) GetReq() *core_api.ResetMerchantPasswordReq {
	if !p.IsSetReq() {
		return ResetMerchantPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ResetMerchantPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ResetMerchantPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ResetMerchantPasswordResult struct {
	Success *core_api.Response
}

var ResetMerchantPasswordResult_Success_DEFAULT *core_api.Response

func (p *ResetMerchantPasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ResetMerchantPasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ResetMerchantPasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ResetMerchantPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ResetMerchantPasswordResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ResetMerchantPasswordResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return ResetMerchantPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ResetMerchantPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *ResetMerchantPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResetMerchantPasswordResult) GetResult() interface{} {
	return p.Success
}

func deleteMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteMerchantReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.System).DeleteMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteMerchantArgs:
		success, err := handler.(core_api.System).DeleteMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteMerchantArgs() interface{} {
	return &DeleteMerchantArgs{}
}

func newDeleteMerchantResult() interface{} {
	return &DeleteMerchantResult{}
}

type DeleteMerchantArgs struct {
	Req *core_api.DeleteMerchantReq
}

func (p *DeleteMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteMerchantReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteMerchantArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteMerchantReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteMerchantArgs_Req_DEFAULT *core_api.DeleteMerchantReq

func (p *DeleteMerchantArgs) GetReq() *core_api.DeleteMerchantReq {
	if !p.IsSetReq() {
		return DeleteMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteMerchantResult struct {
	Success *core_api.Response
}

var DeleteMerchantResult_Success_DEFAULT *core_api.Response

func (p *DeleteMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteMerchantResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteMerchantResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return DeleteMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *DeleteMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteMerchantResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SystemLogin(ctx context.Context, Req *core_api.SystemLoginReq) (r *core_api.SystemLoginResp, err error) {
	var _args SystemLoginArgs
	_args.Req = Req
	var _result SystemLoginResult
	if err = p.c.Call(ctx, "SystemLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SystemListMerchant(ctx context.Context, Req *core_api.SystemListMerchantsReq) (r *core_api.SystemListMerchantsReq, err error) {
	var _args SystemListMerchantArgs
	_args.Req = Req
	var _result SystemListMerchantResult
	if err = p.c.Call(ctx, "SystemListMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SystemGetMerchant(ctx context.Context, Req *core_api.SystemGetMerchantReq) (r *core_api.SystemGetMerchantResp, err error) {
	var _args SystemGetMerchantArgs
	_args.Req = Req
	var _result SystemGetMerchantResult
	if err = p.c.Call(ctx, "SystemGetMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SystemCreateMerchant(ctx context.Context, Req *core_api.SystemCreateMerchantReq) (r *core_api.Response, err error) {
	var _args SystemCreateMerchantArgs
	_args.Req = Req
	var _result SystemCreateMerchantResult
	if err = p.c.Call(ctx, "SystemCreateMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SystemUpdateMerchant(ctx context.Context, Req *core_api.SystemUpdateMerchantReq) (r *core_api.Response, err error) {
	var _args SystemUpdateMerchantArgs
	_args.Req = Req
	var _result SystemUpdateMerchantResult
	if err = p.c.Call(ctx, "SystemUpdateMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SystemGetDashboard(ctx context.Context, Req *core_api.SystemGetDashboardReq) (r *core_api.SystemGetDashboardResp, err error) {
	var _args SystemGetDashboardArgs
	_args.Req = Req
	var _result SystemGetDashboardResult
	if err = p.c.Call(ctx, "SystemGetDashboard", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SystemGetOverallDashboard(ctx context.Context, Req *core_api.SystemGetOverallDashboardReq) (r *core_api.SystemGetOverallDashboardResp, err error) {
	var _args SystemGetOverallDashboardArgs
	_args.Req = Req
	var _result SystemGetOverallDashboardResult
	if err = p.c.Call(ctx, "SystemGetOverallDashboard", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ResetMerchantPassword(ctx context.Context, Req *core_api.ResetMerchantPasswordReq) (r *core_api.Response, err error) {
	var _args ResetMerchantPasswordArgs
	_args.Req = Req
	var _result ResetMerchantPasswordResult
	if err = p.c.Call(ctx, "ResetMerchantPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteMerchant(ctx context.Context, Req *core_api.DeleteMerchantReq) (r *core_api.Response, err error) {
	var _args DeleteMerchantArgs
	_args.Req = Req
	var _result DeleteMerchantResult
	if err = p.c.Call(ctx, "DeleteMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
