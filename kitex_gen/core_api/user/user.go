// Code generated by Kitex v0.12.2. DO NOT EDIT.

package user

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	core_api "github.com/xh-polaris/ActiManage-IDL-gen/kitex_gen/core_api"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newLoginArgs,
		newLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SignUp": kitex.NewMethodInfo(
		signUpHandler,
		newSignUpArgs,
		newSignUpResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetSetting": kitex.NewMethodInfo(
		getSettingHandler,
		newGetSettingArgs,
		newGetSettingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListActivities": kitex.NewMethodInfo(
		listActivitiesHandler,
		newListActivitiesArgs,
		newListActivitiesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetActivity": kitex.NewMethodInfo(
		getActivityHandler,
		newGetActivityArgs,
		newGetActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DoFavorite": kitex.NewMethodInfo(
		doFavoriteHandler,
		newDoFavoriteArgs,
		newDoFavoriteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelFavorite": kitex.NewMethodInfo(
		cancelFavoriteHandler,
		newCancelFavoriteArgs,
		newCancelFavoriteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateBooking": kitex.NewMethodInfo(
		createBookingHandler,
		newCreateBookingArgs,
		newCreateBookingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelBookRecord": kitex.NewMethodInfo(
		cancelBookRecordHandler,
		newCancelBookRecordArgs,
		newCancelBookRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListActivitiesByBookRecords": kitex.NewMethodInfo(
		listActivitiesByBookRecordsHandler,
		newListActivitiesByBookRecordsArgs,
		newListActivitiesByBookRecordsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListReservers": kitex.NewMethodInfo(
		listReserversHandler,
		newListReserversArgs,
		newListReserversResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateReserver": kitex.NewMethodInfo(
		createReserverHandler,
		newCreateReserverArgs,
		newCreateReserverResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteReserver": kitex.NewMethodInfo(
		deleteReserverHandler,
		newDeleteReserverArgs,
		newDeleteReserverResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateReserver": kitex.NewMethodInfo(
		updateReserverHandler,
		newUpdateReserverArgs,
		newUpdateReserverResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newGetUserInfoArgs,
		newGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateUserInfo": kitex.NewMethodInfo(
		updateUserInfoHandler,
		newUpdateUserInfoArgs,
		newUpdateUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateNotice": kitex.NewMethodInfo(
		updateNoticeHandler,
		newUpdateNoticeArgs,
		newUpdateNoticeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetMerchantInfo": kitex.NewMethodInfo(
		getMerchantInfoHandler,
		newGetMerchantInfoArgs,
		newGetMerchantInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListActivitiesByView": kitex.NewMethodInfo(
		listActivitiesByViewHandler,
		newListActivitiesByViewArgs,
		newListActivitiesByViewResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	userServiceInfo                = NewServiceInfo()
	userServiceInfoForClient       = NewServiceInfoForClient()
	userServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "user"
	handlerType := (*core_api.User)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.2",
		Extra:           extra,
	}
	return svcInfo
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.LoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).Login(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *LoginArgs:
		success, err := handler.(core_api.User).Login(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newLoginArgs() interface{} {
	return &LoginArgs{}
}

func newLoginResult() interface{} {
	return &LoginResult{}
}

type LoginArgs struct {
	Req *core_api.LoginReq
}

func (p *LoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.LoginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LoginArgs) Unmarshal(in []byte) error {
	msg := new(core_api.LoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginArgs_Req_DEFAULT *core_api.LoginReq

func (p *LoginArgs) GetReq() *core_api.LoginReq {
	if !p.IsSetReq() {
		return LoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoginResult struct {
	Success *core_api.LoginResp
}

var LoginResult_Success_DEFAULT *core_api.LoginResp

func (p *LoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.LoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LoginResult) Unmarshal(in []byte) error {
	msg := new(core_api.LoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginResult) GetSuccess() *core_api.LoginResp {
	if !p.IsSetSuccess() {
		return LoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.LoginResp)
}

func (p *LoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginResult) GetResult() interface{} {
	return p.Success
}

func signUpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SignUpReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).SignUp(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SignUpArgs:
		success, err := handler.(core_api.User).SignUp(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SignUpResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSignUpArgs() interface{} {
	return &SignUpArgs{}
}

func newSignUpResult() interface{} {
	return &SignUpResult{}
}

type SignUpArgs struct {
	Req *core_api.SignUpReq
}

func (p *SignUpArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SignUpReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SignUpArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SignUpArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SignUpArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SignUpArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SignUpReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SignUpArgs_Req_DEFAULT *core_api.SignUpReq

func (p *SignUpArgs) GetReq() *core_api.SignUpReq {
	if !p.IsSetReq() {
		return SignUpArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SignUpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SignUpArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SignUpResult struct {
	Success *core_api.SignUpResp
}

var SignUpResult_Success_DEFAULT *core_api.SignUpResp

func (p *SignUpResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SignUpResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SignUpResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SignUpResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SignUpResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SignUpResult) Unmarshal(in []byte) error {
	msg := new(core_api.SignUpResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SignUpResult) GetSuccess() *core_api.SignUpResp {
	if !p.IsSetSuccess() {
		return SignUpResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SignUpResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SignUpResp)
}

func (p *SignUpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SignUpResult) GetResult() interface{} {
	return p.Success
}

func getSettingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetSettingReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).GetSetting(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetSettingArgs:
		success, err := handler.(core_api.User).GetSetting(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSettingResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetSettingArgs() interface{} {
	return &GetSettingArgs{}
}

func newGetSettingResult() interface{} {
	return &GetSettingResult{}
}

type GetSettingArgs struct {
	Req *core_api.GetSettingReq
}

func (p *GetSettingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetSettingReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSettingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSettingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSettingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSettingArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetSettingReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSettingArgs_Req_DEFAULT *core_api.GetSettingReq

func (p *GetSettingArgs) GetReq() *core_api.GetSettingReq {
	if !p.IsSetReq() {
		return GetSettingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSettingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSettingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSettingResult struct {
	Success *core_api.GetSettingResp
}

var GetSettingResult_Success_DEFAULT *core_api.GetSettingResp

func (p *GetSettingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetSettingResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSettingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSettingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSettingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSettingResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetSettingResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSettingResult) GetSuccess() *core_api.GetSettingResp {
	if !p.IsSetSuccess() {
		return GetSettingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSettingResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetSettingResp)
}

func (p *GetSettingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSettingResult) GetResult() interface{} {
	return p.Success
}

func listActivitiesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListActivitiesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).ListActivities(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListActivitiesArgs:
		success, err := handler.(core_api.User).ListActivities(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListActivitiesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListActivitiesArgs() interface{} {
	return &ListActivitiesArgs{}
}

func newListActivitiesResult() interface{} {
	return &ListActivitiesResult{}
}

type ListActivitiesArgs struct {
	Req *core_api.ListActivitiesReq
}

func (p *ListActivitiesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ListActivitiesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListActivitiesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListActivitiesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListActivitiesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListActivitiesArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListActivitiesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListActivitiesArgs_Req_DEFAULT *core_api.ListActivitiesReq

func (p *ListActivitiesArgs) GetReq() *core_api.ListActivitiesReq {
	if !p.IsSetReq() {
		return ListActivitiesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListActivitiesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListActivitiesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListActivitiesResult struct {
	Success *core_api.ListActivitiesResp
}

var ListActivitiesResult_Success_DEFAULT *core_api.ListActivitiesResp

func (p *ListActivitiesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ListActivitiesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListActivitiesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListActivitiesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListActivitiesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListActivitiesResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListActivitiesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListActivitiesResult) GetSuccess() *core_api.ListActivitiesResp {
	if !p.IsSetSuccess() {
		return ListActivitiesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListActivitiesResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListActivitiesResp)
}

func (p *ListActivitiesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListActivitiesResult) GetResult() interface{} {
	return p.Success
}

func getActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).GetActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetActivityArgs:
		success, err := handler.(core_api.User).GetActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetActivityArgs() interface{} {
	return &GetActivityArgs{}
}

func newGetActivityResult() interface{} {
	return &GetActivityResult{}
}

type GetActivityArgs struct {
	Req *core_api.GetActivityReq
}

func (p *GetActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetActivityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetActivityArgs_Req_DEFAULT *core_api.GetActivityReq

func (p *GetActivityArgs) GetReq() *core_api.GetActivityReq {
	if !p.IsSetReq() {
		return GetActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetActivityResult struct {
	Success *core_api.GetActivityResp
}

var GetActivityResult_Success_DEFAULT *core_api.GetActivityResp

func (p *GetActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetActivityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetActivityResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetActivityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetActivityResult) GetSuccess() *core_api.GetActivityResp {
	if !p.IsSetSuccess() {
		return GetActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetActivityResp)
}

func (p *GetActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetActivityResult) GetResult() interface{} {
	return p.Success
}

func doFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DoFavoriteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).DoFavorite(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DoFavoriteArgs:
		success, err := handler.(core_api.User).DoFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DoFavoriteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDoFavoriteArgs() interface{} {
	return &DoFavoriteArgs{}
}

func newDoFavoriteResult() interface{} {
	return &DoFavoriteResult{}
}

type DoFavoriteArgs struct {
	Req *core_api.DoFavoriteReq
}

func (p *DoFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DoFavoriteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DoFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DoFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DoFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DoFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DoFavoriteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DoFavoriteArgs_Req_DEFAULT *core_api.DoFavoriteReq

func (p *DoFavoriteArgs) GetReq() *core_api.DoFavoriteReq {
	if !p.IsSetReq() {
		return DoFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DoFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DoFavoriteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DoFavoriteResult struct {
	Success *core_api.Response
}

var DoFavoriteResult_Success_DEFAULT *core_api.Response

func (p *DoFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DoFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DoFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DoFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DoFavoriteResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DoFavoriteResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return DoFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DoFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *DoFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoFavoriteResult) GetResult() interface{} {
	return p.Success
}

func cancelFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CancelFavoriteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).CancelFavorite(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelFavoriteArgs:
		success, err := handler.(core_api.User).CancelFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelFavoriteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelFavoriteArgs() interface{} {
	return &CancelFavoriteArgs{}
}

func newCancelFavoriteResult() interface{} {
	return &CancelFavoriteResult{}
}

type CancelFavoriteArgs struct {
	Req *core_api.CancelFavoriteReq
}

func (p *CancelFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CancelFavoriteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CancelFavoriteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelFavoriteArgs_Req_DEFAULT *core_api.CancelFavoriteReq

func (p *CancelFavoriteArgs) GetReq() *core_api.CancelFavoriteReq {
	if !p.IsSetReq() {
		return CancelFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelFavoriteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelFavoriteResult struct {
	Success *core_api.Response
}

var CancelFavoriteResult_Success_DEFAULT *core_api.Response

func (p *CancelFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelFavoriteResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelFavoriteResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return CancelFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *CancelFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelFavoriteResult) GetResult() interface{} {
	return p.Success
}

func createBookingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateBookingReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).CreateBooking(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateBookingArgs:
		success, err := handler.(core_api.User).CreateBooking(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateBookingResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateBookingArgs() interface{} {
	return &CreateBookingArgs{}
}

func newCreateBookingResult() interface{} {
	return &CreateBookingResult{}
}

type CreateBookingArgs struct {
	Req *core_api.CreateBookingReq
}

func (p *CreateBookingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateBookingReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateBookingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateBookingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateBookingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateBookingArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateBookingReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateBookingArgs_Req_DEFAULT *core_api.CreateBookingReq

func (p *CreateBookingArgs) GetReq() *core_api.CreateBookingReq {
	if !p.IsSetReq() {
		return CreateBookingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateBookingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateBookingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateBookingResult struct {
	Success *core_api.Response
}

var CreateBookingResult_Success_DEFAULT *core_api.Response

func (p *CreateBookingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateBookingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateBookingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateBookingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateBookingResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateBookingResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return CreateBookingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateBookingResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *CreateBookingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateBookingResult) GetResult() interface{} {
	return p.Success
}

func cancelBookRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CancelBookRecordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).CancelBookRecord(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelBookRecordArgs:
		success, err := handler.(core_api.User).CancelBookRecord(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelBookRecordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelBookRecordArgs() interface{} {
	return &CancelBookRecordArgs{}
}

func newCancelBookRecordResult() interface{} {
	return &CancelBookRecordResult{}
}

type CancelBookRecordArgs struct {
	Req *core_api.CancelBookRecordReq
}

func (p *CancelBookRecordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CancelBookRecordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelBookRecordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelBookRecordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelBookRecordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelBookRecordArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CancelBookRecordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelBookRecordArgs_Req_DEFAULT *core_api.CancelBookRecordReq

func (p *CancelBookRecordArgs) GetReq() *core_api.CancelBookRecordReq {
	if !p.IsSetReq() {
		return CancelBookRecordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelBookRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelBookRecordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelBookRecordResult struct {
	Success *core_api.Response
}

var CancelBookRecordResult_Success_DEFAULT *core_api.Response

func (p *CancelBookRecordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelBookRecordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelBookRecordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelBookRecordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelBookRecordResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelBookRecordResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return CancelBookRecordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelBookRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *CancelBookRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelBookRecordResult) GetResult() interface{} {
	return p.Success
}

func listActivitiesByBookRecordsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListActivitiesByBookRecordsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).ListActivitiesByBookRecords(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListActivitiesByBookRecordsArgs:
		success, err := handler.(core_api.User).ListActivitiesByBookRecords(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListActivitiesByBookRecordsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListActivitiesByBookRecordsArgs() interface{} {
	return &ListActivitiesByBookRecordsArgs{}
}

func newListActivitiesByBookRecordsResult() interface{} {
	return &ListActivitiesByBookRecordsResult{}
}

type ListActivitiesByBookRecordsArgs struct {
	Req *core_api.ListActivitiesByBookRecordsReq
}

func (p *ListActivitiesByBookRecordsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ListActivitiesByBookRecordsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListActivitiesByBookRecordsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListActivitiesByBookRecordsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListActivitiesByBookRecordsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListActivitiesByBookRecordsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListActivitiesByBookRecordsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListActivitiesByBookRecordsArgs_Req_DEFAULT *core_api.ListActivitiesByBookRecordsReq

func (p *ListActivitiesByBookRecordsArgs) GetReq() *core_api.ListActivitiesByBookRecordsReq {
	if !p.IsSetReq() {
		return ListActivitiesByBookRecordsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListActivitiesByBookRecordsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListActivitiesByBookRecordsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListActivitiesByBookRecordsResult struct {
	Success *core_api.ListActivitiesByBookRecordsResp
}

var ListActivitiesByBookRecordsResult_Success_DEFAULT *core_api.ListActivitiesByBookRecordsResp

func (p *ListActivitiesByBookRecordsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ListActivitiesByBookRecordsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListActivitiesByBookRecordsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListActivitiesByBookRecordsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListActivitiesByBookRecordsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListActivitiesByBookRecordsResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListActivitiesByBookRecordsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListActivitiesByBookRecordsResult) GetSuccess() *core_api.ListActivitiesByBookRecordsResp {
	if !p.IsSetSuccess() {
		return ListActivitiesByBookRecordsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListActivitiesByBookRecordsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListActivitiesByBookRecordsResp)
}

func (p *ListActivitiesByBookRecordsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListActivitiesByBookRecordsResult) GetResult() interface{} {
	return p.Success
}

func listReserversHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListReserversReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).ListReservers(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListReserversArgs:
		success, err := handler.(core_api.User).ListReservers(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListReserversResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListReserversArgs() interface{} {
	return &ListReserversArgs{}
}

func newListReserversResult() interface{} {
	return &ListReserversResult{}
}

type ListReserversArgs struct {
	Req *core_api.ListReserversReq
}

func (p *ListReserversArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ListReserversReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListReserversArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListReserversArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListReserversArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListReserversArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListReserversReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListReserversArgs_Req_DEFAULT *core_api.ListReserversReq

func (p *ListReserversArgs) GetReq() *core_api.ListReserversReq {
	if !p.IsSetReq() {
		return ListReserversArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListReserversArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListReserversArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListReserversResult struct {
	Success *core_api.ListReserversResp
}

var ListReserversResult_Success_DEFAULT *core_api.ListReserversResp

func (p *ListReserversResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ListReserversResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListReserversResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListReserversResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListReserversResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListReserversResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListReserversResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListReserversResult) GetSuccess() *core_api.ListReserversResp {
	if !p.IsSetSuccess() {
		return ListReserversResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListReserversResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListReserversResp)
}

func (p *ListReserversResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListReserversResult) GetResult() interface{} {
	return p.Success
}

func createReserverHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateReserverReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).CreateReserver(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateReserverArgs:
		success, err := handler.(core_api.User).CreateReserver(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateReserverResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateReserverArgs() interface{} {
	return &CreateReserverArgs{}
}

func newCreateReserverResult() interface{} {
	return &CreateReserverResult{}
}

type CreateReserverArgs struct {
	Req *core_api.CreateReserverReq
}

func (p *CreateReserverArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateReserverReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateReserverArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateReserverArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateReserverArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateReserverArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateReserverReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateReserverArgs_Req_DEFAULT *core_api.CreateReserverReq

func (p *CreateReserverArgs) GetReq() *core_api.CreateReserverReq {
	if !p.IsSetReq() {
		return CreateReserverArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateReserverArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateReserverArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateReserverResult struct {
	Success *core_api.Response
}

var CreateReserverResult_Success_DEFAULT *core_api.Response

func (p *CreateReserverResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateReserverResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateReserverResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateReserverResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateReserverResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateReserverResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return CreateReserverResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateReserverResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *CreateReserverResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateReserverResult) GetResult() interface{} {
	return p.Success
}

func deleteReserverHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteReserverReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).DeleteReserver(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteReserverArgs:
		success, err := handler.(core_api.User).DeleteReserver(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteReserverResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteReserverArgs() interface{} {
	return &DeleteReserverArgs{}
}

func newDeleteReserverResult() interface{} {
	return &DeleteReserverResult{}
}

type DeleteReserverArgs struct {
	Req *core_api.DeleteReserverReq
}

func (p *DeleteReserverArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteReserverReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteReserverArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteReserverArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteReserverArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteReserverArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteReserverReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteReserverArgs_Req_DEFAULT *core_api.DeleteReserverReq

func (p *DeleteReserverArgs) GetReq() *core_api.DeleteReserverReq {
	if !p.IsSetReq() {
		return DeleteReserverArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteReserverArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteReserverArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteReserverResult struct {
	Success *core_api.Response
}

var DeleteReserverResult_Success_DEFAULT *core_api.Response

func (p *DeleteReserverResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteReserverResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteReserverResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteReserverResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteReserverResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteReserverResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return DeleteReserverResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteReserverResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *DeleteReserverResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteReserverResult) GetResult() interface{} {
	return p.Success
}

func updateReserverHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateReserverReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).UpdateReserver(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateReserverArgs:
		success, err := handler.(core_api.User).UpdateReserver(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateReserverResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateReserverArgs() interface{} {
	return &UpdateReserverArgs{}
}

func newUpdateReserverResult() interface{} {
	return &UpdateReserverResult{}
}

type UpdateReserverArgs struct {
	Req *core_api.UpdateReserverReq
}

func (p *UpdateReserverArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateReserverReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateReserverArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateReserverArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateReserverArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateReserverArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateReserverReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateReserverArgs_Req_DEFAULT *core_api.UpdateReserverReq

func (p *UpdateReserverArgs) GetReq() *core_api.UpdateReserverReq {
	if !p.IsSetReq() {
		return UpdateReserverArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateReserverArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateReserverArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateReserverResult struct {
	Success *core_api.Response
}

var UpdateReserverResult_Success_DEFAULT *core_api.Response

func (p *UpdateReserverResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateReserverResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateReserverResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateReserverResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateReserverResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateReserverResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateReserverResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateReserverResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateReserverResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateReserverResult) GetResult() interface{} {
	return p.Success
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).GetUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserInfoArgs:
		success, err := handler.(core_api.User).GetUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserInfoArgs() interface{} {
	return &GetUserInfoArgs{}
}

func newGetUserInfoResult() interface{} {
	return &GetUserInfoResult{}
}

type GetUserInfoArgs struct {
	Req *core_api.GetUserInfoReq
}

func (p *GetUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserInfoArgs_Req_DEFAULT *core_api.GetUserInfoReq

func (p *GetUserInfoArgs) GetReq() *core_api.GetUserInfoReq {
	if !p.IsSetReq() {
		return GetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserInfoResult struct {
	Success *core_api.GetUserInfoResp
}

var GetUserInfoResult_Success_DEFAULT *core_api.GetUserInfoResp

func (p *GetUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetUserInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserInfoResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserInfoResult) GetSuccess() *core_api.GetUserInfoResp {
	if !p.IsSetSuccess() {
		return GetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetUserInfoResp)
}

func (p *GetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserInfoResult) GetResult() interface{} {
	return p.Success
}

func updateUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).UpdateUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateUserInfoArgs:
		success, err := handler.(core_api.User).UpdateUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateUserInfoArgs() interface{} {
	return &UpdateUserInfoArgs{}
}

func newUpdateUserInfoResult() interface{} {
	return &UpdateUserInfoResult{}
}

type UpdateUserInfoArgs struct {
	Req *core_api.UpdateUserInfoReq
}

func (p *UpdateUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateUserInfoArgs_Req_DEFAULT *core_api.UpdateUserInfoReq

func (p *UpdateUserInfoArgs) GetReq() *core_api.UpdateUserInfoReq {
	if !p.IsSetReq() {
		return UpdateUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateUserInfoResult struct {
	Success *core_api.Response
}

var UpdateUserInfoResult_Success_DEFAULT *core_api.Response

func (p *UpdateUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateUserInfoResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateUserInfoResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateUserInfoResult) GetResult() interface{} {
	return p.Success
}

func updateNoticeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateNoticeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).UpdateNotice(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateNoticeArgs:
		success, err := handler.(core_api.User).UpdateNotice(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateNoticeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateNoticeArgs() interface{} {
	return &UpdateNoticeArgs{}
}

func newUpdateNoticeResult() interface{} {
	return &UpdateNoticeResult{}
}

type UpdateNoticeArgs struct {
	Req *core_api.UpdateNoticeReq
}

func (p *UpdateNoticeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateNoticeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateNoticeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateNoticeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateNoticeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateNoticeArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateNoticeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateNoticeArgs_Req_DEFAULT *core_api.UpdateNoticeReq

func (p *UpdateNoticeArgs) GetReq() *core_api.UpdateNoticeReq {
	if !p.IsSetReq() {
		return UpdateNoticeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateNoticeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateNoticeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateNoticeResult struct {
	Success *core_api.Response
}

var UpdateNoticeResult_Success_DEFAULT *core_api.Response

func (p *UpdateNoticeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateNoticeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateNoticeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateNoticeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateNoticeResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateNoticeResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateNoticeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateNoticeResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateNoticeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateNoticeResult) GetResult() interface{} {
	return p.Success
}

func getMerchantInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetMerchantInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).GetMerchantInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetMerchantInfoArgs:
		success, err := handler.(core_api.User).GetMerchantInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMerchantInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetMerchantInfoArgs() interface{} {
	return &GetMerchantInfoArgs{}
}

func newGetMerchantInfoResult() interface{} {
	return &GetMerchantInfoResult{}
}

type GetMerchantInfoArgs struct {
	Req *core_api.GetMerchantInfoReq
}

func (p *GetMerchantInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetMerchantInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMerchantInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMerchantInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMerchantInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMerchantInfoArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetMerchantInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMerchantInfoArgs_Req_DEFAULT *core_api.GetMerchantInfoReq

func (p *GetMerchantInfoArgs) GetReq() *core_api.GetMerchantInfoReq {
	if !p.IsSetReq() {
		return GetMerchantInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMerchantInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMerchantInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMerchantInfoResult struct {
	Success *core_api.GetMerchantInfoResp
}

var GetMerchantInfoResult_Success_DEFAULT *core_api.GetMerchantInfoResp

func (p *GetMerchantInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetMerchantInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMerchantInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMerchantInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMerchantInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMerchantInfoResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetMerchantInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMerchantInfoResult) GetSuccess() *core_api.GetMerchantInfoResp {
	if !p.IsSetSuccess() {
		return GetMerchantInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMerchantInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetMerchantInfoResp)
}

func (p *GetMerchantInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMerchantInfoResult) GetResult() interface{} {
	return p.Success
}

func listActivitiesByViewHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListActivitiesByViewReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(core_api.User).ListActivitiesByView(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListActivitiesByViewArgs:
		success, err := handler.(core_api.User).ListActivitiesByView(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListActivitiesByViewResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListActivitiesByViewArgs() interface{} {
	return &ListActivitiesByViewArgs{}
}

func newListActivitiesByViewResult() interface{} {
	return &ListActivitiesByViewResult{}
}

type ListActivitiesByViewArgs struct {
	Req *core_api.ListActivitiesByViewReq
}

func (p *ListActivitiesByViewArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ListActivitiesByViewReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListActivitiesByViewArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListActivitiesByViewArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListActivitiesByViewArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListActivitiesByViewArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListActivitiesByViewReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListActivitiesByViewArgs_Req_DEFAULT *core_api.ListActivitiesByViewReq

func (p *ListActivitiesByViewArgs) GetReq() *core_api.ListActivitiesByViewReq {
	if !p.IsSetReq() {
		return ListActivitiesByViewArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListActivitiesByViewArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListActivitiesByViewArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListActivitiesByViewResult struct {
	Success *core_api.ListActivitiesByViewResp
}

var ListActivitiesByViewResult_Success_DEFAULT *core_api.ListActivitiesByViewResp

func (p *ListActivitiesByViewResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ListActivitiesByViewResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListActivitiesByViewResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListActivitiesByViewResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListActivitiesByViewResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListActivitiesByViewResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListActivitiesByViewResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListActivitiesByViewResult) GetSuccess() *core_api.ListActivitiesByViewResp {
	if !p.IsSetSuccess() {
		return ListActivitiesByViewResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListActivitiesByViewResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListActivitiesByViewResp)
}

func (p *ListActivitiesByViewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListActivitiesByViewResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Login(ctx context.Context, Req *core_api.LoginReq) (r *core_api.LoginResp, err error) {
	var _args LoginArgs
	_args.Req = Req
	var _result LoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SignUp(ctx context.Context, Req *core_api.SignUpReq) (r *core_api.SignUpResp, err error) {
	var _args SignUpArgs
	_args.Req = Req
	var _result SignUpResult
	if err = p.c.Call(ctx, "SignUp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSetting(ctx context.Context, Req *core_api.GetSettingReq) (r *core_api.GetSettingResp, err error) {
	var _args GetSettingArgs
	_args.Req = Req
	var _result GetSettingResult
	if err = p.c.Call(ctx, "GetSetting", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListActivities(ctx context.Context, Req *core_api.ListActivitiesReq) (r *core_api.ListActivitiesResp, err error) {
	var _args ListActivitiesArgs
	_args.Req = Req
	var _result ListActivitiesResult
	if err = p.c.Call(ctx, "ListActivities", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetActivity(ctx context.Context, Req *core_api.GetActivityReq) (r *core_api.GetActivityResp, err error) {
	var _args GetActivityArgs
	_args.Req = Req
	var _result GetActivityResult
	if err = p.c.Call(ctx, "GetActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DoFavorite(ctx context.Context, Req *core_api.DoFavoriteReq) (r *core_api.Response, err error) {
	var _args DoFavoriteArgs
	_args.Req = Req
	var _result DoFavoriteResult
	if err = p.c.Call(ctx, "DoFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelFavorite(ctx context.Context, Req *core_api.CancelFavoriteReq) (r *core_api.Response, err error) {
	var _args CancelFavoriteArgs
	_args.Req = Req
	var _result CancelFavoriteResult
	if err = p.c.Call(ctx, "CancelFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateBooking(ctx context.Context, Req *core_api.CreateBookingReq) (r *core_api.Response, err error) {
	var _args CreateBookingArgs
	_args.Req = Req
	var _result CreateBookingResult
	if err = p.c.Call(ctx, "CreateBooking", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelBookRecord(ctx context.Context, Req *core_api.CancelBookRecordReq) (r *core_api.Response, err error) {
	var _args CancelBookRecordArgs
	_args.Req = Req
	var _result CancelBookRecordResult
	if err = p.c.Call(ctx, "CancelBookRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListActivitiesByBookRecords(ctx context.Context, Req *core_api.ListActivitiesByBookRecordsReq) (r *core_api.ListActivitiesByBookRecordsResp, err error) {
	var _args ListActivitiesByBookRecordsArgs
	_args.Req = Req
	var _result ListActivitiesByBookRecordsResult
	if err = p.c.Call(ctx, "ListActivitiesByBookRecords", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListReservers(ctx context.Context, Req *core_api.ListReserversReq) (r *core_api.ListReserversResp, err error) {
	var _args ListReserversArgs
	_args.Req = Req
	var _result ListReserversResult
	if err = p.c.Call(ctx, "ListReservers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateReserver(ctx context.Context, Req *core_api.CreateReserverReq) (r *core_api.Response, err error) {
	var _args CreateReserverArgs
	_args.Req = Req
	var _result CreateReserverResult
	if err = p.c.Call(ctx, "CreateReserver", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteReserver(ctx context.Context, Req *core_api.DeleteReserverReq) (r *core_api.Response, err error) {
	var _args DeleteReserverArgs
	_args.Req = Req
	var _result DeleteReserverResult
	if err = p.c.Call(ctx, "DeleteReserver", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateReserver(ctx context.Context, Req *core_api.UpdateReserverReq) (r *core_api.Response, err error) {
	var _args UpdateReserverArgs
	_args.Req = Req
	var _result UpdateReserverResult
	if err = p.c.Call(ctx, "UpdateReserver", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, Req *core_api.GetUserInfoReq) (r *core_api.GetUserInfoResp, err error) {
	var _args GetUserInfoArgs
	_args.Req = Req
	var _result GetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserInfo(ctx context.Context, Req *core_api.UpdateUserInfoReq) (r *core_api.Response, err error) {
	var _args UpdateUserInfoArgs
	_args.Req = Req
	var _result UpdateUserInfoResult
	if err = p.c.Call(ctx, "UpdateUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateNotice(ctx context.Context, Req *core_api.UpdateNoticeReq) (r *core_api.Response, err error) {
	var _args UpdateNoticeArgs
	_args.Req = Req
	var _result UpdateNoticeResult
	if err = p.c.Call(ctx, "UpdateNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMerchantInfo(ctx context.Context, Req *core_api.GetMerchantInfoReq) (r *core_api.GetMerchantInfoResp, err error) {
	var _args GetMerchantInfoArgs
	_args.Req = Req
	var _result GetMerchantInfoResult
	if err = p.c.Call(ctx, "GetMerchantInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListActivitiesByView(ctx context.Context, Req *core_api.ListActivitiesByViewReq) (r *core_api.ListActivitiesByViewResp, err error) {
	var _args ListActivitiesByViewArgs
	_args.Req = Req
	var _result ListActivitiesByViewResult
	if err = p.c.Call(ctx, "ListActivitiesByView", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
