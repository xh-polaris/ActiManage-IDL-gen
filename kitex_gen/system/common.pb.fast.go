// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package system

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	basic "github.com/xh-polaris/ActiManage-IDL-gen/kitex_gen/basic"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Opening) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Opening[number], err)
}

func (x *Opening) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StartDay, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Opening) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.EndDay, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Opening) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.StartTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Opening) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.EndTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Location) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Location[number], err)
}

func (x *Location) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Text, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Location) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Longitude, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Location) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Latitude, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Merchant) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Merchant[number], err)
}

func (x *Merchant) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Merchant) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Merchant) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Logo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Merchant) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v Opening
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Openings = append(x.Openings, &v)
	return offset, nil
}

func (x *Merchant) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Merchant) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v Location
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Location = &v
	return offset, nil
}

func (x *Merchant) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Merchant) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Licences = append(x.Licences, v)
	return offset, err
}

func (x *Merchant) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Merchant) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Merchant) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Merchant) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.DeleteTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Merchant) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Header) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Header[number], err)
}

func (x *Header) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int64
			v, offset, err = fastpb.ReadInt64(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Rgb = append(x.Rgb, v)
			return offset, err
		})
	return offset, err
}

func (x *Cover) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Cover[number], err)
}

func (x *Cover) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Cover) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Imgs = append(x.Imgs, v)
	return offset, err
}

func (x *Footer) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Footer[number], err)
}

func (x *Footer) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Imgs = append(x.Imgs, v)
	return offset, err
}

func (x *Setting) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Setting[number], err)
}

func (x *Setting) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Setting) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.MerchantId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Setting) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Header
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Header = &v
	return offset, nil
}

func (x *Setting) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v Cover
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cover = &v
	return offset, nil
}

func (x *Setting) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v Footer
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Footer = &v
	return offset, nil
}

func (x *Setting) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Setting) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Setting) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.DeleteTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Setting) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ActivitySetting) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ActivitySetting[number], err)
}

func (x *ActivitySetting) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Max, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ActivitySetting) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Start, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ActivitySetting) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.End, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Activity[number], err)
}

func (x *Activity) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.MerchantId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Cover = append(x.Cover, v)
	return offset, err
}

func (x *Activity) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Book, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.BookStart, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.BookEnd, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v ActivitySetting
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Setting = &v
	return offset, nil
}

func (x *Activity) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	var v Location
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Location = &v
	return offset, nil
}

func (x *Activity) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Top, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Notice, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	x.DeleteTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Activity) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Admin) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Admin[number], err)
}

func (x *Admin) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Admin) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Auth, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Admin) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Admin) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Admin) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Admin) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.DeleteTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Admin) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *MerchantLoginReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MerchantLoginReq[number], err)
}

func (x *MerchantLoginReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AuthId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MerchantLoginReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MerchantLoginResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MerchantLoginResp[number], err)
}

func (x *MerchantLoginResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *MerchantLoginResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MerchantLoginResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MerchantSetPasswordReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MerchantSetPasswordReq[number], err)
}

func (x *MerchantSetPasswordReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MerchantSetPasswordReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OldPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MerchantSetPasswordReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.NewPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateMerchantInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateMerchantInfoReq[number], err)
}

func (x *UpdateMerchantInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateMerchantInfoReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateMerchantInfoReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Logo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateMerchantInfoReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v Opening
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Openings = append(x.Openings, &v)
	return offset, nil
}

func (x *UpdateMerchantInfoReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v Location
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Location = &v
	return offset, nil
}

func (x *UpdateMerchantInfoReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateMerchantInfoReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Licences = append(x.Licences, v)
	return offset, err
}

func (x *UpdateSettingReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateSettingReq[number], err)
}

func (x *UpdateSettingReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateSettingReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Header
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Header = &v
	return offset, nil
}

func (x *UpdateSettingReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Cover
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Cover = &v
	return offset, nil
}

func (x *UpdateSettingReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v Footer
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Footer = &v
	return offset, nil
}

func (x *GetMerchantSettingReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetMerchantSettingReq[number], err)
}

func (x *GetMerchantSettingReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MerchantId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetMerchantSettingResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetMerchantSettingResp[number], err)
}

func (x *GetMerchantSettingResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetMerchantSettingResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetMerchantSettingResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Setting
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Setting = &v
	return offset, nil
}

func (x *CreateActivityReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateActivityReq[number], err)
}

func (x *CreateActivityReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MerchantId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Book, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.BookStart, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.BookEnd, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v ActivitySetting
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Setting = append(x.Setting, &v)
	return offset, nil
}

func (x *CreateActivityReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v Location
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Location = &v
	return offset, nil
}

func (x *CreateActivityReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Top, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Notice, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateActivityReq) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Cover = append(x.Cover, v)
	return offset, err
}

func (x *TopActivityReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_TopActivityReq[number], err)
}

func (x *TopActivityReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteActivityReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteActivityReq[number], err)
}

func (x *DeleteActivityReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateActivityReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateActivityReq[number], err)
}

func (x *UpdateActivityReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MerchantId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateActivityReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Activity
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Activity = &v
	return offset, nil
}

func (x *ListActivitiesReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListActivitiesReq[number], err)
}

func (x *ListActivitiesReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.Paging
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Paging = &v
	return offset, nil
}

func (x *ListActivitiesReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListActivitiesResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListActivitiesResp[number], err)
}

func (x *ListActivitiesResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListActivitiesResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListActivitiesResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Activity
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Activities = append(x.Activities, &v)
	return offset, nil
}

func (x *ListActivitiesResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetActivityReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetActivityReq[number], err)
}

func (x *GetActivityReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetActivityResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetActivityResp[number], err)
}

func (x *GetActivityResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetActivityResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetActivityResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Activity
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Activity = &v
	return offset, nil
}

func (x *AdminLoginReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AdminLoginReq[number], err)
}

func (x *AdminLoginReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AuthId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AdminLoginReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AdminLoginResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AdminLoginResp[number], err)
}

func (x *AdminLoginResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *AdminLoginResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AdminLoginResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AdminSetPasswordReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_AdminSetPasswordReq[number], err)
}

func (x *AdminSetPasswordReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AdminSetPasswordReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OldPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *AdminSetPasswordReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.NewPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateMerchantReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateMerchantReq[number], err)
}

func (x *CreateMerchantReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AdminId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateMerchantReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateMerchantReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Opening
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Openings = append(x.Openings, &v)
	return offset, nil
}

func (x *CreateMerchantReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateMerchantReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v Location
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Location = &v
	return offset, nil
}

func (x *CreateMerchantReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateMerchantReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Licences = append(x.Licences, v)
	return offset, err
}

func (x *CreateMerchantReq) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Logo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateMerchantReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateMerchantReq[number], err)
}

func (x *UpdateMerchantReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AdminId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateMerchantReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Merchant
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Merchant = &v
	return offset, nil
}

func (x *GetMerchantInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetMerchantInfoReq[number], err)
}

func (x *GetMerchantInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetMerchantInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetMerchantInfoResp[number], err)
}

func (x *GetMerchantInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetMerchantInfoResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetMerchantInfoResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetMerchantInfoResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetMerchantInfoResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Logo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetMerchantInfoResp) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v Opening
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Openings = append(x.Openings, &v)
	return offset, nil
}

func (x *GetMerchantInfoResp) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetMerchantInfoResp) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v Location
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Location = &v
	return offset, nil
}

func (x *GetMerchantInfoResp) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetMerchantInfoResp) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Licences = append(x.Licences, v)
	return offset, err
}

func (x *GetMerchantInfoResp) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetMerchantInfoResp) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetMerchantInfoResp) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.DeleteTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetMerchantInfoResp) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListMerchantsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListMerchantsReq[number], err)
}

func (x *ListMerchantsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v basic.Paging
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Paging = &v
	return offset, nil
}

func (x *ListMerchantsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListMerchantsResp[number], err)
}

func (x *ListMerchantsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListMerchantsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListMerchantsResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v ListMerchantsResp_Item
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Merchants = append(x.Merchants, &v)
	return offset, nil
}

func (x *ListMerchantsResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteMerchantReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteMerchantReq[number], err)
}

func (x *DeleteMerchantReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AdminId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteMerchantReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.MerchantId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *StsSendVerifyCodeReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_StsSendVerifyCodeReq[number], err)
}

func (x *StsSendVerifyCodeReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AuthId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *StsSendVerifyCodeReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AuthType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *StsSendVerifyCodeReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Purpose, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Response) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Response[number], err)
}

func (x *Response) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Response) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListMerchantsResp_Item) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListMerchantsResp_Item[number], err)
}

func (x *ListMerchantsResp_Item) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListMerchantsResp_Item) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListMerchantsResp_Item) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Logo, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Opening) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *Opening) fastWriteField1(buf []byte) (offset int) {
	if x.StartDay == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStartDay())
	return offset
}

func (x *Opening) fastWriteField2(buf []byte) (offset int) {
	if x.EndDay == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetEndDay())
	return offset
}

func (x *Opening) fastWriteField3(buf []byte) (offset int) {
	if x.StartTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetStartTime())
	return offset
}

func (x *Opening) fastWriteField4(buf []byte) (offset int) {
	if x.EndTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetEndTime())
	return offset
}

func (x *Location) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Location) fastWriteField1(buf []byte) (offset int) {
	if x.Text == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetText())
	return offset
}

func (x *Location) fastWriteField2(buf []byte) (offset int) {
	if x.Longitude == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 2, x.GetLongitude())
	return offset
}

func (x *Location) fastWriteField3(buf []byte) (offset int) {
	if x.Latitude == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 3, x.GetLatitude())
	return offset
}

func (x *Merchant) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	return offset
}

func (x *Merchant) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Merchant) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *Merchant) fastWriteField3(buf []byte) (offset int) {
	if x.Logo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLogo())
	return offset
}

func (x *Merchant) fastWriteField4(buf []byte) (offset int) {
	if x.Openings == nil {
		return offset
	}
	for i := range x.GetOpenings() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetOpenings()[i])
	}
	return offset
}

func (x *Merchant) fastWriteField5(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetPhone())
	return offset
}

func (x *Merchant) fastWriteField6(buf []byte) (offset int) {
	if x.Location == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 6, x.GetLocation())
	return offset
}

func (x *Merchant) fastWriteField7(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetDescription())
	return offset
}

func (x *Merchant) fastWriteField8(buf []byte) (offset int) {
	if len(x.Licences) == 0 {
		return offset
	}
	for i := range x.GetLicences() {
		offset += fastpb.WriteString(buf[offset:], 8, x.GetLicences()[i])
	}
	return offset
}

func (x *Merchant) fastWriteField9(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetPassword())
	return offset
}

func (x *Merchant) fastWriteField10(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetCreateTime())
	return offset
}

func (x *Merchant) fastWriteField11(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetUpdateTime())
	return offset
}

func (x *Merchant) fastWriteField12(buf []byte) (offset int) {
	if x.DeleteTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetDeleteTime())
	return offset
}

func (x *Merchant) fastWriteField13(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 13, x.GetStatus())
	return offset
}

func (x *Header) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *Header) fastWriteField1(buf []byte) (offset int) {
	if len(x.Rgb) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetRgb()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, x.GetRgb()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *Cover) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Cover) fastWriteField1(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetType())
	return offset
}

func (x *Cover) fastWriteField2(buf []byte) (offset int) {
	if len(x.Imgs) == 0 {
		return offset
	}
	for i := range x.GetImgs() {
		offset += fastpb.WriteString(buf[offset:], 2, x.GetImgs()[i])
	}
	return offset
}

func (x *Footer) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *Footer) fastWriteField1(buf []byte) (offset int) {
	if len(x.Imgs) == 0 {
		return offset
	}
	for i := range x.GetImgs() {
		offset += fastpb.WriteString(buf[offset:], 1, x.GetImgs()[i])
	}
	return offset
}

func (x *Setting) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *Setting) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Setting) fastWriteField2(buf []byte) (offset int) {
	if x.MerchantId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMerchantId())
	return offset
}

func (x *Setting) fastWriteField3(buf []byte) (offset int) {
	if x.Header == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetHeader())
	return offset
}

func (x *Setting) fastWriteField4(buf []byte) (offset int) {
	if x.Cover == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetCover())
	return offset
}

func (x *Setting) fastWriteField5(buf []byte) (offset int) {
	if x.Footer == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 5, x.GetFooter())
	return offset
}

func (x *Setting) fastWriteField6(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetCreateTime())
	return offset
}

func (x *Setting) fastWriteField7(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetUpdateTime())
	return offset
}

func (x *Setting) fastWriteField8(buf []byte) (offset int) {
	if x.DeleteTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetDeleteTime())
	return offset
}

func (x *Setting) fastWriteField9(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetStatus())
	return offset
}

func (x *ActivitySetting) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ActivitySetting) fastWriteField1(buf []byte) (offset int) {
	if x.Max == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetMax())
	return offset
}

func (x *ActivitySetting) fastWriteField2(buf []byte) (offset int) {
	if x.Start == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetStart())
	return offset
}

func (x *ActivitySetting) fastWriteField3(buf []byte) (offset int) {
	if x.End == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetEnd())
	return offset
}

func (x *Activity) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	return offset
}

func (x *Activity) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Activity) fastWriteField2(buf []byte) (offset int) {
	if x.MerchantId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMerchantId())
	return offset
}

func (x *Activity) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *Activity) fastWriteField4(buf []byte) (offset int) {
	if len(x.Cover) == 0 {
		return offset
	}
	for i := range x.GetCover() {
		offset += fastpb.WriteString(buf[offset:], 4, x.GetCover()[i])
	}
	return offset
}

func (x *Activity) fastWriteField5(buf []byte) (offset int) {
	if x.Book == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetBook())
	return offset
}

func (x *Activity) fastWriteField6(buf []byte) (offset int) {
	if x.BookStart == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetBookStart())
	return offset
}

func (x *Activity) fastWriteField7(buf []byte) (offset int) {
	if x.BookEnd == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetBookEnd())
	return offset
}

func (x *Activity) fastWriteField8(buf []byte) (offset int) {
	if x.Setting == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 8, x.GetSetting())
	return offset
}

func (x *Activity) fastWriteField9(buf []byte) (offset int) {
	if x.Location == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 9, x.GetLocation())
	return offset
}

func (x *Activity) fastWriteField10(buf []byte) (offset int) {
	if x.Top == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetTop())
	return offset
}

func (x *Activity) fastWriteField11(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetPhone())
	return offset
}

func (x *Activity) fastWriteField12(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetDescription())
	return offset
}

func (x *Activity) fastWriteField13(buf []byte) (offset int) {
	if x.Notice == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 13, x.GetNotice())
	return offset
}

func (x *Activity) fastWriteField14(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 14, x.GetCreateTime())
	return offset
}

func (x *Activity) fastWriteField15(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 15, x.GetUpdateTime())
	return offset
}

func (x *Activity) fastWriteField16(buf []byte) (offset int) {
	if x.DeleteTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 16, x.GetDeleteTime())
	return offset
}

func (x *Activity) fastWriteField17(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 17, x.GetStatus())
	return offset
}

func (x *Admin) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *Admin) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Admin) fastWriteField2(buf []byte) (offset int) {
	if x.Auth == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAuth())
	return offset
}

func (x *Admin) fastWriteField3(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPassword())
	return offset
}

func (x *Admin) fastWriteField4(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetCreateTime())
	return offset
}

func (x *Admin) fastWriteField5(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetUpdateTime())
	return offset
}

func (x *Admin) fastWriteField6(buf []byte) (offset int) {
	if x.DeleteTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetDeleteTime())
	return offset
}

func (x *Admin) fastWriteField7(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetStatus())
	return offset
}

func (x *MerchantLoginReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *MerchantLoginReq) fastWriteField1(buf []byte) (offset int) {
	if x.AuthId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAuthId())
	return offset
}

func (x *MerchantLoginReq) fastWriteField4(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPassword())
	return offset
}

func (x *MerchantLoginResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *MerchantLoginResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *MerchantLoginResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *MerchantLoginResp) fastWriteField3(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetId())
	return offset
}

func (x *MerchantSetPasswordReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *MerchantSetPasswordReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *MerchantSetPasswordReq) fastWriteField2(buf []byte) (offset int) {
	if x.OldPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOldPassword())
	return offset
}

func (x *MerchantSetPasswordReq) fastWriteField3(buf []byte) (offset int) {
	if x.NewPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetNewPassword())
	return offset
}

func (x *UpdateMerchantInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *UpdateMerchantInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateMerchantInfoReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UpdateMerchantInfoReq) fastWriteField3(buf []byte) (offset int) {
	if x.Logo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLogo())
	return offset
}

func (x *UpdateMerchantInfoReq) fastWriteField4(buf []byte) (offset int) {
	if x.Openings == nil {
		return offset
	}
	for i := range x.GetOpenings() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetOpenings()[i])
	}
	return offset
}

func (x *UpdateMerchantInfoReq) fastWriteField5(buf []byte) (offset int) {
	if x.Location == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 5, x.GetLocation())
	return offset
}

func (x *UpdateMerchantInfoReq) fastWriteField6(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetDescription())
	return offset
}

func (x *UpdateMerchantInfoReq) fastWriteField7(buf []byte) (offset int) {
	if len(x.Licences) == 0 {
		return offset
	}
	for i := range x.GetLicences() {
		offset += fastpb.WriteString(buf[offset:], 7, x.GetLicences()[i])
	}
	return offset
}

func (x *UpdateSettingReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *UpdateSettingReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateSettingReq) fastWriteField2(buf []byte) (offset int) {
	if x.Header == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetHeader())
	return offset
}

func (x *UpdateSettingReq) fastWriteField3(buf []byte) (offset int) {
	if x.Cover == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetCover())
	return offset
}

func (x *UpdateSettingReq) fastWriteField4(buf []byte) (offset int) {
	if x.Footer == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetFooter())
	return offset
}

func (x *GetMerchantSettingReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetMerchantSettingReq) fastWriteField1(buf []byte) (offset int) {
	if x.MerchantId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMerchantId())
	return offset
}

func (x *GetMerchantSettingResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetMerchantSettingResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *GetMerchantSettingResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetMerchantSettingResp) fastWriteField3(buf []byte) (offset int) {
	if x.Setting == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetSetting())
	return offset
}

func (x *CreateActivityReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	return offset
}

func (x *CreateActivityReq) fastWriteField1(buf []byte) (offset int) {
	if x.MerchantId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMerchantId())
	return offset
}

func (x *CreateActivityReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *CreateActivityReq) fastWriteField3(buf []byte) (offset int) {
	if x.Book == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetBook())
	return offset
}

func (x *CreateActivityReq) fastWriteField4(buf []byte) (offset int) {
	if x.BookStart == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetBookStart())
	return offset
}

func (x *CreateActivityReq) fastWriteField5(buf []byte) (offset int) {
	if x.BookEnd == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetBookEnd())
	return offset
}

func (x *CreateActivityReq) fastWriteField6(buf []byte) (offset int) {
	if x.Setting == nil {
		return offset
	}
	for i := range x.GetSetting() {
		offset += fastpb.WriteMessage(buf[offset:], 6, x.GetSetting()[i])
	}
	return offset
}

func (x *CreateActivityReq) fastWriteField7(buf []byte) (offset int) {
	if x.Location == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 7, x.GetLocation())
	return offset
}

func (x *CreateActivityReq) fastWriteField8(buf []byte) (offset int) {
	if x.Top == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetTop())
	return offset
}

func (x *CreateActivityReq) fastWriteField9(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetPhone())
	return offset
}

func (x *CreateActivityReq) fastWriteField10(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetDescription())
	return offset
}

func (x *CreateActivityReq) fastWriteField11(buf []byte) (offset int) {
	if x.Notice == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetNotice())
	return offset
}

func (x *CreateActivityReq) fastWriteField12(buf []byte) (offset int) {
	if len(x.Cover) == 0 {
		return offset
	}
	for i := range x.GetCover() {
		offset += fastpb.WriteString(buf[offset:], 12, x.GetCover()[i])
	}
	return offset
}

func (x *TopActivityReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *TopActivityReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *DeleteActivityReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteActivityReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateActivityReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateActivityReq) fastWriteField1(buf []byte) (offset int) {
	if x.MerchantId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMerchantId())
	return offset
}

func (x *UpdateActivityReq) fastWriteField2(buf []byte) (offset int) {
	if x.Activity == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetActivity())
	return offset
}

func (x *ListActivitiesReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListActivitiesReq) fastWriteField1(buf []byte) (offset int) {
	if x.Paging == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPaging())
	return offset
}

func (x *ListActivitiesReq) fastWriteField2(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetType())
	return offset
}

func (x *ListActivitiesResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *ListActivitiesResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *ListActivitiesResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *ListActivitiesResp) fastWriteField3(buf []byte) (offset int) {
	if x.Activities == nil {
		return offset
	}
	for i := range x.GetActivities() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetActivities()[i])
	}
	return offset
}

func (x *ListActivitiesResp) fastWriteField4(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetTotal())
	return offset
}

func (x *GetActivityReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetActivityReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetActivityResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetActivityResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *GetActivityResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetActivityResp) fastWriteField3(buf []byte) (offset int) {
	if x.Activity == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetActivity())
	return offset
}

func (x *AdminLoginReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *AdminLoginReq) fastWriteField1(buf []byte) (offset int) {
	if x.AuthId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAuthId())
	return offset
}

func (x *AdminLoginReq) fastWriteField2(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPassword())
	return offset
}

func (x *AdminLoginResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *AdminLoginResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *AdminLoginResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *AdminLoginResp) fastWriteField3(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUserId())
	return offset
}

func (x *AdminSetPasswordReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *AdminSetPasswordReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *AdminSetPasswordReq) fastWriteField2(buf []byte) (offset int) {
	if x.OldPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOldPassword())
	return offset
}

func (x *AdminSetPasswordReq) fastWriteField3(buf []byte) (offset int) {
	if x.NewPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetNewPassword())
	return offset
}

func (x *CreateMerchantReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *CreateMerchantReq) fastWriteField1(buf []byte) (offset int) {
	if x.AdminId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAdminId())
	return offset
}

func (x *CreateMerchantReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *CreateMerchantReq) fastWriteField3(buf []byte) (offset int) {
	if x.Openings == nil {
		return offset
	}
	for i := range x.GetOpenings() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetOpenings()[i])
	}
	return offset
}

func (x *CreateMerchantReq) fastWriteField4(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPhone())
	return offset
}

func (x *CreateMerchantReq) fastWriteField5(buf []byte) (offset int) {
	if x.Location == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 5, x.GetLocation())
	return offset
}

func (x *CreateMerchantReq) fastWriteField6(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetDescription())
	return offset
}

func (x *CreateMerchantReq) fastWriteField7(buf []byte) (offset int) {
	if len(x.Licences) == 0 {
		return offset
	}
	for i := range x.GetLicences() {
		offset += fastpb.WriteString(buf[offset:], 7, x.GetLicences()[i])
	}
	return offset
}

func (x *CreateMerchantReq) fastWriteField8(buf []byte) (offset int) {
	if x.Logo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetLogo())
	return offset
}

func (x *UpdateMerchantReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateMerchantReq) fastWriteField1(buf []byte) (offset int) {
	if x.AdminId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAdminId())
	return offset
}

func (x *UpdateMerchantReq) fastWriteField2(buf []byte) (offset int) {
	if x.Merchant == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetMerchant())
	return offset
}

func (x *GetMerchantInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetMerchantInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetMerchantInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	return offset
}

func (x *GetMerchantInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *GetMerchantInfoResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetMerchantInfoResp) fastWriteField3(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetId())
	return offset
}

func (x *GetMerchantInfoResp) fastWriteField4(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetName())
	return offset
}

func (x *GetMerchantInfoResp) fastWriteField5(buf []byte) (offset int) {
	if x.Logo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetLogo())
	return offset
}

func (x *GetMerchantInfoResp) fastWriteField6(buf []byte) (offset int) {
	if x.Openings == nil {
		return offset
	}
	for i := range x.GetOpenings() {
		offset += fastpb.WriteMessage(buf[offset:], 6, x.GetOpenings()[i])
	}
	return offset
}

func (x *GetMerchantInfoResp) fastWriteField7(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetPhone())
	return offset
}

func (x *GetMerchantInfoResp) fastWriteField8(buf []byte) (offset int) {
	if x.Location == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 8, x.GetLocation())
	return offset
}

func (x *GetMerchantInfoResp) fastWriteField9(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 9, x.GetDescription())
	return offset
}

func (x *GetMerchantInfoResp) fastWriteField10(buf []byte) (offset int) {
	if len(x.Licences) == 0 {
		return offset
	}
	for i := range x.GetLicences() {
		offset += fastpb.WriteString(buf[offset:], 10, x.GetLicences()[i])
	}
	return offset
}

func (x *GetMerchantInfoResp) fastWriteField11(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetCreateTime())
	return offset
}

func (x *GetMerchantInfoResp) fastWriteField12(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetUpdateTime())
	return offset
}

func (x *GetMerchantInfoResp) fastWriteField13(buf []byte) (offset int) {
	if x.DeleteTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 13, x.GetDeleteTime())
	return offset
}

func (x *GetMerchantInfoResp) fastWriteField14(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 14, x.GetStatus())
	return offset
}

func (x *ListMerchantsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ListMerchantsReq) fastWriteField1(buf []byte) (offset int) {
	if x.Paging == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPaging())
	return offset
}

func (x *ListMerchantsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *ListMerchantsResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *ListMerchantsResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *ListMerchantsResp) fastWriteField3(buf []byte) (offset int) {
	if x.Merchants == nil {
		return offset
	}
	for i := range x.GetMerchants() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetMerchants()[i])
	}
	return offset
}

func (x *ListMerchantsResp) fastWriteField4(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetTotal())
	return offset
}

func (x *DeleteMerchantReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DeleteMerchantReq) fastWriteField1(buf []byte) (offset int) {
	if x.AdminId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAdminId())
	return offset
}

func (x *DeleteMerchantReq) fastWriteField2(buf []byte) (offset int) {
	if x.MerchantId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMerchantId())
	return offset
}

func (x *StsSendVerifyCodeReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *StsSendVerifyCodeReq) fastWriteField1(buf []byte) (offset int) {
	if x.AuthId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAuthId())
	return offset
}

func (x *StsSendVerifyCodeReq) fastWriteField2(buf []byte) (offset int) {
	if x.AuthType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAuthType())
	return offset
}

func (x *StsSendVerifyCodeReq) fastWriteField3(buf []byte) (offset int) {
	if x.Purpose == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPurpose())
	return offset
}

func (x *Response) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Response) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *Response) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *ListMerchantsResp_Item) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ListMerchantsResp_Item) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *ListMerchantsResp_Item) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *ListMerchantsResp_Item) fastWriteField3(buf []byte) (offset int) {
	if x.Logo == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLogo())
	return offset
}

func (x *Opening) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *Opening) sizeField1() (n int) {
	if x.StartDay == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStartDay())
	return n
}

func (x *Opening) sizeField2() (n int) {
	if x.EndDay == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetEndDay())
	return n
}

func (x *Opening) sizeField3() (n int) {
	if x.StartTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetStartTime())
	return n
}

func (x *Opening) sizeField4() (n int) {
	if x.EndTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetEndTime())
	return n
}

func (x *Location) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Location) sizeField1() (n int) {
	if x.Text == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetText())
	return n
}

func (x *Location) sizeField2() (n int) {
	if x.Longitude == 0 {
		return n
	}
	n += fastpb.SizeDouble(2, x.GetLongitude())
	return n
}

func (x *Location) sizeField3() (n int) {
	if x.Latitude == 0 {
		return n
	}
	n += fastpb.SizeDouble(3, x.GetLatitude())
	return n
}

func (x *Merchant) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	return n
}

func (x *Merchant) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Merchant) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *Merchant) sizeField3() (n int) {
	if x.Logo == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetLogo())
	return n
}

func (x *Merchant) sizeField4() (n int) {
	if x.Openings == nil {
		return n
	}
	for i := range x.GetOpenings() {
		n += fastpb.SizeMessage(4, x.GetOpenings()[i])
	}
	return n
}

func (x *Merchant) sizeField5() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetPhone())
	return n
}

func (x *Merchant) sizeField6() (n int) {
	if x.Location == nil {
		return n
	}
	n += fastpb.SizeMessage(6, x.GetLocation())
	return n
}

func (x *Merchant) sizeField7() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetDescription())
	return n
}

func (x *Merchant) sizeField8() (n int) {
	if len(x.Licences) == 0 {
		return n
	}
	for i := range x.GetLicences() {
		n += fastpb.SizeString(8, x.GetLicences()[i])
	}
	return n
}

func (x *Merchant) sizeField9() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetPassword())
	return n
}

func (x *Merchant) sizeField10() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetCreateTime())
	return n
}

func (x *Merchant) sizeField11() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetUpdateTime())
	return n
}

func (x *Merchant) sizeField12() (n int) {
	if x.DeleteTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetDeleteTime())
	return n
}

func (x *Merchant) sizeField13() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(13, x.GetStatus())
	return n
}

func (x *Header) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *Header) sizeField1() (n int) {
	if len(x.Rgb) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetRgb()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt64(numTagOrKey, x.GetRgb()[numIdxOrVal])
			return n
		})
	return n
}

func (x *Cover) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Cover) sizeField1() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetType())
	return n
}

func (x *Cover) sizeField2() (n int) {
	if len(x.Imgs) == 0 {
		return n
	}
	for i := range x.GetImgs() {
		n += fastpb.SizeString(2, x.GetImgs()[i])
	}
	return n
}

func (x *Footer) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *Footer) sizeField1() (n int) {
	if len(x.Imgs) == 0 {
		return n
	}
	for i := range x.GetImgs() {
		n += fastpb.SizeString(1, x.GetImgs()[i])
	}
	return n
}

func (x *Setting) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *Setting) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Setting) sizeField2() (n int) {
	if x.MerchantId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMerchantId())
	return n
}

func (x *Setting) sizeField3() (n int) {
	if x.Header == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetHeader())
	return n
}

func (x *Setting) sizeField4() (n int) {
	if x.Cover == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetCover())
	return n
}

func (x *Setting) sizeField5() (n int) {
	if x.Footer == nil {
		return n
	}
	n += fastpb.SizeMessage(5, x.GetFooter())
	return n
}

func (x *Setting) sizeField6() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetCreateTime())
	return n
}

func (x *Setting) sizeField7() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetUpdateTime())
	return n
}

func (x *Setting) sizeField8() (n int) {
	if x.DeleteTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetDeleteTime())
	return n
}

func (x *Setting) sizeField9() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetStatus())
	return n
}

func (x *ActivitySetting) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ActivitySetting) sizeField1() (n int) {
	if x.Max == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetMax())
	return n
}

func (x *ActivitySetting) sizeField2() (n int) {
	if x.Start == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetStart())
	return n
}

func (x *ActivitySetting) sizeField3() (n int) {
	if x.End == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetEnd())
	return n
}

func (x *Activity) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	return n
}

func (x *Activity) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Activity) sizeField2() (n int) {
	if x.MerchantId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMerchantId())
	return n
}

func (x *Activity) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *Activity) sizeField4() (n int) {
	if len(x.Cover) == 0 {
		return n
	}
	for i := range x.GetCover() {
		n += fastpb.SizeString(4, x.GetCover()[i])
	}
	return n
}

func (x *Activity) sizeField5() (n int) {
	if x.Book == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetBook())
	return n
}

func (x *Activity) sizeField6() (n int) {
	if x.BookStart == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetBookStart())
	return n
}

func (x *Activity) sizeField7() (n int) {
	if x.BookEnd == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetBookEnd())
	return n
}

func (x *Activity) sizeField8() (n int) {
	if x.Setting == nil {
		return n
	}
	n += fastpb.SizeMessage(8, x.GetSetting())
	return n
}

func (x *Activity) sizeField9() (n int) {
	if x.Location == nil {
		return n
	}
	n += fastpb.SizeMessage(9, x.GetLocation())
	return n
}

func (x *Activity) sizeField10() (n int) {
	if x.Top == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetTop())
	return n
}

func (x *Activity) sizeField11() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetPhone())
	return n
}

func (x *Activity) sizeField12() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetDescription())
	return n
}

func (x *Activity) sizeField13() (n int) {
	if x.Notice == "" {
		return n
	}
	n += fastpb.SizeString(13, x.GetNotice())
	return n
}

func (x *Activity) sizeField14() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(14, x.GetCreateTime())
	return n
}

func (x *Activity) sizeField15() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(15, x.GetUpdateTime())
	return n
}

func (x *Activity) sizeField16() (n int) {
	if x.DeleteTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(16, x.GetDeleteTime())
	return n
}

func (x *Activity) sizeField17() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(17, x.GetStatus())
	return n
}

func (x *Admin) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *Admin) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Admin) sizeField2() (n int) {
	if x.Auth == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAuth())
	return n
}

func (x *Admin) sizeField3() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPassword())
	return n
}

func (x *Admin) sizeField4() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetCreateTime())
	return n
}

func (x *Admin) sizeField5() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetUpdateTime())
	return n
}

func (x *Admin) sizeField6() (n int) {
	if x.DeleteTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetDeleteTime())
	return n
}

func (x *Admin) sizeField7() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetStatus())
	return n
}

func (x *MerchantLoginReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField4()
	return n
}

func (x *MerchantLoginReq) sizeField1() (n int) {
	if x.AuthId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAuthId())
	return n
}

func (x *MerchantLoginReq) sizeField4() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPassword())
	return n
}

func (x *MerchantLoginResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *MerchantLoginResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *MerchantLoginResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *MerchantLoginResp) sizeField3() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetId())
	return n
}

func (x *MerchantSetPasswordReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *MerchantSetPasswordReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *MerchantSetPasswordReq) sizeField2() (n int) {
	if x.OldPassword == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOldPassword())
	return n
}

func (x *MerchantSetPasswordReq) sizeField3() (n int) {
	if x.NewPassword == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetNewPassword())
	return n
}

func (x *UpdateMerchantInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *UpdateMerchantInfoReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateMerchantInfoReq) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UpdateMerchantInfoReq) sizeField3() (n int) {
	if x.Logo == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetLogo())
	return n
}

func (x *UpdateMerchantInfoReq) sizeField4() (n int) {
	if x.Openings == nil {
		return n
	}
	for i := range x.GetOpenings() {
		n += fastpb.SizeMessage(4, x.GetOpenings()[i])
	}
	return n
}

func (x *UpdateMerchantInfoReq) sizeField5() (n int) {
	if x.Location == nil {
		return n
	}
	n += fastpb.SizeMessage(5, x.GetLocation())
	return n
}

func (x *UpdateMerchantInfoReq) sizeField6() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetDescription())
	return n
}

func (x *UpdateMerchantInfoReq) sizeField7() (n int) {
	if len(x.Licences) == 0 {
		return n
	}
	for i := range x.GetLicences() {
		n += fastpb.SizeString(7, x.GetLicences()[i])
	}
	return n
}

func (x *UpdateSettingReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *UpdateSettingReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateSettingReq) sizeField2() (n int) {
	if x.Header == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetHeader())
	return n
}

func (x *UpdateSettingReq) sizeField3() (n int) {
	if x.Cover == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetCover())
	return n
}

func (x *UpdateSettingReq) sizeField4() (n int) {
	if x.Footer == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetFooter())
	return n
}

func (x *GetMerchantSettingReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetMerchantSettingReq) sizeField1() (n int) {
	if x.MerchantId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMerchantId())
	return n
}

func (x *GetMerchantSettingResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetMerchantSettingResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *GetMerchantSettingResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetMerchantSettingResp) sizeField3() (n int) {
	if x.Setting == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetSetting())
	return n
}

func (x *CreateActivityReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	return n
}

func (x *CreateActivityReq) sizeField1() (n int) {
	if x.MerchantId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMerchantId())
	return n
}

func (x *CreateActivityReq) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *CreateActivityReq) sizeField3() (n int) {
	if x.Book == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetBook())
	return n
}

func (x *CreateActivityReq) sizeField4() (n int) {
	if x.BookStart == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetBookStart())
	return n
}

func (x *CreateActivityReq) sizeField5() (n int) {
	if x.BookEnd == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetBookEnd())
	return n
}

func (x *CreateActivityReq) sizeField6() (n int) {
	if x.Setting == nil {
		return n
	}
	for i := range x.GetSetting() {
		n += fastpb.SizeMessage(6, x.GetSetting()[i])
	}
	return n
}

func (x *CreateActivityReq) sizeField7() (n int) {
	if x.Location == nil {
		return n
	}
	n += fastpb.SizeMessage(7, x.GetLocation())
	return n
}

func (x *CreateActivityReq) sizeField8() (n int) {
	if x.Top == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetTop())
	return n
}

func (x *CreateActivityReq) sizeField9() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetPhone())
	return n
}

func (x *CreateActivityReq) sizeField10() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetDescription())
	return n
}

func (x *CreateActivityReq) sizeField11() (n int) {
	if x.Notice == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetNotice())
	return n
}

func (x *CreateActivityReq) sizeField12() (n int) {
	if len(x.Cover) == 0 {
		return n
	}
	for i := range x.GetCover() {
		n += fastpb.SizeString(12, x.GetCover()[i])
	}
	return n
}

func (x *TopActivityReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *TopActivityReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *DeleteActivityReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteActivityReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateActivityReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateActivityReq) sizeField1() (n int) {
	if x.MerchantId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMerchantId())
	return n
}

func (x *UpdateActivityReq) sizeField2() (n int) {
	if x.Activity == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetActivity())
	return n
}

func (x *ListActivitiesReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListActivitiesReq) sizeField1() (n int) {
	if x.Paging == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPaging())
	return n
}

func (x *ListActivitiesReq) sizeField2() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetType())
	return n
}

func (x *ListActivitiesResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *ListActivitiesResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *ListActivitiesResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *ListActivitiesResp) sizeField3() (n int) {
	if x.Activities == nil {
		return n
	}
	for i := range x.GetActivities() {
		n += fastpb.SizeMessage(3, x.GetActivities()[i])
	}
	return n
}

func (x *ListActivitiesResp) sizeField4() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetTotal())
	return n
}

func (x *GetActivityReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetActivityReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetActivityResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetActivityResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *GetActivityResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetActivityResp) sizeField3() (n int) {
	if x.Activity == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetActivity())
	return n
}

func (x *AdminLoginReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *AdminLoginReq) sizeField1() (n int) {
	if x.AuthId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAuthId())
	return n
}

func (x *AdminLoginReq) sizeField2() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPassword())
	return n
}

func (x *AdminLoginResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *AdminLoginResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *AdminLoginResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *AdminLoginResp) sizeField3() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUserId())
	return n
}

func (x *AdminSetPasswordReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *AdminSetPasswordReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *AdminSetPasswordReq) sizeField2() (n int) {
	if x.OldPassword == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOldPassword())
	return n
}

func (x *AdminSetPasswordReq) sizeField3() (n int) {
	if x.NewPassword == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetNewPassword())
	return n
}

func (x *CreateMerchantReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *CreateMerchantReq) sizeField1() (n int) {
	if x.AdminId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAdminId())
	return n
}

func (x *CreateMerchantReq) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *CreateMerchantReq) sizeField3() (n int) {
	if x.Openings == nil {
		return n
	}
	for i := range x.GetOpenings() {
		n += fastpb.SizeMessage(3, x.GetOpenings()[i])
	}
	return n
}

func (x *CreateMerchantReq) sizeField4() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPhone())
	return n
}

func (x *CreateMerchantReq) sizeField5() (n int) {
	if x.Location == nil {
		return n
	}
	n += fastpb.SizeMessage(5, x.GetLocation())
	return n
}

func (x *CreateMerchantReq) sizeField6() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetDescription())
	return n
}

func (x *CreateMerchantReq) sizeField7() (n int) {
	if len(x.Licences) == 0 {
		return n
	}
	for i := range x.GetLicences() {
		n += fastpb.SizeString(7, x.GetLicences()[i])
	}
	return n
}

func (x *CreateMerchantReq) sizeField8() (n int) {
	if x.Logo == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetLogo())
	return n
}

func (x *UpdateMerchantReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateMerchantReq) sizeField1() (n int) {
	if x.AdminId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAdminId())
	return n
}

func (x *UpdateMerchantReq) sizeField2() (n int) {
	if x.Merchant == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetMerchant())
	return n
}

func (x *GetMerchantInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetMerchantInfoReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *GetMerchantInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	return n
}

func (x *GetMerchantInfoResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *GetMerchantInfoResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetMerchantInfoResp) sizeField3() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetId())
	return n
}

func (x *GetMerchantInfoResp) sizeField4() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetName())
	return n
}

func (x *GetMerchantInfoResp) sizeField5() (n int) {
	if x.Logo == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetLogo())
	return n
}

func (x *GetMerchantInfoResp) sizeField6() (n int) {
	if x.Openings == nil {
		return n
	}
	for i := range x.GetOpenings() {
		n += fastpb.SizeMessage(6, x.GetOpenings()[i])
	}
	return n
}

func (x *GetMerchantInfoResp) sizeField7() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetPhone())
	return n
}

func (x *GetMerchantInfoResp) sizeField8() (n int) {
	if x.Location == nil {
		return n
	}
	n += fastpb.SizeMessage(8, x.GetLocation())
	return n
}

func (x *GetMerchantInfoResp) sizeField9() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(9, x.GetDescription())
	return n
}

func (x *GetMerchantInfoResp) sizeField10() (n int) {
	if len(x.Licences) == 0 {
		return n
	}
	for i := range x.GetLicences() {
		n += fastpb.SizeString(10, x.GetLicences()[i])
	}
	return n
}

func (x *GetMerchantInfoResp) sizeField11() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetCreateTime())
	return n
}

func (x *GetMerchantInfoResp) sizeField12() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetUpdateTime())
	return n
}

func (x *GetMerchantInfoResp) sizeField13() (n int) {
	if x.DeleteTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(13, x.GetDeleteTime())
	return n
}

func (x *GetMerchantInfoResp) sizeField14() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(14, x.GetStatus())
	return n
}

func (x *ListMerchantsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ListMerchantsReq) sizeField1() (n int) {
	if x.Paging == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPaging())
	return n
}

func (x *ListMerchantsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *ListMerchantsResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *ListMerchantsResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *ListMerchantsResp) sizeField3() (n int) {
	if x.Merchants == nil {
		return n
	}
	for i := range x.GetMerchants() {
		n += fastpb.SizeMessage(3, x.GetMerchants()[i])
	}
	return n
}

func (x *ListMerchantsResp) sizeField4() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetTotal())
	return n
}

func (x *DeleteMerchantReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DeleteMerchantReq) sizeField1() (n int) {
	if x.AdminId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAdminId())
	return n
}

func (x *DeleteMerchantReq) sizeField2() (n int) {
	if x.MerchantId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMerchantId())
	return n
}

func (x *StsSendVerifyCodeReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *StsSendVerifyCodeReq) sizeField1() (n int) {
	if x.AuthId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAuthId())
	return n
}

func (x *StsSendVerifyCodeReq) sizeField2() (n int) {
	if x.AuthType == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAuthType())
	return n
}

func (x *StsSendVerifyCodeReq) sizeField3() (n int) {
	if x.Purpose == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPurpose())
	return n
}

func (x *Response) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Response) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *Response) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *ListMerchantsResp_Item) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ListMerchantsResp_Item) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *ListMerchantsResp_Item) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *ListMerchantsResp_Item) sizeField3() (n int) {
	if x.Logo == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetLogo())
	return n
}

var fieldIDToName_Opening = map[int32]string{
	1: "StartDay",
	2: "EndDay",
	3: "StartTime",
	4: "EndTime",
}

var fieldIDToName_Location = map[int32]string{
	1: "Text",
	2: "Longitude",
	3: "Latitude",
}

var fieldIDToName_Merchant = map[int32]string{
	1:  "Id",
	2:  "Name",
	3:  "Logo",
	4:  "Openings",
	5:  "Phone",
	6:  "Location",
	7:  "Description",
	8:  "Licences",
	9:  "Password",
	10: "CreateTime",
	11: "UpdateTime",
	12: "DeleteTime",
	13: "Status",
}

var fieldIDToName_Header = map[int32]string{
	1: "Rgb",
}

var fieldIDToName_Cover = map[int32]string{
	1: "Type",
	2: "Imgs",
}

var fieldIDToName_Footer = map[int32]string{
	1: "Imgs",
}

var fieldIDToName_Setting = map[int32]string{
	1: "Id",
	2: "MerchantId",
	3: "Header",
	4: "Cover",
	5: "Footer",
	6: "CreateTime",
	7: "UpdateTime",
	8: "DeleteTime",
	9: "Status",
}

var fieldIDToName_ActivitySetting = map[int32]string{
	1: "Max",
	2: "Start",
	3: "End",
}

var fieldIDToName_Activity = map[int32]string{
	1:  "Id",
	2:  "MerchantId",
	3:  "Name",
	4:  "Cover",
	5:  "Book",
	6:  "BookStart",
	7:  "BookEnd",
	8:  "Setting",
	9:  "Location",
	10: "Top",
	11: "Phone",
	12: "Description",
	13: "Notice",
	14: "CreateTime",
	15: "UpdateTime",
	16: "DeleteTime",
	17: "Status",
}

var fieldIDToName_Admin = map[int32]string{
	1: "Id",
	2: "Auth",
	3: "Password",
	4: "CreateTime",
	5: "UpdateTime",
	6: "DeleteTime",
	7: "Status",
}

var fieldIDToName_MerchantLoginReq = map[int32]string{
	1: "AuthId",
	4: "Password",
}

var fieldIDToName_MerchantLoginResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Id",
}

var fieldIDToName_MerchantSetPasswordReq = map[int32]string{
	1: "Id",
	2: "OldPassword",
	3: "NewPassword",
}

var fieldIDToName_UpdateMerchantInfoReq = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Logo",
	4: "Openings",
	5: "Location",
	6: "Description",
	7: "Licences",
}

var fieldIDToName_UpdateSettingReq = map[int32]string{
	1: "Id",
	2: "Header",
	3: "Cover",
	4: "Footer",
}

var fieldIDToName_GetMerchantSettingReq = map[int32]string{
	1: "MerchantId",
}

var fieldIDToName_GetMerchantSettingResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Setting",
}

var fieldIDToName_CreateActivityReq = map[int32]string{
	1:  "MerchantId",
	2:  "Name",
	3:  "Book",
	4:  "BookStart",
	5:  "BookEnd",
	6:  "Setting",
	7:  "Location",
	8:  "Top",
	9:  "Phone",
	10: "Description",
	11: "Notice",
	12: "Cover",
}

var fieldIDToName_TopActivityReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_DeleteActivityReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_UpdateActivityReq = map[int32]string{
	1: "MerchantId",
	2: "Activity",
}

var fieldIDToName_ListActivitiesReq = map[int32]string{
	1: "Paging",
	2: "Type",
}

var fieldIDToName_ListActivitiesResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Activities",
	4: "Total",
}

var fieldIDToName_GetActivityReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetActivityResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Activity",
}

var fieldIDToName_AdminLoginReq = map[int32]string{
	1: "AuthId",
	2: "Password",
}

var fieldIDToName_AdminLoginResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "UserId",
}

var fieldIDToName_AdminSetPasswordReq = map[int32]string{
	1: "Id",
	2: "OldPassword",
	3: "NewPassword",
}

var fieldIDToName_CreateMerchantReq = map[int32]string{
	1: "AdminId",
	2: "Name",
	3: "Openings",
	4: "Phone",
	5: "Location",
	6: "Description",
	7: "Licences",
	8: "Logo",
}

var fieldIDToName_UpdateMerchantReq = map[int32]string{
	1: "AdminId",
	2: "Merchant",
}

var fieldIDToName_GetMerchantInfoReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_GetMerchantInfoResp = map[int32]string{
	1:  "Code",
	2:  "Msg",
	3:  "Id",
	4:  "Name",
	5:  "Logo",
	6:  "Openings",
	7:  "Phone",
	8:  "Location",
	9:  "Description",
	10: "Licences",
	11: "CreateTime",
	12: "UpdateTime",
	13: "DeleteTime",
	14: "Status",
}

var fieldIDToName_ListMerchantsReq = map[int32]string{
	1: "Paging",
}

var fieldIDToName_ListMerchantsResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Merchants",
	4: "Total",
}

var fieldIDToName_DeleteMerchantReq = map[int32]string{
	1: "AdminId",
	2: "MerchantId",
}

var fieldIDToName_StsSendVerifyCodeReq = map[int32]string{
	1: "AuthId",
	2: "AuthType",
	3: "Purpose",
}

var fieldIDToName_Response = map[int32]string{
	1: "Code",
	2: "Msg",
}

var fieldIDToName_ListMerchantsResp_Item = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Logo",
}

var _ = basic.File_basic_paging_proto
