// Code generated by Kitex v0.12.2. DO NOT EDIT.

package systemservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	system "github.com/xh-polaris/ActiManage-IDL-gen/kitex_gen/system"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"MerchantLogin": kitex.NewMethodInfo(
		merchantLoginHandler,
		newMerchantLoginArgs,
		newMerchantLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantSetPassword": kitex.NewMethodInfo(
		merchantSetPasswordHandler,
		newMerchantSetPasswordArgs,
		newMerchantSetPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateMerchantSetting": kitex.NewMethodInfo(
		updateMerchantSettingHandler,
		newUpdateMerchantSettingArgs,
		newUpdateMerchantSettingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetMerchantSetting": kitex.NewMethodInfo(
		getMerchantSettingHandler,
		newGetMerchantSettingArgs,
		newGetMerchantSettingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateMerchantInfo": kitex.NewMethodInfo(
		updateMerchantInfoHandler,
		newUpdateMerchantInfoArgs,
		newUpdateMerchantInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetMerchantInfoByUri": kitex.NewMethodInfo(
		getMerchantInfoByUriHandler,
		newGetMerchantInfoByUriArgs,
		newGetMerchantInfoByUriResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetAd": kitex.NewMethodInfo(
		getAdHandler,
		newGetAdArgs,
		newGetAdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SetAd": kitex.NewMethodInfo(
		setAdHandler,
		newSetAdArgs,
		newSetAdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateActivity": kitex.NewMethodInfo(
		createActivityHandler,
		newCreateActivityArgs,
		newCreateActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"TopActivity": kitex.NewMethodInfo(
		topActivityHandler,
		newTopActivityArgs,
		newTopActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteActivity": kitex.NewMethodInfo(
		deleteActivityHandler,
		newDeleteActivityArgs,
		newDeleteActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateActivity": kitex.NewMethodInfo(
		updateActivityHandler,
		newUpdateActivityArgs,
		newUpdateActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListActivities": kitex.NewMethodInfo(
		listActivitiesHandler,
		newListActivitiesArgs,
		newListActivitiesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetActivity": kitex.NewMethodInfo(
		getActivityHandler,
		newGetActivityArgs,
		newGetActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"AdminLogin": kitex.NewMethodInfo(
		adminLoginHandler,
		newAdminLoginArgs,
		newAdminLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"AdminSetPassword": kitex.NewMethodInfo(
		adminSetPasswordHandler,
		newAdminSetPasswordArgs,
		newAdminSetPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateMerchant": kitex.NewMethodInfo(
		createMerchantHandler,
		newCreateMerchantArgs,
		newCreateMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateMerchant": kitex.NewMethodInfo(
		updateMerchantHandler,
		newUpdateMerchantArgs,
		newUpdateMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteMerchant": kitex.NewMethodInfo(
		deleteMerchantHandler,
		newDeleteMerchantArgs,
		newDeleteMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetMerchantInfo": kitex.NewMethodInfo(
		getMerchantInfoHandler,
		newGetMerchantInfoArgs,
		newGetMerchantInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListMerchants": kitex.NewMethodInfo(
		listMerchantsHandler,
		newListMerchantsArgs,
		newListMerchantsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetMerchantTotalData": kitex.NewMethodInfo(
		getMerchantTotalDataHandler,
		newGetMerchantTotalDataArgs,
		newGetMerchantTotalDataResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListMerchantByMerchantId": kitex.NewMethodInfo(
		listMerchantByMerchantIdHandler,
		newListMerchantByMerchantIdArgs,
		newListMerchantByMerchantIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListMerchantByActivityNumber": kitex.NewMethodInfo(
		listMerchantByActivityNumberHandler,
		newListMerchantByActivityNumberArgs,
		newListMerchantByActivityNumberResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListActivityByActivityId": kitex.NewMethodInfo(
		listActivityByActivityIdHandler,
		newListActivityByActivityIdArgs,
		newListActivityByActivityIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"StsSendVerifyCode": kitex.NewMethodInfo(
		stsSendVerifyCodeHandler,
		newStsSendVerifyCodeArgs,
		newStsSendVerifyCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"StsCheckVerifyCode": kitex.NewMethodInfo(
		stsCheckVerifyCodeHandler,
		newStsCheckVerifyCodeArgs,
		newStsCheckVerifyCodeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	systemServiceServiceInfo                = NewServiceInfo()
	systemServiceServiceInfoForClient       = NewServiceInfoForClient()
	systemServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return systemServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return systemServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return systemServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SystemService"
	handlerType := (*system.SystemService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "system",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.2",
		Extra:           extra,
	}
	return svcInfo
}

func merchantLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.MerchantLoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).MerchantLogin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantLoginArgs:
		success, err := handler.(system.SystemService).MerchantLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantLoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantLoginArgs() interface{} {
	return &MerchantLoginArgs{}
}

func newMerchantLoginResult() interface{} {
	return &MerchantLoginResult{}
}

type MerchantLoginArgs struct {
	Req *system.MerchantLoginReq
}

func (p *MerchantLoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.MerchantLoginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantLoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantLoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantLoginArgs) Unmarshal(in []byte) error {
	msg := new(system.MerchantLoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantLoginArgs_Req_DEFAULT *system.MerchantLoginReq

func (p *MerchantLoginArgs) GetReq() *system.MerchantLoginReq {
	if !p.IsSetReq() {
		return MerchantLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantLoginResult struct {
	Success *system.MerchantLoginResp
}

var MerchantLoginResult_Success_DEFAULT *system.MerchantLoginResp

func (p *MerchantLoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.MerchantLoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantLoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantLoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantLoginResult) Unmarshal(in []byte) error {
	msg := new(system.MerchantLoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantLoginResult) GetSuccess() *system.MerchantLoginResp {
	if !p.IsSetSuccess() {
		return MerchantLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.MerchantLoginResp)
}

func (p *MerchantLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantLoginResult) GetResult() interface{} {
	return p.Success
}

func merchantSetPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.MerchantSetPasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).MerchantSetPassword(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantSetPasswordArgs:
		success, err := handler.(system.SystemService).MerchantSetPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantSetPasswordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantSetPasswordArgs() interface{} {
	return &MerchantSetPasswordArgs{}
}

func newMerchantSetPasswordResult() interface{} {
	return &MerchantSetPasswordResult{}
}

type MerchantSetPasswordArgs struct {
	Req *system.MerchantSetPasswordReq
}

func (p *MerchantSetPasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.MerchantSetPasswordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantSetPasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantSetPasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantSetPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantSetPasswordArgs) Unmarshal(in []byte) error {
	msg := new(system.MerchantSetPasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantSetPasswordArgs_Req_DEFAULT *system.MerchantSetPasswordReq

func (p *MerchantSetPasswordArgs) GetReq() *system.MerchantSetPasswordReq {
	if !p.IsSetReq() {
		return MerchantSetPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantSetPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantSetPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantSetPasswordResult struct {
	Success *system.Response
}

var MerchantSetPasswordResult_Success_DEFAULT *system.Response

func (p *MerchantSetPasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantSetPasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantSetPasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantSetPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantSetPasswordResult) Unmarshal(in []byte) error {
	msg := new(system.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantSetPasswordResult) GetSuccess() *system.Response {
	if !p.IsSetSuccess() {
		return MerchantSetPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantSetPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.Response)
}

func (p *MerchantSetPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantSetPasswordResult) GetResult() interface{} {
	return p.Success
}

func updateMerchantSettingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.UpdateSettingReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).UpdateMerchantSetting(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateMerchantSettingArgs:
		success, err := handler.(system.SystemService).UpdateMerchantSetting(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateMerchantSettingResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateMerchantSettingArgs() interface{} {
	return &UpdateMerchantSettingArgs{}
}

func newUpdateMerchantSettingResult() interface{} {
	return &UpdateMerchantSettingResult{}
}

type UpdateMerchantSettingArgs struct {
	Req *system.UpdateSettingReq
}

func (p *UpdateMerchantSettingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.UpdateSettingReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateMerchantSettingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateMerchantSettingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateMerchantSettingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateMerchantSettingArgs) Unmarshal(in []byte) error {
	msg := new(system.UpdateSettingReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateMerchantSettingArgs_Req_DEFAULT *system.UpdateSettingReq

func (p *UpdateMerchantSettingArgs) GetReq() *system.UpdateSettingReq {
	if !p.IsSetReq() {
		return UpdateMerchantSettingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateMerchantSettingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateMerchantSettingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateMerchantSettingResult struct {
	Success *system.Response
}

var UpdateMerchantSettingResult_Success_DEFAULT *system.Response

func (p *UpdateMerchantSettingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateMerchantSettingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateMerchantSettingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateMerchantSettingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateMerchantSettingResult) Unmarshal(in []byte) error {
	msg := new(system.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateMerchantSettingResult) GetSuccess() *system.Response {
	if !p.IsSetSuccess() {
		return UpdateMerchantSettingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateMerchantSettingResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.Response)
}

func (p *UpdateMerchantSettingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateMerchantSettingResult) GetResult() interface{} {
	return p.Success
}

func getMerchantSettingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.GetMerchantSettingReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).GetMerchantSetting(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetMerchantSettingArgs:
		success, err := handler.(system.SystemService).GetMerchantSetting(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMerchantSettingResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetMerchantSettingArgs() interface{} {
	return &GetMerchantSettingArgs{}
}

func newGetMerchantSettingResult() interface{} {
	return &GetMerchantSettingResult{}
}

type GetMerchantSettingArgs struct {
	Req *system.GetMerchantSettingReq
}

func (p *GetMerchantSettingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.GetMerchantSettingReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMerchantSettingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMerchantSettingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMerchantSettingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMerchantSettingArgs) Unmarshal(in []byte) error {
	msg := new(system.GetMerchantSettingReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMerchantSettingArgs_Req_DEFAULT *system.GetMerchantSettingReq

func (p *GetMerchantSettingArgs) GetReq() *system.GetMerchantSettingReq {
	if !p.IsSetReq() {
		return GetMerchantSettingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMerchantSettingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMerchantSettingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMerchantSettingResult struct {
	Success *system.GetMerchantSettingResp
}

var GetMerchantSettingResult_Success_DEFAULT *system.GetMerchantSettingResp

func (p *GetMerchantSettingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.GetMerchantSettingResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMerchantSettingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMerchantSettingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMerchantSettingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMerchantSettingResult) Unmarshal(in []byte) error {
	msg := new(system.GetMerchantSettingResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMerchantSettingResult) GetSuccess() *system.GetMerchantSettingResp {
	if !p.IsSetSuccess() {
		return GetMerchantSettingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMerchantSettingResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.GetMerchantSettingResp)
}

func (p *GetMerchantSettingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMerchantSettingResult) GetResult() interface{} {
	return p.Success
}

func updateMerchantInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.UpdateMerchantInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).UpdateMerchantInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateMerchantInfoArgs:
		success, err := handler.(system.SystemService).UpdateMerchantInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateMerchantInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateMerchantInfoArgs() interface{} {
	return &UpdateMerchantInfoArgs{}
}

func newUpdateMerchantInfoResult() interface{} {
	return &UpdateMerchantInfoResult{}
}

type UpdateMerchantInfoArgs struct {
	Req *system.UpdateMerchantInfoReq
}

func (p *UpdateMerchantInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.UpdateMerchantInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateMerchantInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateMerchantInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateMerchantInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateMerchantInfoArgs) Unmarshal(in []byte) error {
	msg := new(system.UpdateMerchantInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateMerchantInfoArgs_Req_DEFAULT *system.UpdateMerchantInfoReq

func (p *UpdateMerchantInfoArgs) GetReq() *system.UpdateMerchantInfoReq {
	if !p.IsSetReq() {
		return UpdateMerchantInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateMerchantInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateMerchantInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateMerchantInfoResult struct {
	Success *system.Response
}

var UpdateMerchantInfoResult_Success_DEFAULT *system.Response

func (p *UpdateMerchantInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateMerchantInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateMerchantInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateMerchantInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateMerchantInfoResult) Unmarshal(in []byte) error {
	msg := new(system.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateMerchantInfoResult) GetSuccess() *system.Response {
	if !p.IsSetSuccess() {
		return UpdateMerchantInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateMerchantInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.Response)
}

func (p *UpdateMerchantInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateMerchantInfoResult) GetResult() interface{} {
	return p.Success
}

func getMerchantInfoByUriHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.GetMerchantInfoByUriReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).GetMerchantInfoByUri(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetMerchantInfoByUriArgs:
		success, err := handler.(system.SystemService).GetMerchantInfoByUri(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMerchantInfoByUriResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetMerchantInfoByUriArgs() interface{} {
	return &GetMerchantInfoByUriArgs{}
}

func newGetMerchantInfoByUriResult() interface{} {
	return &GetMerchantInfoByUriResult{}
}

type GetMerchantInfoByUriArgs struct {
	Req *system.GetMerchantInfoByUriReq
}

func (p *GetMerchantInfoByUriArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.GetMerchantInfoByUriReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMerchantInfoByUriArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMerchantInfoByUriArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMerchantInfoByUriArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMerchantInfoByUriArgs) Unmarshal(in []byte) error {
	msg := new(system.GetMerchantInfoByUriReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMerchantInfoByUriArgs_Req_DEFAULT *system.GetMerchantInfoByUriReq

func (p *GetMerchantInfoByUriArgs) GetReq() *system.GetMerchantInfoByUriReq {
	if !p.IsSetReq() {
		return GetMerchantInfoByUriArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMerchantInfoByUriArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMerchantInfoByUriArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMerchantInfoByUriResult struct {
	Success *system.GetMerchantInfoByUriResp
}

var GetMerchantInfoByUriResult_Success_DEFAULT *system.GetMerchantInfoByUriResp

func (p *GetMerchantInfoByUriResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.GetMerchantInfoByUriResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMerchantInfoByUriResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMerchantInfoByUriResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMerchantInfoByUriResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMerchantInfoByUriResult) Unmarshal(in []byte) error {
	msg := new(system.GetMerchantInfoByUriResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMerchantInfoByUriResult) GetSuccess() *system.GetMerchantInfoByUriResp {
	if !p.IsSetSuccess() {
		return GetMerchantInfoByUriResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMerchantInfoByUriResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.GetMerchantInfoByUriResp)
}

func (p *GetMerchantInfoByUriResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMerchantInfoByUriResult) GetResult() interface{} {
	return p.Success
}

func getAdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.GetAdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).GetAd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetAdArgs:
		success, err := handler.(system.SystemService).GetAd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAdResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetAdArgs() interface{} {
	return &GetAdArgs{}
}

func newGetAdResult() interface{} {
	return &GetAdResult{}
}

type GetAdArgs struct {
	Req *system.GetAdReq
}

func (p *GetAdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.GetAdReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetAdArgs) Unmarshal(in []byte) error {
	msg := new(system.GetAdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAdArgs_Req_DEFAULT *system.GetAdReq

func (p *GetAdArgs) GetReq() *system.GetAdReq {
	if !p.IsSetReq() {
		return GetAdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAdResult struct {
	Success *system.GetAdResp
}

var GetAdResult_Success_DEFAULT *system.GetAdResp

func (p *GetAdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.GetAdResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetAdResult) Unmarshal(in []byte) error {
	msg := new(system.GetAdResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAdResult) GetSuccess() *system.GetAdResp {
	if !p.IsSetSuccess() {
		return GetAdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAdResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.GetAdResp)
}

func (p *GetAdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAdResult) GetResult() interface{} {
	return p.Success
}

func setAdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.SetAdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).SetAd(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SetAdArgs:
		success, err := handler.(system.SystemService).SetAd(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SetAdResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSetAdArgs() interface{} {
	return &SetAdArgs{}
}

func newSetAdResult() interface{} {
	return &SetAdResult{}
}

type SetAdArgs struct {
	Req *system.SetAdReq
}

func (p *SetAdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.SetAdReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SetAdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SetAdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SetAdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SetAdArgs) Unmarshal(in []byte) error {
	msg := new(system.SetAdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SetAdArgs_Req_DEFAULT *system.SetAdReq

func (p *SetAdArgs) GetReq() *system.SetAdReq {
	if !p.IsSetReq() {
		return SetAdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SetAdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetAdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SetAdResult struct {
	Success *system.Response
}

var SetAdResult_Success_DEFAULT *system.Response

func (p *SetAdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SetAdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SetAdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SetAdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SetAdResult) Unmarshal(in []byte) error {
	msg := new(system.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SetAdResult) GetSuccess() *system.Response {
	if !p.IsSetSuccess() {
		return SetAdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SetAdResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.Response)
}

func (p *SetAdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetAdResult) GetResult() interface{} {
	return p.Success
}

func createActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.CreateActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).CreateActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateActivityArgs:
		success, err := handler.(system.SystemService).CreateActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateActivityArgs() interface{} {
	return &CreateActivityArgs{}
}

func newCreateActivityResult() interface{} {
	return &CreateActivityResult{}
}

type CreateActivityArgs struct {
	Req *system.CreateActivityReq
}

func (p *CreateActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.CreateActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateActivityArgs) Unmarshal(in []byte) error {
	msg := new(system.CreateActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateActivityArgs_Req_DEFAULT *system.CreateActivityReq

func (p *CreateActivityArgs) GetReq() *system.CreateActivityReq {
	if !p.IsSetReq() {
		return CreateActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateActivityResult struct {
	Success *system.Response
}

var CreateActivityResult_Success_DEFAULT *system.Response

func (p *CreateActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateActivityResult) Unmarshal(in []byte) error {
	msg := new(system.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateActivityResult) GetSuccess() *system.Response {
	if !p.IsSetSuccess() {
		return CreateActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.Response)
}

func (p *CreateActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateActivityResult) GetResult() interface{} {
	return p.Success
}

func topActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.TopActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).TopActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *TopActivityArgs:
		success, err := handler.(system.SystemService).TopActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*TopActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newTopActivityArgs() interface{} {
	return &TopActivityArgs{}
}

func newTopActivityResult() interface{} {
	return &TopActivityResult{}
}

type TopActivityArgs struct {
	Req *system.TopActivityReq
}

func (p *TopActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.TopActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *TopActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *TopActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *TopActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *TopActivityArgs) Unmarshal(in []byte) error {
	msg := new(system.TopActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var TopActivityArgs_Req_DEFAULT *system.TopActivityReq

func (p *TopActivityArgs) GetReq() *system.TopActivityReq {
	if !p.IsSetReq() {
		return TopActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *TopActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TopActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TopActivityResult struct {
	Success *system.Response
}

var TopActivityResult_Success_DEFAULT *system.Response

func (p *TopActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *TopActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *TopActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *TopActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *TopActivityResult) Unmarshal(in []byte) error {
	msg := new(system.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *TopActivityResult) GetSuccess() *system.Response {
	if !p.IsSetSuccess() {
		return TopActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *TopActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.Response)
}

func (p *TopActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TopActivityResult) GetResult() interface{} {
	return p.Success
}

func deleteActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.DeleteActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).DeleteActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteActivityArgs:
		success, err := handler.(system.SystemService).DeleteActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteActivityArgs() interface{} {
	return &DeleteActivityArgs{}
}

func newDeleteActivityResult() interface{} {
	return &DeleteActivityResult{}
}

type DeleteActivityArgs struct {
	Req *system.DeleteActivityReq
}

func (p *DeleteActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.DeleteActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteActivityArgs) Unmarshal(in []byte) error {
	msg := new(system.DeleteActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteActivityArgs_Req_DEFAULT *system.DeleteActivityReq

func (p *DeleteActivityArgs) GetReq() *system.DeleteActivityReq {
	if !p.IsSetReq() {
		return DeleteActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteActivityResult struct {
	Success *system.Response
}

var DeleteActivityResult_Success_DEFAULT *system.Response

func (p *DeleteActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteActivityResult) Unmarshal(in []byte) error {
	msg := new(system.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteActivityResult) GetSuccess() *system.Response {
	if !p.IsSetSuccess() {
		return DeleteActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.Response)
}

func (p *DeleteActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteActivityResult) GetResult() interface{} {
	return p.Success
}

func updateActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.UpdateActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).UpdateActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateActivityArgs:
		success, err := handler.(system.SystemService).UpdateActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateActivityArgs() interface{} {
	return &UpdateActivityArgs{}
}

func newUpdateActivityResult() interface{} {
	return &UpdateActivityResult{}
}

type UpdateActivityArgs struct {
	Req *system.UpdateActivityReq
}

func (p *UpdateActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.UpdateActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateActivityArgs) Unmarshal(in []byte) error {
	msg := new(system.UpdateActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateActivityArgs_Req_DEFAULT *system.UpdateActivityReq

func (p *UpdateActivityArgs) GetReq() *system.UpdateActivityReq {
	if !p.IsSetReq() {
		return UpdateActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateActivityResult struct {
	Success *system.Response
}

var UpdateActivityResult_Success_DEFAULT *system.Response

func (p *UpdateActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateActivityResult) Unmarshal(in []byte) error {
	msg := new(system.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateActivityResult) GetSuccess() *system.Response {
	if !p.IsSetSuccess() {
		return UpdateActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.Response)
}

func (p *UpdateActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateActivityResult) GetResult() interface{} {
	return p.Success
}

func listActivitiesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.ListActivitiesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).ListActivities(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListActivitiesArgs:
		success, err := handler.(system.SystemService).ListActivities(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListActivitiesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListActivitiesArgs() interface{} {
	return &ListActivitiesArgs{}
}

func newListActivitiesResult() interface{} {
	return &ListActivitiesResult{}
}

type ListActivitiesArgs struct {
	Req *system.ListActivitiesReq
}

func (p *ListActivitiesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.ListActivitiesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListActivitiesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListActivitiesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListActivitiesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListActivitiesArgs) Unmarshal(in []byte) error {
	msg := new(system.ListActivitiesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListActivitiesArgs_Req_DEFAULT *system.ListActivitiesReq

func (p *ListActivitiesArgs) GetReq() *system.ListActivitiesReq {
	if !p.IsSetReq() {
		return ListActivitiesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListActivitiesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListActivitiesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListActivitiesResult struct {
	Success *system.ListActivitiesResp
}

var ListActivitiesResult_Success_DEFAULT *system.ListActivitiesResp

func (p *ListActivitiesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.ListActivitiesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListActivitiesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListActivitiesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListActivitiesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListActivitiesResult) Unmarshal(in []byte) error {
	msg := new(system.ListActivitiesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListActivitiesResult) GetSuccess() *system.ListActivitiesResp {
	if !p.IsSetSuccess() {
		return ListActivitiesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListActivitiesResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.ListActivitiesResp)
}

func (p *ListActivitiesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListActivitiesResult) GetResult() interface{} {
	return p.Success
}

func getActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.GetActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).GetActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetActivityArgs:
		success, err := handler.(system.SystemService).GetActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetActivityArgs() interface{} {
	return &GetActivityArgs{}
}

func newGetActivityResult() interface{} {
	return &GetActivityResult{}
}

type GetActivityArgs struct {
	Req *system.GetActivityReq
}

func (p *GetActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.GetActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetActivityArgs) Unmarshal(in []byte) error {
	msg := new(system.GetActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetActivityArgs_Req_DEFAULT *system.GetActivityReq

func (p *GetActivityArgs) GetReq() *system.GetActivityReq {
	if !p.IsSetReq() {
		return GetActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetActivityResult struct {
	Success *system.GetActivityResp
}

var GetActivityResult_Success_DEFAULT *system.GetActivityResp

func (p *GetActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.GetActivityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetActivityResult) Unmarshal(in []byte) error {
	msg := new(system.GetActivityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetActivityResult) GetSuccess() *system.GetActivityResp {
	if !p.IsSetSuccess() {
		return GetActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.GetActivityResp)
}

func (p *GetActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetActivityResult) GetResult() interface{} {
	return p.Success
}

func adminLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.AdminLoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).AdminLogin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AdminLoginArgs:
		success, err := handler.(system.SystemService).AdminLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AdminLoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAdminLoginArgs() interface{} {
	return &AdminLoginArgs{}
}

func newAdminLoginResult() interface{} {
	return &AdminLoginResult{}
}

type AdminLoginArgs struct {
	Req *system.AdminLoginReq
}

func (p *AdminLoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.AdminLoginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AdminLoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AdminLoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AdminLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AdminLoginArgs) Unmarshal(in []byte) error {
	msg := new(system.AdminLoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AdminLoginArgs_Req_DEFAULT *system.AdminLoginReq

func (p *AdminLoginArgs) GetReq() *system.AdminLoginReq {
	if !p.IsSetReq() {
		return AdminLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AdminLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AdminLoginResult struct {
	Success *system.AdminLoginResp
}

var AdminLoginResult_Success_DEFAULT *system.AdminLoginResp

func (p *AdminLoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.AdminLoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AdminLoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AdminLoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AdminLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AdminLoginResult) Unmarshal(in []byte) error {
	msg := new(system.AdminLoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AdminLoginResult) GetSuccess() *system.AdminLoginResp {
	if !p.IsSetSuccess() {
		return AdminLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdminLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.AdminLoginResp)
}

func (p *AdminLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminLoginResult) GetResult() interface{} {
	return p.Success
}

func adminSetPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.AdminSetPasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).AdminSetPassword(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AdminSetPasswordArgs:
		success, err := handler.(system.SystemService).AdminSetPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AdminSetPasswordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAdminSetPasswordArgs() interface{} {
	return &AdminSetPasswordArgs{}
}

func newAdminSetPasswordResult() interface{} {
	return &AdminSetPasswordResult{}
}

type AdminSetPasswordArgs struct {
	Req *system.AdminSetPasswordReq
}

func (p *AdminSetPasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.AdminSetPasswordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AdminSetPasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AdminSetPasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AdminSetPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AdminSetPasswordArgs) Unmarshal(in []byte) error {
	msg := new(system.AdminSetPasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AdminSetPasswordArgs_Req_DEFAULT *system.AdminSetPasswordReq

func (p *AdminSetPasswordArgs) GetReq() *system.AdminSetPasswordReq {
	if !p.IsSetReq() {
		return AdminSetPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AdminSetPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AdminSetPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AdminSetPasswordResult struct {
	Success *system.Response
}

var AdminSetPasswordResult_Success_DEFAULT *system.Response

func (p *AdminSetPasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AdminSetPasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AdminSetPasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AdminSetPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AdminSetPasswordResult) Unmarshal(in []byte) error {
	msg := new(system.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AdminSetPasswordResult) GetSuccess() *system.Response {
	if !p.IsSetSuccess() {
		return AdminSetPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AdminSetPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.Response)
}

func (p *AdminSetPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AdminSetPasswordResult) GetResult() interface{} {
	return p.Success
}

func createMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.CreateMerchantReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).CreateMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateMerchantArgs:
		success, err := handler.(system.SystemService).CreateMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateMerchantArgs() interface{} {
	return &CreateMerchantArgs{}
}

func newCreateMerchantResult() interface{} {
	return &CreateMerchantResult{}
}

type CreateMerchantArgs struct {
	Req *system.CreateMerchantReq
}

func (p *CreateMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.CreateMerchantReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateMerchantArgs) Unmarshal(in []byte) error {
	msg := new(system.CreateMerchantReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateMerchantArgs_Req_DEFAULT *system.CreateMerchantReq

func (p *CreateMerchantArgs) GetReq() *system.CreateMerchantReq {
	if !p.IsSetReq() {
		return CreateMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateMerchantResult struct {
	Success *system.Response
}

var CreateMerchantResult_Success_DEFAULT *system.Response

func (p *CreateMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateMerchantResult) Unmarshal(in []byte) error {
	msg := new(system.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateMerchantResult) GetSuccess() *system.Response {
	if !p.IsSetSuccess() {
		return CreateMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.Response)
}

func (p *CreateMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateMerchantResult) GetResult() interface{} {
	return p.Success
}

func updateMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.UpdateMerchantReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).UpdateMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateMerchantArgs:
		success, err := handler.(system.SystemService).UpdateMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateMerchantArgs() interface{} {
	return &UpdateMerchantArgs{}
}

func newUpdateMerchantResult() interface{} {
	return &UpdateMerchantResult{}
}

type UpdateMerchantArgs struct {
	Req *system.UpdateMerchantReq
}

func (p *UpdateMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.UpdateMerchantReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateMerchantArgs) Unmarshal(in []byte) error {
	msg := new(system.UpdateMerchantReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateMerchantArgs_Req_DEFAULT *system.UpdateMerchantReq

func (p *UpdateMerchantArgs) GetReq() *system.UpdateMerchantReq {
	if !p.IsSetReq() {
		return UpdateMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateMerchantResult struct {
	Success *system.Response
}

var UpdateMerchantResult_Success_DEFAULT *system.Response

func (p *UpdateMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateMerchantResult) Unmarshal(in []byte) error {
	msg := new(system.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateMerchantResult) GetSuccess() *system.Response {
	if !p.IsSetSuccess() {
		return UpdateMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.Response)
}

func (p *UpdateMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateMerchantResult) GetResult() interface{} {
	return p.Success
}

func deleteMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.DeleteMerchantReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).DeleteMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteMerchantArgs:
		success, err := handler.(system.SystemService).DeleteMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteMerchantArgs() interface{} {
	return &DeleteMerchantArgs{}
}

func newDeleteMerchantResult() interface{} {
	return &DeleteMerchantResult{}
}

type DeleteMerchantArgs struct {
	Req *system.DeleteMerchantReq
}

func (p *DeleteMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.DeleteMerchantReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteMerchantArgs) Unmarshal(in []byte) error {
	msg := new(system.DeleteMerchantReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteMerchantArgs_Req_DEFAULT *system.DeleteMerchantReq

func (p *DeleteMerchantArgs) GetReq() *system.DeleteMerchantReq {
	if !p.IsSetReq() {
		return DeleteMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteMerchantResult struct {
	Success *system.Response
}

var DeleteMerchantResult_Success_DEFAULT *system.Response

func (p *DeleteMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteMerchantResult) Unmarshal(in []byte) error {
	msg := new(system.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteMerchantResult) GetSuccess() *system.Response {
	if !p.IsSetSuccess() {
		return DeleteMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.Response)
}

func (p *DeleteMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteMerchantResult) GetResult() interface{} {
	return p.Success
}

func getMerchantInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.GetMerchantInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).GetMerchantInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetMerchantInfoArgs:
		success, err := handler.(system.SystemService).GetMerchantInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMerchantInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetMerchantInfoArgs() interface{} {
	return &GetMerchantInfoArgs{}
}

func newGetMerchantInfoResult() interface{} {
	return &GetMerchantInfoResult{}
}

type GetMerchantInfoArgs struct {
	Req *system.GetMerchantInfoReq
}

func (p *GetMerchantInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.GetMerchantInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMerchantInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMerchantInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMerchantInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMerchantInfoArgs) Unmarshal(in []byte) error {
	msg := new(system.GetMerchantInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMerchantInfoArgs_Req_DEFAULT *system.GetMerchantInfoReq

func (p *GetMerchantInfoArgs) GetReq() *system.GetMerchantInfoReq {
	if !p.IsSetReq() {
		return GetMerchantInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMerchantInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMerchantInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMerchantInfoResult struct {
	Success *system.GetMerchantInfoResp
}

var GetMerchantInfoResult_Success_DEFAULT *system.GetMerchantInfoResp

func (p *GetMerchantInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.GetMerchantInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMerchantInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMerchantInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMerchantInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMerchantInfoResult) Unmarshal(in []byte) error {
	msg := new(system.GetMerchantInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMerchantInfoResult) GetSuccess() *system.GetMerchantInfoResp {
	if !p.IsSetSuccess() {
		return GetMerchantInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMerchantInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.GetMerchantInfoResp)
}

func (p *GetMerchantInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMerchantInfoResult) GetResult() interface{} {
	return p.Success
}

func listMerchantsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.ListMerchantsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).ListMerchants(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListMerchantsArgs:
		success, err := handler.(system.SystemService).ListMerchants(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListMerchantsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListMerchantsArgs() interface{} {
	return &ListMerchantsArgs{}
}

func newListMerchantsResult() interface{} {
	return &ListMerchantsResult{}
}

type ListMerchantsArgs struct {
	Req *system.ListMerchantsReq
}

func (p *ListMerchantsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.ListMerchantsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListMerchantsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListMerchantsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListMerchantsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListMerchantsArgs) Unmarshal(in []byte) error {
	msg := new(system.ListMerchantsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListMerchantsArgs_Req_DEFAULT *system.ListMerchantsReq

func (p *ListMerchantsArgs) GetReq() *system.ListMerchantsReq {
	if !p.IsSetReq() {
		return ListMerchantsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListMerchantsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListMerchantsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListMerchantsResult struct {
	Success *system.ListMerchantsResp
}

var ListMerchantsResult_Success_DEFAULT *system.ListMerchantsResp

func (p *ListMerchantsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.ListMerchantsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListMerchantsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListMerchantsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListMerchantsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListMerchantsResult) Unmarshal(in []byte) error {
	msg := new(system.ListMerchantsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListMerchantsResult) GetSuccess() *system.ListMerchantsResp {
	if !p.IsSetSuccess() {
		return ListMerchantsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListMerchantsResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.ListMerchantsResp)
}

func (p *ListMerchantsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListMerchantsResult) GetResult() interface{} {
	return p.Success
}

func getMerchantTotalDataHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.GetMerchantTotalDataReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).GetMerchantTotalData(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetMerchantTotalDataArgs:
		success, err := handler.(system.SystemService).GetMerchantTotalData(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetMerchantTotalDataResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetMerchantTotalDataArgs() interface{} {
	return &GetMerchantTotalDataArgs{}
}

func newGetMerchantTotalDataResult() interface{} {
	return &GetMerchantTotalDataResult{}
}

type GetMerchantTotalDataArgs struct {
	Req *system.GetMerchantTotalDataReq
}

func (p *GetMerchantTotalDataArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.GetMerchantTotalDataReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetMerchantTotalDataArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetMerchantTotalDataArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetMerchantTotalDataArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetMerchantTotalDataArgs) Unmarshal(in []byte) error {
	msg := new(system.GetMerchantTotalDataReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetMerchantTotalDataArgs_Req_DEFAULT *system.GetMerchantTotalDataReq

func (p *GetMerchantTotalDataArgs) GetReq() *system.GetMerchantTotalDataReq {
	if !p.IsSetReq() {
		return GetMerchantTotalDataArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetMerchantTotalDataArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetMerchantTotalDataArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetMerchantTotalDataResult struct {
	Success *system.GetMerchantTotalDataResp
}

var GetMerchantTotalDataResult_Success_DEFAULT *system.GetMerchantTotalDataResp

func (p *GetMerchantTotalDataResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.GetMerchantTotalDataResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetMerchantTotalDataResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetMerchantTotalDataResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetMerchantTotalDataResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetMerchantTotalDataResult) Unmarshal(in []byte) error {
	msg := new(system.GetMerchantTotalDataResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetMerchantTotalDataResult) GetSuccess() *system.GetMerchantTotalDataResp {
	if !p.IsSetSuccess() {
		return GetMerchantTotalDataResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetMerchantTotalDataResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.GetMerchantTotalDataResp)
}

func (p *GetMerchantTotalDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetMerchantTotalDataResult) GetResult() interface{} {
	return p.Success
}

func listMerchantByMerchantIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.ListMerchantsByMerchantIdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).ListMerchantByMerchantId(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListMerchantByMerchantIdArgs:
		success, err := handler.(system.SystemService).ListMerchantByMerchantId(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListMerchantByMerchantIdResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListMerchantByMerchantIdArgs() interface{} {
	return &ListMerchantByMerchantIdArgs{}
}

func newListMerchantByMerchantIdResult() interface{} {
	return &ListMerchantByMerchantIdResult{}
}

type ListMerchantByMerchantIdArgs struct {
	Req *system.ListMerchantsByMerchantIdReq
}

func (p *ListMerchantByMerchantIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.ListMerchantsByMerchantIdReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListMerchantByMerchantIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListMerchantByMerchantIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListMerchantByMerchantIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListMerchantByMerchantIdArgs) Unmarshal(in []byte) error {
	msg := new(system.ListMerchantsByMerchantIdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListMerchantByMerchantIdArgs_Req_DEFAULT *system.ListMerchantsByMerchantIdReq

func (p *ListMerchantByMerchantIdArgs) GetReq() *system.ListMerchantsByMerchantIdReq {
	if !p.IsSetReq() {
		return ListMerchantByMerchantIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListMerchantByMerchantIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListMerchantByMerchantIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListMerchantByMerchantIdResult struct {
	Success *system.ListMerchantsByMerchantIdResp
}

var ListMerchantByMerchantIdResult_Success_DEFAULT *system.ListMerchantsByMerchantIdResp

func (p *ListMerchantByMerchantIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.ListMerchantsByMerchantIdResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListMerchantByMerchantIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListMerchantByMerchantIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListMerchantByMerchantIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListMerchantByMerchantIdResult) Unmarshal(in []byte) error {
	msg := new(system.ListMerchantsByMerchantIdResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListMerchantByMerchantIdResult) GetSuccess() *system.ListMerchantsByMerchantIdResp {
	if !p.IsSetSuccess() {
		return ListMerchantByMerchantIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListMerchantByMerchantIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.ListMerchantsByMerchantIdResp)
}

func (p *ListMerchantByMerchantIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListMerchantByMerchantIdResult) GetResult() interface{} {
	return p.Success
}

func listMerchantByActivityNumberHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.ListMerchantsByActivityNumberReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).ListMerchantByActivityNumber(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListMerchantByActivityNumberArgs:
		success, err := handler.(system.SystemService).ListMerchantByActivityNumber(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListMerchantByActivityNumberResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListMerchantByActivityNumberArgs() interface{} {
	return &ListMerchantByActivityNumberArgs{}
}

func newListMerchantByActivityNumberResult() interface{} {
	return &ListMerchantByActivityNumberResult{}
}

type ListMerchantByActivityNumberArgs struct {
	Req *system.ListMerchantsByActivityNumberReq
}

func (p *ListMerchantByActivityNumberArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.ListMerchantsByActivityNumberReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListMerchantByActivityNumberArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListMerchantByActivityNumberArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListMerchantByActivityNumberArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListMerchantByActivityNumberArgs) Unmarshal(in []byte) error {
	msg := new(system.ListMerchantsByActivityNumberReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListMerchantByActivityNumberArgs_Req_DEFAULT *system.ListMerchantsByActivityNumberReq

func (p *ListMerchantByActivityNumberArgs) GetReq() *system.ListMerchantsByActivityNumberReq {
	if !p.IsSetReq() {
		return ListMerchantByActivityNumberArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListMerchantByActivityNumberArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListMerchantByActivityNumberArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListMerchantByActivityNumberResult struct {
	Success *system.ListMerchantsByActivityNumberResp
}

var ListMerchantByActivityNumberResult_Success_DEFAULT *system.ListMerchantsByActivityNumberResp

func (p *ListMerchantByActivityNumberResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.ListMerchantsByActivityNumberResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListMerchantByActivityNumberResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListMerchantByActivityNumberResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListMerchantByActivityNumberResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListMerchantByActivityNumberResult) Unmarshal(in []byte) error {
	msg := new(system.ListMerchantsByActivityNumberResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListMerchantByActivityNumberResult) GetSuccess() *system.ListMerchantsByActivityNumberResp {
	if !p.IsSetSuccess() {
		return ListMerchantByActivityNumberResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListMerchantByActivityNumberResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.ListMerchantsByActivityNumberResp)
}

func (p *ListMerchantByActivityNumberResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListMerchantByActivityNumberResult) GetResult() interface{} {
	return p.Success
}

func listActivityByActivityIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.ListActivitiesByActivityIdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).ListActivityByActivityId(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListActivityByActivityIdArgs:
		success, err := handler.(system.SystemService).ListActivityByActivityId(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListActivityByActivityIdResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListActivityByActivityIdArgs() interface{} {
	return &ListActivityByActivityIdArgs{}
}

func newListActivityByActivityIdResult() interface{} {
	return &ListActivityByActivityIdResult{}
}

type ListActivityByActivityIdArgs struct {
	Req *system.ListActivitiesByActivityIdReq
}

func (p *ListActivityByActivityIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.ListActivitiesByActivityIdReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListActivityByActivityIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListActivityByActivityIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListActivityByActivityIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListActivityByActivityIdArgs) Unmarshal(in []byte) error {
	msg := new(system.ListActivitiesByActivityIdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListActivityByActivityIdArgs_Req_DEFAULT *system.ListActivitiesByActivityIdReq

func (p *ListActivityByActivityIdArgs) GetReq() *system.ListActivitiesByActivityIdReq {
	if !p.IsSetReq() {
		return ListActivityByActivityIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListActivityByActivityIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListActivityByActivityIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListActivityByActivityIdResult struct {
	Success *system.ListActivitiesByActivityIdResp
}

var ListActivityByActivityIdResult_Success_DEFAULT *system.ListActivitiesByActivityIdResp

func (p *ListActivityByActivityIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.ListActivitiesByActivityIdResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListActivityByActivityIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListActivityByActivityIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListActivityByActivityIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListActivityByActivityIdResult) Unmarshal(in []byte) error {
	msg := new(system.ListActivitiesByActivityIdResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListActivityByActivityIdResult) GetSuccess() *system.ListActivitiesByActivityIdResp {
	if !p.IsSetSuccess() {
		return ListActivityByActivityIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListActivityByActivityIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.ListActivitiesByActivityIdResp)
}

func (p *ListActivityByActivityIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListActivityByActivityIdResult) GetResult() interface{} {
	return p.Success
}

func stsSendVerifyCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.StsSendVerifyCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).StsSendVerifyCode(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *StsSendVerifyCodeArgs:
		success, err := handler.(system.SystemService).StsSendVerifyCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*StsSendVerifyCodeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newStsSendVerifyCodeArgs() interface{} {
	return &StsSendVerifyCodeArgs{}
}

func newStsSendVerifyCodeResult() interface{} {
	return &StsSendVerifyCodeResult{}
}

type StsSendVerifyCodeArgs struct {
	Req *system.StsSendVerifyCodeReq
}

func (p *StsSendVerifyCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.StsSendVerifyCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *StsSendVerifyCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *StsSendVerifyCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *StsSendVerifyCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *StsSendVerifyCodeArgs) Unmarshal(in []byte) error {
	msg := new(system.StsSendVerifyCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var StsSendVerifyCodeArgs_Req_DEFAULT *system.StsSendVerifyCodeReq

func (p *StsSendVerifyCodeArgs) GetReq() *system.StsSendVerifyCodeReq {
	if !p.IsSetReq() {
		return StsSendVerifyCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *StsSendVerifyCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StsSendVerifyCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type StsSendVerifyCodeResult struct {
	Success *system.Response
}

var StsSendVerifyCodeResult_Success_DEFAULT *system.Response

func (p *StsSendVerifyCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *StsSendVerifyCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *StsSendVerifyCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *StsSendVerifyCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *StsSendVerifyCodeResult) Unmarshal(in []byte) error {
	msg := new(system.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *StsSendVerifyCodeResult) GetSuccess() *system.Response {
	if !p.IsSetSuccess() {
		return StsSendVerifyCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *StsSendVerifyCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.Response)
}

func (p *StsSendVerifyCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StsSendVerifyCodeResult) GetResult() interface{} {
	return p.Success
}

func stsCheckVerifyCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(system.StsCheckVerifyCodeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(system.SystemService).StsCheckVerifyCode(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *StsCheckVerifyCodeArgs:
		success, err := handler.(system.SystemService).StsCheckVerifyCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*StsCheckVerifyCodeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newStsCheckVerifyCodeArgs() interface{} {
	return &StsCheckVerifyCodeArgs{}
}

func newStsCheckVerifyCodeResult() interface{} {
	return &StsCheckVerifyCodeResult{}
}

type StsCheckVerifyCodeArgs struct {
	Req *system.StsCheckVerifyCodeReq
}

func (p *StsCheckVerifyCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(system.StsCheckVerifyCodeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *StsCheckVerifyCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *StsCheckVerifyCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *StsCheckVerifyCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *StsCheckVerifyCodeArgs) Unmarshal(in []byte) error {
	msg := new(system.StsCheckVerifyCodeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var StsCheckVerifyCodeArgs_Req_DEFAULT *system.StsCheckVerifyCodeReq

func (p *StsCheckVerifyCodeArgs) GetReq() *system.StsCheckVerifyCodeReq {
	if !p.IsSetReq() {
		return StsCheckVerifyCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *StsCheckVerifyCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StsCheckVerifyCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type StsCheckVerifyCodeResult struct {
	Success *system.Response
}

var StsCheckVerifyCodeResult_Success_DEFAULT *system.Response

func (p *StsCheckVerifyCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(system.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *StsCheckVerifyCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *StsCheckVerifyCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *StsCheckVerifyCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *StsCheckVerifyCodeResult) Unmarshal(in []byte) error {
	msg := new(system.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *StsCheckVerifyCodeResult) GetSuccess() *system.Response {
	if !p.IsSetSuccess() {
		return StsCheckVerifyCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *StsCheckVerifyCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*system.Response)
}

func (p *StsCheckVerifyCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StsCheckVerifyCodeResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) MerchantLogin(ctx context.Context, Req *system.MerchantLoginReq) (r *system.MerchantLoginResp, err error) {
	var _args MerchantLoginArgs
	_args.Req = Req
	var _result MerchantLoginResult
	if err = p.c.Call(ctx, "MerchantLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantSetPassword(ctx context.Context, Req *system.MerchantSetPasswordReq) (r *system.Response, err error) {
	var _args MerchantSetPasswordArgs
	_args.Req = Req
	var _result MerchantSetPasswordResult
	if err = p.c.Call(ctx, "MerchantSetPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMerchantSetting(ctx context.Context, Req *system.UpdateSettingReq) (r *system.Response, err error) {
	var _args UpdateMerchantSettingArgs
	_args.Req = Req
	var _result UpdateMerchantSettingResult
	if err = p.c.Call(ctx, "UpdateMerchantSetting", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMerchantSetting(ctx context.Context, Req *system.GetMerchantSettingReq) (r *system.GetMerchantSettingResp, err error) {
	var _args GetMerchantSettingArgs
	_args.Req = Req
	var _result GetMerchantSettingResult
	if err = p.c.Call(ctx, "GetMerchantSetting", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMerchantInfo(ctx context.Context, Req *system.UpdateMerchantInfoReq) (r *system.Response, err error) {
	var _args UpdateMerchantInfoArgs
	_args.Req = Req
	var _result UpdateMerchantInfoResult
	if err = p.c.Call(ctx, "UpdateMerchantInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMerchantInfoByUri(ctx context.Context, Req *system.GetMerchantInfoByUriReq) (r *system.GetMerchantInfoByUriResp, err error) {
	var _args GetMerchantInfoByUriArgs
	_args.Req = Req
	var _result GetMerchantInfoByUriResult
	if err = p.c.Call(ctx, "GetMerchantInfoByUri", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAd(ctx context.Context, Req *system.GetAdReq) (r *system.GetAdResp, err error) {
	var _args GetAdArgs
	_args.Req = Req
	var _result GetAdResult
	if err = p.c.Call(ctx, "GetAd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetAd(ctx context.Context, Req *system.SetAdReq) (r *system.Response, err error) {
	var _args SetAdArgs
	_args.Req = Req
	var _result SetAdResult
	if err = p.c.Call(ctx, "SetAd", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateActivity(ctx context.Context, Req *system.CreateActivityReq) (r *system.Response, err error) {
	var _args CreateActivityArgs
	_args.Req = Req
	var _result CreateActivityResult
	if err = p.c.Call(ctx, "CreateActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TopActivity(ctx context.Context, Req *system.TopActivityReq) (r *system.Response, err error) {
	var _args TopActivityArgs
	_args.Req = Req
	var _result TopActivityResult
	if err = p.c.Call(ctx, "TopActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteActivity(ctx context.Context, Req *system.DeleteActivityReq) (r *system.Response, err error) {
	var _args DeleteActivityArgs
	_args.Req = Req
	var _result DeleteActivityResult
	if err = p.c.Call(ctx, "DeleteActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateActivity(ctx context.Context, Req *system.UpdateActivityReq) (r *system.Response, err error) {
	var _args UpdateActivityArgs
	_args.Req = Req
	var _result UpdateActivityResult
	if err = p.c.Call(ctx, "UpdateActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListActivities(ctx context.Context, Req *system.ListActivitiesReq) (r *system.ListActivitiesResp, err error) {
	var _args ListActivitiesArgs
	_args.Req = Req
	var _result ListActivitiesResult
	if err = p.c.Call(ctx, "ListActivities", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetActivity(ctx context.Context, Req *system.GetActivityReq) (r *system.GetActivityResp, err error) {
	var _args GetActivityArgs
	_args.Req = Req
	var _result GetActivityResult
	if err = p.c.Call(ctx, "GetActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AdminLogin(ctx context.Context, Req *system.AdminLoginReq) (r *system.AdminLoginResp, err error) {
	var _args AdminLoginArgs
	_args.Req = Req
	var _result AdminLoginResult
	if err = p.c.Call(ctx, "AdminLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AdminSetPassword(ctx context.Context, Req *system.AdminSetPasswordReq) (r *system.Response, err error) {
	var _args AdminSetPasswordArgs
	_args.Req = Req
	var _result AdminSetPasswordResult
	if err = p.c.Call(ctx, "AdminSetPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateMerchant(ctx context.Context, Req *system.CreateMerchantReq) (r *system.Response, err error) {
	var _args CreateMerchantArgs
	_args.Req = Req
	var _result CreateMerchantResult
	if err = p.c.Call(ctx, "CreateMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateMerchant(ctx context.Context, Req *system.UpdateMerchantReq) (r *system.Response, err error) {
	var _args UpdateMerchantArgs
	_args.Req = Req
	var _result UpdateMerchantResult
	if err = p.c.Call(ctx, "UpdateMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteMerchant(ctx context.Context, Req *system.DeleteMerchantReq) (r *system.Response, err error) {
	var _args DeleteMerchantArgs
	_args.Req = Req
	var _result DeleteMerchantResult
	if err = p.c.Call(ctx, "DeleteMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMerchantInfo(ctx context.Context, Req *system.GetMerchantInfoReq) (r *system.GetMerchantInfoResp, err error) {
	var _args GetMerchantInfoArgs
	_args.Req = Req
	var _result GetMerchantInfoResult
	if err = p.c.Call(ctx, "GetMerchantInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListMerchants(ctx context.Context, Req *system.ListMerchantsReq) (r *system.ListMerchantsResp, err error) {
	var _args ListMerchantsArgs
	_args.Req = Req
	var _result ListMerchantsResult
	if err = p.c.Call(ctx, "ListMerchants", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMerchantTotalData(ctx context.Context, Req *system.GetMerchantTotalDataReq) (r *system.GetMerchantTotalDataResp, err error) {
	var _args GetMerchantTotalDataArgs
	_args.Req = Req
	var _result GetMerchantTotalDataResult
	if err = p.c.Call(ctx, "GetMerchantTotalData", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListMerchantByMerchantId(ctx context.Context, Req *system.ListMerchantsByMerchantIdReq) (r *system.ListMerchantsByMerchantIdResp, err error) {
	var _args ListMerchantByMerchantIdArgs
	_args.Req = Req
	var _result ListMerchantByMerchantIdResult
	if err = p.c.Call(ctx, "ListMerchantByMerchantId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListMerchantByActivityNumber(ctx context.Context, Req *system.ListMerchantsByActivityNumberReq) (r *system.ListMerchantsByActivityNumberResp, err error) {
	var _args ListMerchantByActivityNumberArgs
	_args.Req = Req
	var _result ListMerchantByActivityNumberResult
	if err = p.c.Call(ctx, "ListMerchantByActivityNumber", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListActivityByActivityId(ctx context.Context, Req *system.ListActivitiesByActivityIdReq) (r *system.ListActivitiesByActivityIdResp, err error) {
	var _args ListActivityByActivityIdArgs
	_args.Req = Req
	var _result ListActivityByActivityIdResult
	if err = p.c.Call(ctx, "ListActivityByActivityId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StsSendVerifyCode(ctx context.Context, Req *system.StsSendVerifyCodeReq) (r *system.Response, err error) {
	var _args StsSendVerifyCodeArgs
	_args.Req = Req
	var _result StsSendVerifyCodeResult
	if err = p.c.Call(ctx, "StsSendVerifyCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StsCheckVerifyCode(ctx context.Context, Req *system.StsCheckVerifyCodeReq) (r *system.Response, err error) {
	var _args StsCheckVerifyCodeArgs
	_args.Req = Req
	var _result StsCheckVerifyCodeResult
	if err = p.c.Call(ctx, "StsCheckVerifyCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
