// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package user

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	basic "github.com/xh-polaris/ActiManage-IDL-gen/kitex_gen/basic"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *User) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_User[number], err)
}

func (x *User) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.MerchantId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Gender, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Birth, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.DeleteTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Notice, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.Avatar, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Reserver) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Reserver[number], err)
}

func (x *Reserver) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Reserver) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Reserver) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Reserver) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Gender, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Reserver) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Relation, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Reserver) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Reserver) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Reserver) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Birth, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Reserver) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Reserver) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Reserver) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.DeleteTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Reserver) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BookItem) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BookItem[number], err)
}

func (x *BookItem) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ReserverId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BookItem) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Cancel, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BookRecord) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BookRecord[number], err)
}

func (x *BookRecord) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BookRecord) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ActivityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BookRecord) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BookRecord) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v BookItem
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Reservers = append(x.Reservers, &v)
	return offset, nil
}

func (x *BookRecord) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Arrival, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BookRecord) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Remark, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *BookRecord) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BookRecord) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BookRecord) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.DeleteTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BookRecord) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Receipt) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Receipt[number], err)
}

func (x *Receipt) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Receipt) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Receipt) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ActivityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Receipt) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Receipt) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Receipt) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Receipt) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.DeleteTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Receipt) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Favorite) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Favorite[number], err)
}

func (x *Favorite) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Favorite) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Favorite) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ActivityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Favorite) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Favorite) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Favorite) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.DeleteTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Favorite) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserSignUpReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserSignUpReq[number], err)
}

func (x *UserSignUpReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MerchantId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserSignUpReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Name = &tmp
	return offset, err
}

func (x *UserSignUpReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.AuthId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserSignUpReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.AuthType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserSignUpReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.VerifyCode, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserSignUpReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Password, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserSignUpReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Gender, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserSignUpResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserSignUpResp[number], err)
}

func (x *UserSignUpResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserSignUpResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserSignUpResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserLoginReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserLoginReq[number], err)
}

func (x *UserLoginReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.AuthId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserLoginReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AuthType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserLoginReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.VerifyCode = &tmp
	return offset, err
}

func (x *UserLoginReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Password = &tmp
	return offset, err
}

func (x *UserLoginReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.MerchantId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserLoginResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserLoginResp[number], err)
}

func (x *UserLoginResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserLoginResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UserLoginResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserInfoReq[number], err)
}

func (x *GetUserInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetUserInfoResp[number], err)
}

func (x *GetUserInfoResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.MerchantId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Phone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Email, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Gender, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.Birth, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.CreateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.UpdateTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.Notice, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetUserInfoResp) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.Avatar, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateUserInfoReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateUserInfoReq[number], err)
}

func (x *UpdateUserInfoReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateUserInfoReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateUserInfoReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Gender, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateUserInfoReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Birth, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateUserInfoReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateUserInfoReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Avatar, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SetPasswordReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SetPasswordReq[number], err)
}

func (x *SetPasswordReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SetPasswordReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.OldPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SetPasswordReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.NewPassword, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateReserverReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateReserverReq[number], err)
}

func (x *CreateReserverReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateReserverReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateReserverReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Gender, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateReserverReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Relation, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateReserverReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Phone = &tmp
	return offset, err
}

func (x *CreateReserverReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Email = &tmp
	return offset, err
}

func (x *CreateReserverReq) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.Birth = &tmp
	return offset, err
}

func (x *DeleteReserverReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteReserverReq[number], err)
}

func (x *DeleteReserverReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ReserverId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdateReserverReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateReserverReq[number], err)
}

func (x *UpdateReserverReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Reserver
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Reserver = &v
	return offset, nil
}

func (x *ListReserversReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListReserversReq[number], err)
}

func (x *ListReserversReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListReserversReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v basic.Paging
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Paging = &v
	return offset, nil
}

func (x *ListReserversResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListReserversResp[number], err)
}

func (x *ListReserversResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListReserversResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListReserversResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Reserver
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Reservers = append(x.Reservers, &v)
	return offset, nil
}

func (x *ListReserversResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateBookRecordReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateBookRecordReq[number], err)
}

func (x *CreateBookRecordReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateBookRecordReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ActivityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateBookRecordReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ReserverIds = append(x.ReserverIds, v)
	return offset, err
}

func (x *CreateBookRecordReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Arrival, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateBookRecordReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Remark, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CancelBookRecordReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CancelBookRecordReq[number], err)
}

func (x *CancelBookRecordReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.BookRecordId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CancelBookRecordReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ReserverId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetBookRecordReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetBookRecordReq[number], err)
}

func (x *GetBookRecordReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.BookRecordId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetBookRecordResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetBookRecordResp[number], err)
}

func (x *GetBookRecordResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetBookRecordResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetBookRecordResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v BookRecord
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Record = &v
	return offset, nil
}

func (x *ListBookRecordsByUserReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListBookRecordsByUserReq[number], err)
}

func (x *ListBookRecordsByUserReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListBookRecordsByUserReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v basic.Paging
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Paging = &v
	return offset, nil
}

func (x *ListBookRecordsByUserResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListBookRecordsByUserResp[number], err)
}

func (x *ListBookRecordsByUserResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListBookRecordsByUserResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListBookRecordsByUserResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v BookRecord
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Records = append(x.Records, &v)
	return offset, nil
}

func (x *ListBookRecordsByUserResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateReceiptReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateReceiptReq[number], err)
}

func (x *CreateReceiptReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateReceiptReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ActivityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateReceiptReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteReceiptReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteReceiptReq[number], err)
}

func (x *DeleteReceiptReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ReceiptId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListReceiptsReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListReceiptsReq[number], err)
}

func (x *ListReceiptsReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListReceiptsReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v basic.Paging
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Paging = &v
	return offset, nil
}

func (x *ListReceiptsResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ListReceiptsResp[number], err)
}

func (x *ListReceiptsResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ListReceiptsResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ListReceiptsResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Receipt
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Receipts = append(x.Receipts, &v)
	return offset, nil
}

func (x *ListReceiptsResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Total, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *MarkReceiptReadReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MarkReceiptReadReq[number], err)
}

func (x *MarkReceiptReadReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ReceiptId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DoFavoriteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DoFavoriteReq[number], err)
}

func (x *DoFavoriteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DoFavoriteReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ActivityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CancelFavoriteReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CancelFavoriteReq[number], err)
}

func (x *CancelFavoriteReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateViewReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateViewReq[number], err)
}

func (x *CreateViewReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TargetId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateViewReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IncViewReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IncViewReq[number], err)
}

func (x *IncViewReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.TargetId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *IncViewReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IncViewResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetFavoriteAndViewOfActivityReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFavoriteAndViewOfActivityReq[number], err)
}

func (x *GetFavoriteAndViewOfActivityReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ActivityId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetFavoriteAndViewOfActivityResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetFavoriteAndViewOfActivityResp[number], err)
}

func (x *GetFavoriteAndViewOfActivityResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Favorite, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetFavoriteAndViewOfActivityResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.View, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetViewOfMerchantReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetViewOfMerchantReq[number], err)
}

func (x *GetViewOfMerchantReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MerchantId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetViewOfMerchantResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetViewOfMerchantResp[number], err)
}

func (x *GetViewOfMerchantResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.View, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Response) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Response[number], err)
}

func (x *Response) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Response) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	return offset
}

func (x *User) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *User) fastWriteField2(buf []byte) (offset int) {
	if x.MerchantId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMerchantId())
	return offset
}

func (x *User) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *User) fastWriteField4(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPhone())
	return offset
}

func (x *User) fastWriteField5(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetEmail())
	return offset
}

func (x *User) fastWriteField6(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetPassword())
	return offset
}

func (x *User) fastWriteField7(buf []byte) (offset int) {
	if x.Gender == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetGender())
	return offset
}

func (x *User) fastWriteField8(buf []byte) (offset int) {
	if x.Birth == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetBirth())
	return offset
}

func (x *User) fastWriteField9(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetCreateTime())
	return offset
}

func (x *User) fastWriteField10(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetUpdateTime())
	return offset
}

func (x *User) fastWriteField11(buf []byte) (offset int) {
	if x.DeleteTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetDeleteTime())
	return offset
}

func (x *User) fastWriteField12(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetStatus())
	return offset
}

func (x *User) fastWriteField13(buf []byte) (offset int) {
	if x.Notice == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 13, x.GetNotice())
	return offset
}

func (x *User) fastWriteField14(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 14, x.GetDescription())
	return offset
}

func (x *User) fastWriteField15(buf []byte) (offset int) {
	if x.Avatar == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 15, x.GetAvatar())
	return offset
}

func (x *Reserver) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	return offset
}

func (x *Reserver) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Reserver) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *Reserver) fastWriteField3(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetName())
	return offset
}

func (x *Reserver) fastWriteField4(buf []byte) (offset int) {
	if x.Gender == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetGender())
	return offset
}

func (x *Reserver) fastWriteField5(buf []byte) (offset int) {
	if x.Relation == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetRelation())
	return offset
}

func (x *Reserver) fastWriteField6(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetPhone())
	return offset
}

func (x *Reserver) fastWriteField7(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetEmail())
	return offset
}

func (x *Reserver) fastWriteField8(buf []byte) (offset int) {
	if x.Birth == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetBirth())
	return offset
}

func (x *Reserver) fastWriteField9(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetCreateTime())
	return offset
}

func (x *Reserver) fastWriteField10(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetUpdateTime())
	return offset
}

func (x *Reserver) fastWriteField11(buf []byte) (offset int) {
	if x.DeleteTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetDeleteTime())
	return offset
}

func (x *Reserver) fastWriteField12(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetStatus())
	return offset
}

func (x *BookItem) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *BookItem) fastWriteField1(buf []byte) (offset int) {
	if x.ReserverId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetReserverId())
	return offset
}

func (x *BookItem) fastWriteField2(buf []byte) (offset int) {
	if x.Cancel == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCancel())
	return offset
}

func (x *BookRecord) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *BookRecord) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *BookRecord) fastWriteField2(buf []byte) (offset int) {
	if x.ActivityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetActivityId())
	return offset
}

func (x *BookRecord) fastWriteField3(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetUserId())
	return offset
}

func (x *BookRecord) fastWriteField4(buf []byte) (offset int) {
	if x.Reservers == nil {
		return offset
	}
	for i := range x.GetReservers() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetReservers()[i])
	}
	return offset
}

func (x *BookRecord) fastWriteField5(buf []byte) (offset int) {
	if x.Arrival == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetArrival())
	return offset
}

func (x *BookRecord) fastWriteField6(buf []byte) (offset int) {
	if x.Remark == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetRemark())
	return offset
}

func (x *BookRecord) fastWriteField7(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetCreateTime())
	return offset
}

func (x *BookRecord) fastWriteField8(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetUpdateTime())
	return offset
}

func (x *BookRecord) fastWriteField9(buf []byte) (offset int) {
	if x.DeleteTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetDeleteTime())
	return offset
}

func (x *BookRecord) fastWriteField10(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetStatus())
	return offset
}

func (x *Receipt) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *Receipt) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Receipt) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *Receipt) fastWriteField3(buf []byte) (offset int) {
	if x.ActivityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetActivityId())
	return offset
}

func (x *Receipt) fastWriteField4(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetMsg())
	return offset
}

func (x *Receipt) fastWriteField5(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetCreateTime())
	return offset
}

func (x *Receipt) fastWriteField6(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetUpdateTime())
	return offset
}

func (x *Receipt) fastWriteField7(buf []byte) (offset int) {
	if x.DeleteTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetDeleteTime())
	return offset
}

func (x *Receipt) fastWriteField8(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetStatus())
	return offset
}

func (x *Favorite) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *Favorite) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Favorite) fastWriteField2(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetUserId())
	return offset
}

func (x *Favorite) fastWriteField3(buf []byte) (offset int) {
	if x.ActivityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetActivityId())
	return offset
}

func (x *Favorite) fastWriteField4(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetCreateTime())
	return offset
}

func (x *Favorite) fastWriteField5(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetUpdateTime())
	return offset
}

func (x *Favorite) fastWriteField6(buf []byte) (offset int) {
	if x.DeleteTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetDeleteTime())
	return offset
}

func (x *Favorite) fastWriteField7(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetStatus())
	return offset
}

func (x *UserSignUpReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *UserSignUpReq) fastWriteField1(buf []byte) (offset int) {
	if x.MerchantId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMerchantId())
	return offset
}

func (x *UserSignUpReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UserSignUpReq) fastWriteField3(buf []byte) (offset int) {
	if x.AuthId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetAuthId())
	return offset
}

func (x *UserSignUpReq) fastWriteField4(buf []byte) (offset int) {
	if x.AuthType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetAuthType())
	return offset
}

func (x *UserSignUpReq) fastWriteField5(buf []byte) (offset int) {
	if x.VerifyCode == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetVerifyCode())
	return offset
}

func (x *UserSignUpReq) fastWriteField6(buf []byte) (offset int) {
	if x.Password == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetPassword())
	return offset
}

func (x *UserSignUpReq) fastWriteField7(buf []byte) (offset int) {
	if x.Gender == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetGender())
	return offset
}

func (x *UserSignUpResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UserSignUpResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *UserSignUpResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *UserSignUpResp) fastWriteField3(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetId())
	return offset
}

func (x *UserLoginReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *UserLoginReq) fastWriteField1(buf []byte) (offset int) {
	if x.AuthId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAuthId())
	return offset
}

func (x *UserLoginReq) fastWriteField2(buf []byte) (offset int) {
	if x.AuthType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetAuthType())
	return offset
}

func (x *UserLoginReq) fastWriteField3(buf []byte) (offset int) {
	if x.VerifyCode == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetVerifyCode())
	return offset
}

func (x *UserLoginReq) fastWriteField4(buf []byte) (offset int) {
	if x.Password == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPassword())
	return offset
}

func (x *UserLoginReq) fastWriteField5(buf []byte) (offset int) {
	if x.MerchantId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetMerchantId())
	return offset
}

func (x *UserLoginResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UserLoginResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *UserLoginResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *UserLoginResp) fastWriteField3(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetId())
	return offset
}

func (x *GetUserInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetUserInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *GetUserInfoResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	return offset
}

func (x *GetUserInfoResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *GetUserInfoResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetUserInfoResp) fastWriteField3(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetId())
	return offset
}

func (x *GetUserInfoResp) fastWriteField4(buf []byte) (offset int) {
	if x.MerchantId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetMerchantId())
	return offset
}

func (x *GetUserInfoResp) fastWriteField5(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetName())
	return offset
}

func (x *GetUserInfoResp) fastWriteField6(buf []byte) (offset int) {
	if x.Phone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetPhone())
	return offset
}

func (x *GetUserInfoResp) fastWriteField7(buf []byte) (offset int) {
	if x.Email == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetEmail())
	return offset
}

func (x *GetUserInfoResp) fastWriteField8(buf []byte) (offset int) {
	if x.Gender == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetGender())
	return offset
}

func (x *GetUserInfoResp) fastWriteField9(buf []byte) (offset int) {
	if x.Birth == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetBirth())
	return offset
}

func (x *GetUserInfoResp) fastWriteField10(buf []byte) (offset int) {
	if x.CreateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 10, x.GetCreateTime())
	return offset
}

func (x *GetUserInfoResp) fastWriteField11(buf []byte) (offset int) {
	if x.UpdateTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 11, x.GetUpdateTime())
	return offset
}

func (x *GetUserInfoResp) fastWriteField12(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetStatus())
	return offset
}

func (x *GetUserInfoResp) fastWriteField13(buf []byte) (offset int) {
	if x.Notice == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 13, x.GetNotice())
	return offset
}

func (x *GetUserInfoResp) fastWriteField14(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 14, x.GetDescription())
	return offset
}

func (x *GetUserInfoResp) fastWriteField15(buf []byte) (offset int) {
	if x.Avatar == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 15, x.GetAvatar())
	return offset
}

func (x *UpdateUserInfoReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *UpdateUserInfoReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *UpdateUserInfoReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *UpdateUserInfoReq) fastWriteField3(buf []byte) (offset int) {
	if x.Gender == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetGender())
	return offset
}

func (x *UpdateUserInfoReq) fastWriteField4(buf []byte) (offset int) {
	if x.Birth == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetBirth())
	return offset
}

func (x *UpdateUserInfoReq) fastWriteField5(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetDescription())
	return offset
}

func (x *UpdateUserInfoReq) fastWriteField6(buf []byte) (offset int) {
	if x.Avatar == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetAvatar())
	return offset
}

func (x *SetPasswordReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SetPasswordReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *SetPasswordReq) fastWriteField2(buf []byte) (offset int) {
	if x.OldPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOldPassword())
	return offset
}

func (x *SetPasswordReq) fastWriteField3(buf []byte) (offset int) {
	if x.NewPassword == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetNewPassword())
	return offset
}

func (x *CreateReserverReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *CreateReserverReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *CreateReserverReq) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *CreateReserverReq) fastWriteField3(buf []byte) (offset int) {
	if x.Gender == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetGender())
	return offset
}

func (x *CreateReserverReq) fastWriteField4(buf []byte) (offset int) {
	if x.Relation == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetRelation())
	return offset
}

func (x *CreateReserverReq) fastWriteField5(buf []byte) (offset int) {
	if x.Phone == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetPhone())
	return offset
}

func (x *CreateReserverReq) fastWriteField6(buf []byte) (offset int) {
	if x.Email == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetEmail())
	return offset
}

func (x *CreateReserverReq) fastWriteField7(buf []byte) (offset int) {
	if x.Birth == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetBirth())
	return offset
}

func (x *DeleteReserverReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteReserverReq) fastWriteField1(buf []byte) (offset int) {
	if x.ReserverId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetReserverId())
	return offset
}

func (x *UpdateReserverReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateReserverReq) fastWriteField1(buf []byte) (offset int) {
	if x.Reserver == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetReserver())
	return offset
}

func (x *ListReserversReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListReserversReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *ListReserversReq) fastWriteField2(buf []byte) (offset int) {
	if x.Paging == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPaging())
	return offset
}

func (x *ListReserversResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *ListReserversResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *ListReserversResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *ListReserversResp) fastWriteField3(buf []byte) (offset int) {
	if x.Reservers == nil {
		return offset
	}
	for i := range x.GetReservers() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetReservers()[i])
	}
	return offset
}

func (x *ListReserversResp) fastWriteField4(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetTotal())
	return offset
}

func (x *CreateBookRecordReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *CreateBookRecordReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *CreateBookRecordReq) fastWriteField2(buf []byte) (offset int) {
	if x.ActivityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetActivityId())
	return offset
}

func (x *CreateBookRecordReq) fastWriteField3(buf []byte) (offset int) {
	if len(x.ReserverIds) == 0 {
		return offset
	}
	for i := range x.GetReserverIds() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetReserverIds()[i])
	}
	return offset
}

func (x *CreateBookRecordReq) fastWriteField4(buf []byte) (offset int) {
	if x.Arrival == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetArrival())
	return offset
}

func (x *CreateBookRecordReq) fastWriteField5(buf []byte) (offset int) {
	if x.Remark == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetRemark())
	return offset
}

func (x *CancelBookRecordReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CancelBookRecordReq) fastWriteField1(buf []byte) (offset int) {
	if x.BookRecordId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetBookRecordId())
	return offset
}

func (x *CancelBookRecordReq) fastWriteField2(buf []byte) (offset int) {
	if x.ReserverId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetReserverId())
	return offset
}

func (x *GetBookRecordReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetBookRecordReq) fastWriteField1(buf []byte) (offset int) {
	if x.BookRecordId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetBookRecordId())
	return offset
}

func (x *GetBookRecordResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetBookRecordResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *GetBookRecordResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *GetBookRecordResp) fastWriteField3(buf []byte) (offset int) {
	if x.Record == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetRecord())
	return offset
}

func (x *ListBookRecordsByUserReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListBookRecordsByUserReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *ListBookRecordsByUserReq) fastWriteField2(buf []byte) (offset int) {
	if x.Paging == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPaging())
	return offset
}

func (x *ListBookRecordsByUserResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *ListBookRecordsByUserResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *ListBookRecordsByUserResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *ListBookRecordsByUserResp) fastWriteField3(buf []byte) (offset int) {
	if x.Records == nil {
		return offset
	}
	for i := range x.GetRecords() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetRecords()[i])
	}
	return offset
}

func (x *ListBookRecordsByUserResp) fastWriteField4(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetTotal())
	return offset
}

func (x *CreateReceiptReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CreateReceiptReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *CreateReceiptReq) fastWriteField2(buf []byte) (offset int) {
	if x.ActivityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetActivityId())
	return offset
}

func (x *CreateReceiptReq) fastWriteField3(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetMsg())
	return offset
}

func (x *DeleteReceiptReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteReceiptReq) fastWriteField1(buf []byte) (offset int) {
	if x.ReceiptId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetReceiptId())
	return offset
}

func (x *ListReceiptsReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ListReceiptsReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *ListReceiptsReq) fastWriteField2(buf []byte) (offset int) {
	if x.Paging == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPaging())
	return offset
}

func (x *ListReceiptsResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *ListReceiptsResp) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *ListReceiptsResp) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *ListReceiptsResp) fastWriteField3(buf []byte) (offset int) {
	if x.Receipts == nil {
		return offset
	}
	for i := range x.GetReceipts() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetReceipts()[i])
	}
	return offset
}

func (x *ListReceiptsResp) fastWriteField4(buf []byte) (offset int) {
	if x.Total == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetTotal())
	return offset
}

func (x *MarkReceiptReadReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *MarkReceiptReadReq) fastWriteField1(buf []byte) (offset int) {
	if x.ReceiptId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetReceiptId())
	return offset
}

func (x *DoFavoriteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DoFavoriteReq) fastWriteField1(buf []byte) (offset int) {
	if x.UserId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUserId())
	return offset
}

func (x *DoFavoriteReq) fastWriteField2(buf []byte) (offset int) {
	if x.ActivityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetActivityId())
	return offset
}

func (x *CancelFavoriteReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CancelFavoriteReq) fastWriteField1(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetId())
	return offset
}

func (x *CreateViewReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CreateViewReq) fastWriteField1(buf []byte) (offset int) {
	if x.TargetId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTargetId())
	return offset
}

func (x *CreateViewReq) fastWriteField2(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetType())
	return offset
}

func (x *IncViewReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *IncViewReq) fastWriteField1(buf []byte) (offset int) {
	if x.TargetId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTargetId())
	return offset
}

func (x *IncViewReq) fastWriteField2(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetType())
	return offset
}

func (x *IncViewResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetFavoriteAndViewOfActivityReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetFavoriteAndViewOfActivityReq) fastWriteField1(buf []byte) (offset int) {
	if x.ActivityId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetActivityId())
	return offset
}

func (x *GetFavoriteAndViewOfActivityResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetFavoriteAndViewOfActivityResp) fastWriteField1(buf []byte) (offset int) {
	if x.Favorite == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetFavorite())
	return offset
}

func (x *GetFavoriteAndViewOfActivityResp) fastWriteField2(buf []byte) (offset int) {
	if x.View == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetView())
	return offset
}

func (x *GetViewOfMerchantReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetViewOfMerchantReq) fastWriteField1(buf []byte) (offset int) {
	if x.MerchantId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetMerchantId())
	return offset
}

func (x *GetViewOfMerchantResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetViewOfMerchantResp) fastWriteField1(buf []byte) (offset int) {
	if x.View == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetView())
	return offset
}

func (x *Response) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Response) fastWriteField1(buf []byte) (offset int) {
	if x.Code == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *Response) fastWriteField2(buf []byte) (offset int) {
	if x.Msg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetMsg())
	return offset
}

func (x *User) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	return n
}

func (x *User) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *User) sizeField2() (n int) {
	if x.MerchantId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMerchantId())
	return n
}

func (x *User) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *User) sizeField4() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPhone())
	return n
}

func (x *User) sizeField5() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetEmail())
	return n
}

func (x *User) sizeField6() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetPassword())
	return n
}

func (x *User) sizeField7() (n int) {
	if x.Gender == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetGender())
	return n
}

func (x *User) sizeField8() (n int) {
	if x.Birth == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetBirth())
	return n
}

func (x *User) sizeField9() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetCreateTime())
	return n
}

func (x *User) sizeField10() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetUpdateTime())
	return n
}

func (x *User) sizeField11() (n int) {
	if x.DeleteTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetDeleteTime())
	return n
}

func (x *User) sizeField12() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetStatus())
	return n
}

func (x *User) sizeField13() (n int) {
	if x.Notice == 0 {
		return n
	}
	n += fastpb.SizeInt64(13, x.GetNotice())
	return n
}

func (x *User) sizeField14() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(14, x.GetDescription())
	return n
}

func (x *User) sizeField15() (n int) {
	if x.Avatar == "" {
		return n
	}
	n += fastpb.SizeString(15, x.GetAvatar())
	return n
}

func (x *Reserver) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	return n
}

func (x *Reserver) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Reserver) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *Reserver) sizeField3() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetName())
	return n
}

func (x *Reserver) sizeField4() (n int) {
	if x.Gender == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetGender())
	return n
}

func (x *Reserver) sizeField5() (n int) {
	if x.Relation == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetRelation())
	return n
}

func (x *Reserver) sizeField6() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetPhone())
	return n
}

func (x *Reserver) sizeField7() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetEmail())
	return n
}

func (x *Reserver) sizeField8() (n int) {
	if x.Birth == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetBirth())
	return n
}

func (x *Reserver) sizeField9() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetCreateTime())
	return n
}

func (x *Reserver) sizeField10() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetUpdateTime())
	return n
}

func (x *Reserver) sizeField11() (n int) {
	if x.DeleteTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetDeleteTime())
	return n
}

func (x *Reserver) sizeField12() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetStatus())
	return n
}

func (x *BookItem) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *BookItem) sizeField1() (n int) {
	if x.ReserverId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetReserverId())
	return n
}

func (x *BookItem) sizeField2() (n int) {
	if x.Cancel == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCancel())
	return n
}

func (x *BookRecord) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *BookRecord) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *BookRecord) sizeField2() (n int) {
	if x.ActivityId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetActivityId())
	return n
}

func (x *BookRecord) sizeField3() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetUserId())
	return n
}

func (x *BookRecord) sizeField4() (n int) {
	if x.Reservers == nil {
		return n
	}
	for i := range x.GetReservers() {
		n += fastpb.SizeMessage(4, x.GetReservers()[i])
	}
	return n
}

func (x *BookRecord) sizeField5() (n int) {
	if x.Arrival == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetArrival())
	return n
}

func (x *BookRecord) sizeField6() (n int) {
	if x.Remark == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetRemark())
	return n
}

func (x *BookRecord) sizeField7() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetCreateTime())
	return n
}

func (x *BookRecord) sizeField8() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetUpdateTime())
	return n
}

func (x *BookRecord) sizeField9() (n int) {
	if x.DeleteTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetDeleteTime())
	return n
}

func (x *BookRecord) sizeField10() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetStatus())
	return n
}

func (x *Receipt) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *Receipt) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Receipt) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *Receipt) sizeField3() (n int) {
	if x.ActivityId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetActivityId())
	return n
}

func (x *Receipt) sizeField4() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetMsg())
	return n
}

func (x *Receipt) sizeField5() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetCreateTime())
	return n
}

func (x *Receipt) sizeField6() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetUpdateTime())
	return n
}

func (x *Receipt) sizeField7() (n int) {
	if x.DeleteTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetDeleteTime())
	return n
}

func (x *Receipt) sizeField8() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetStatus())
	return n
}

func (x *Favorite) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *Favorite) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *Favorite) sizeField2() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetUserId())
	return n
}

func (x *Favorite) sizeField3() (n int) {
	if x.ActivityId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetActivityId())
	return n
}

func (x *Favorite) sizeField4() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetCreateTime())
	return n
}

func (x *Favorite) sizeField5() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetUpdateTime())
	return n
}

func (x *Favorite) sizeField6() (n int) {
	if x.DeleteTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetDeleteTime())
	return n
}

func (x *Favorite) sizeField7() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetStatus())
	return n
}

func (x *UserSignUpReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *UserSignUpReq) sizeField1() (n int) {
	if x.MerchantId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMerchantId())
	return n
}

func (x *UserSignUpReq) sizeField2() (n int) {
	if x.Name == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UserSignUpReq) sizeField3() (n int) {
	if x.AuthId == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetAuthId())
	return n
}

func (x *UserSignUpReq) sizeField4() (n int) {
	if x.AuthType == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetAuthType())
	return n
}

func (x *UserSignUpReq) sizeField5() (n int) {
	if x.VerifyCode == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetVerifyCode())
	return n
}

func (x *UserSignUpReq) sizeField6() (n int) {
	if x.Password == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetPassword())
	return n
}

func (x *UserSignUpReq) sizeField7() (n int) {
	if x.Gender == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetGender())
	return n
}

func (x *UserSignUpResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UserSignUpResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *UserSignUpResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *UserSignUpResp) sizeField3() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetId())
	return n
}

func (x *UserLoginReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *UserLoginReq) sizeField1() (n int) {
	if x.AuthId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAuthId())
	return n
}

func (x *UserLoginReq) sizeField2() (n int) {
	if x.AuthType == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetAuthType())
	return n
}

func (x *UserLoginReq) sizeField3() (n int) {
	if x.VerifyCode == nil {
		return n
	}
	n += fastpb.SizeString(3, x.GetVerifyCode())
	return n
}

func (x *UserLoginReq) sizeField4() (n int) {
	if x.Password == nil {
		return n
	}
	n += fastpb.SizeString(4, x.GetPassword())
	return n
}

func (x *UserLoginReq) sizeField5() (n int) {
	if x.MerchantId == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetMerchantId())
	return n
}

func (x *UserLoginResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UserLoginResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *UserLoginResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *UserLoginResp) sizeField3() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetId())
	return n
}

func (x *GetUserInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetUserInfoReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *GetUserInfoResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	return n
}

func (x *GetUserInfoResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *GetUserInfoResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetUserInfoResp) sizeField3() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetId())
	return n
}

func (x *GetUserInfoResp) sizeField4() (n int) {
	if x.MerchantId == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetMerchantId())
	return n
}

func (x *GetUserInfoResp) sizeField5() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetName())
	return n
}

func (x *GetUserInfoResp) sizeField6() (n int) {
	if x.Phone == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetPhone())
	return n
}

func (x *GetUserInfoResp) sizeField7() (n int) {
	if x.Email == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetEmail())
	return n
}

func (x *GetUserInfoResp) sizeField8() (n int) {
	if x.Gender == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetGender())
	return n
}

func (x *GetUserInfoResp) sizeField9() (n int) {
	if x.Birth == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetBirth())
	return n
}

func (x *GetUserInfoResp) sizeField10() (n int) {
	if x.CreateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(10, x.GetCreateTime())
	return n
}

func (x *GetUserInfoResp) sizeField11() (n int) {
	if x.UpdateTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(11, x.GetUpdateTime())
	return n
}

func (x *GetUserInfoResp) sizeField12() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetStatus())
	return n
}

func (x *GetUserInfoResp) sizeField13() (n int) {
	if x.Notice == 0 {
		return n
	}
	n += fastpb.SizeInt64(13, x.GetNotice())
	return n
}

func (x *GetUserInfoResp) sizeField14() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(14, x.GetDescription())
	return n
}

func (x *GetUserInfoResp) sizeField15() (n int) {
	if x.Avatar == "" {
		return n
	}
	n += fastpb.SizeString(15, x.GetAvatar())
	return n
}

func (x *UpdateUserInfoReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *UpdateUserInfoReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *UpdateUserInfoReq) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *UpdateUserInfoReq) sizeField3() (n int) {
	if x.Gender == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetGender())
	return n
}

func (x *UpdateUserInfoReq) sizeField4() (n int) {
	if x.Birth == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetBirth())
	return n
}

func (x *UpdateUserInfoReq) sizeField5() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetDescription())
	return n
}

func (x *UpdateUserInfoReq) sizeField6() (n int) {
	if x.Avatar == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetAvatar())
	return n
}

func (x *SetPasswordReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SetPasswordReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *SetPasswordReq) sizeField2() (n int) {
	if x.OldPassword == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOldPassword())
	return n
}

func (x *SetPasswordReq) sizeField3() (n int) {
	if x.NewPassword == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetNewPassword())
	return n
}

func (x *CreateReserverReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *CreateReserverReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *CreateReserverReq) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *CreateReserverReq) sizeField3() (n int) {
	if x.Gender == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetGender())
	return n
}

func (x *CreateReserverReq) sizeField4() (n int) {
	if x.Relation == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetRelation())
	return n
}

func (x *CreateReserverReq) sizeField5() (n int) {
	if x.Phone == nil {
		return n
	}
	n += fastpb.SizeString(5, x.GetPhone())
	return n
}

func (x *CreateReserverReq) sizeField6() (n int) {
	if x.Email == nil {
		return n
	}
	n += fastpb.SizeString(6, x.GetEmail())
	return n
}

func (x *CreateReserverReq) sizeField7() (n int) {
	if x.Birth == nil {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetBirth())
	return n
}

func (x *DeleteReserverReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteReserverReq) sizeField1() (n int) {
	if x.ReserverId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetReserverId())
	return n
}

func (x *UpdateReserverReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateReserverReq) sizeField1() (n int) {
	if x.Reserver == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetReserver())
	return n
}

func (x *ListReserversReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListReserversReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *ListReserversReq) sizeField2() (n int) {
	if x.Paging == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPaging())
	return n
}

func (x *ListReserversResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *ListReserversResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *ListReserversResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *ListReserversResp) sizeField3() (n int) {
	if x.Reservers == nil {
		return n
	}
	for i := range x.GetReservers() {
		n += fastpb.SizeMessage(3, x.GetReservers()[i])
	}
	return n
}

func (x *ListReserversResp) sizeField4() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetTotal())
	return n
}

func (x *CreateBookRecordReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *CreateBookRecordReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *CreateBookRecordReq) sizeField2() (n int) {
	if x.ActivityId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetActivityId())
	return n
}

func (x *CreateBookRecordReq) sizeField3() (n int) {
	if len(x.ReserverIds) == 0 {
		return n
	}
	for i := range x.GetReserverIds() {
		n += fastpb.SizeString(3, x.GetReserverIds()[i])
	}
	return n
}

func (x *CreateBookRecordReq) sizeField4() (n int) {
	if x.Arrival == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetArrival())
	return n
}

func (x *CreateBookRecordReq) sizeField5() (n int) {
	if x.Remark == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetRemark())
	return n
}

func (x *CancelBookRecordReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CancelBookRecordReq) sizeField1() (n int) {
	if x.BookRecordId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetBookRecordId())
	return n
}

func (x *CancelBookRecordReq) sizeField2() (n int) {
	if x.ReserverId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetReserverId())
	return n
}

func (x *GetBookRecordReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetBookRecordReq) sizeField1() (n int) {
	if x.BookRecordId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetBookRecordId())
	return n
}

func (x *GetBookRecordResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetBookRecordResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *GetBookRecordResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *GetBookRecordResp) sizeField3() (n int) {
	if x.Record == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetRecord())
	return n
}

func (x *ListBookRecordsByUserReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListBookRecordsByUserReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *ListBookRecordsByUserReq) sizeField2() (n int) {
	if x.Paging == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPaging())
	return n
}

func (x *ListBookRecordsByUserResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *ListBookRecordsByUserResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *ListBookRecordsByUserResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *ListBookRecordsByUserResp) sizeField3() (n int) {
	if x.Records == nil {
		return n
	}
	for i := range x.GetRecords() {
		n += fastpb.SizeMessage(3, x.GetRecords()[i])
	}
	return n
}

func (x *ListBookRecordsByUserResp) sizeField4() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetTotal())
	return n
}

func (x *CreateReceiptReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CreateReceiptReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *CreateReceiptReq) sizeField2() (n int) {
	if x.ActivityId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetActivityId())
	return n
}

func (x *CreateReceiptReq) sizeField3() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetMsg())
	return n
}

func (x *DeleteReceiptReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteReceiptReq) sizeField1() (n int) {
	if x.ReceiptId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetReceiptId())
	return n
}

func (x *ListReceiptsReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ListReceiptsReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *ListReceiptsReq) sizeField2() (n int) {
	if x.Paging == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPaging())
	return n
}

func (x *ListReceiptsResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *ListReceiptsResp) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *ListReceiptsResp) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

func (x *ListReceiptsResp) sizeField3() (n int) {
	if x.Receipts == nil {
		return n
	}
	for i := range x.GetReceipts() {
		n += fastpb.SizeMessage(3, x.GetReceipts()[i])
	}
	return n
}

func (x *ListReceiptsResp) sizeField4() (n int) {
	if x.Total == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetTotal())
	return n
}

func (x *MarkReceiptReadReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *MarkReceiptReadReq) sizeField1() (n int) {
	if x.ReceiptId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetReceiptId())
	return n
}

func (x *DoFavoriteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DoFavoriteReq) sizeField1() (n int) {
	if x.UserId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUserId())
	return n
}

func (x *DoFavoriteReq) sizeField2() (n int) {
	if x.ActivityId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetActivityId())
	return n
}

func (x *CancelFavoriteReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CancelFavoriteReq) sizeField1() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetId())
	return n
}

func (x *CreateViewReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CreateViewReq) sizeField1() (n int) {
	if x.TargetId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTargetId())
	return n
}

func (x *CreateViewReq) sizeField2() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetType())
	return n
}

func (x *IncViewReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *IncViewReq) sizeField1() (n int) {
	if x.TargetId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTargetId())
	return n
}

func (x *IncViewReq) sizeField2() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetType())
	return n
}

func (x *IncViewResp) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetFavoriteAndViewOfActivityReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetFavoriteAndViewOfActivityReq) sizeField1() (n int) {
	if x.ActivityId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetActivityId())
	return n
}

func (x *GetFavoriteAndViewOfActivityResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetFavoriteAndViewOfActivityResp) sizeField1() (n int) {
	if x.Favorite == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetFavorite())
	return n
}

func (x *GetFavoriteAndViewOfActivityResp) sizeField2() (n int) {
	if x.View == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetView())
	return n
}

func (x *GetViewOfMerchantReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetViewOfMerchantReq) sizeField1() (n int) {
	if x.MerchantId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetMerchantId())
	return n
}

func (x *GetViewOfMerchantResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetViewOfMerchantResp) sizeField1() (n int) {
	if x.View == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetView())
	return n
}

func (x *Response) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Response) sizeField1() (n int) {
	if x.Code == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCode())
	return n
}

func (x *Response) sizeField2() (n int) {
	if x.Msg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetMsg())
	return n
}

var fieldIDToName_User = map[int32]string{
	1:  "Id",
	2:  "MerchantId",
	3:  "Name",
	4:  "Phone",
	5:  "Email",
	6:  "Password",
	7:  "Gender",
	8:  "Birth",
	9:  "CreateTime",
	10: "UpdateTime",
	11: "DeleteTime",
	12: "Status",
	13: "Notice",
	14: "Description",
	15: "Avatar",
}

var fieldIDToName_Reserver = map[int32]string{
	1:  "Id",
	2:  "UserId",
	3:  "Name",
	4:  "Gender",
	5:  "Relation",
	6:  "Phone",
	7:  "Email",
	8:  "Birth",
	9:  "CreateTime",
	10: "UpdateTime",
	11: "DeleteTime",
	12: "Status",
}

var fieldIDToName_BookItem = map[int32]string{
	1: "ReserverId",
	2: "Cancel",
}

var fieldIDToName_BookRecord = map[int32]string{
	1:  "Id",
	2:  "ActivityId",
	3:  "UserId",
	4:  "Reservers",
	5:  "Arrival",
	6:  "Remark",
	7:  "CreateTime",
	8:  "UpdateTime",
	9:  "DeleteTime",
	10: "Status",
}

var fieldIDToName_Receipt = map[int32]string{
	1: "Id",
	2: "UserId",
	3: "ActivityId",
	4: "Msg",
	5: "CreateTime",
	6: "UpdateTime",
	7: "DeleteTime",
	8: "Status",
}

var fieldIDToName_Favorite = map[int32]string{
	1: "Id",
	2: "UserId",
	3: "ActivityId",
	4: "CreateTime",
	5: "UpdateTime",
	6: "DeleteTime",
	7: "Status",
}

var fieldIDToName_UserSignUpReq = map[int32]string{
	1: "MerchantId",
	2: "Name",
	3: "AuthId",
	4: "AuthType",
	5: "VerifyCode",
	6: "Password",
	7: "Gender",
}

var fieldIDToName_UserSignUpResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Id",
}

var fieldIDToName_UserLoginReq = map[int32]string{
	1: "AuthId",
	2: "AuthType",
	3: "VerifyCode",
	4: "Password",
	5: "MerchantId",
}

var fieldIDToName_UserLoginResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Id",
}

var fieldIDToName_GetUserInfoReq = map[int32]string{
	1: "UserId",
}

var fieldIDToName_GetUserInfoResp = map[int32]string{
	1:  "Code",
	2:  "Msg",
	3:  "Id",
	4:  "MerchantId",
	5:  "Name",
	6:  "Phone",
	7:  "Email",
	8:  "Gender",
	9:  "Birth",
	10: "CreateTime",
	11: "UpdateTime",
	12: "Status",
	13: "Notice",
	14: "Description",
	15: "Avatar",
}

var fieldIDToName_UpdateUserInfoReq = map[int32]string{
	1: "Id",
	2: "Name",
	3: "Gender",
	4: "Birth",
	5: "Description",
	6: "Avatar",
}

var fieldIDToName_SetPasswordReq = map[int32]string{
	1: "Id",
	2: "OldPassword",
	3: "NewPassword",
}

var fieldIDToName_CreateReserverReq = map[int32]string{
	1: "UserId",
	2: "Name",
	3: "Gender",
	4: "Relation",
	5: "Phone",
	6: "Email",
	7: "Birth",
}

var fieldIDToName_DeleteReserverReq = map[int32]string{
	1: "ReserverId",
}

var fieldIDToName_UpdateReserverReq = map[int32]string{
	1: "Reserver",
}

var fieldIDToName_ListReserversReq = map[int32]string{
	1: "UserId",
	2: "Paging",
}

var fieldIDToName_ListReserversResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Reservers",
	4: "Total",
}

var fieldIDToName_CreateBookRecordReq = map[int32]string{
	1: "UserId",
	2: "ActivityId",
	3: "ReserverIds",
	4: "Arrival",
	5: "Remark",
}

var fieldIDToName_CancelBookRecordReq = map[int32]string{
	1: "BookRecordId",
	2: "ReserverId",
}

var fieldIDToName_GetBookRecordReq = map[int32]string{
	1: "BookRecordId",
}

var fieldIDToName_GetBookRecordResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Record",
}

var fieldIDToName_ListBookRecordsByUserReq = map[int32]string{
	1: "UserId",
	2: "Paging",
}

var fieldIDToName_ListBookRecordsByUserResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Records",
	4: "Total",
}

var fieldIDToName_CreateReceiptReq = map[int32]string{
	1: "UserId",
	2: "ActivityId",
	3: "Msg",
}

var fieldIDToName_DeleteReceiptReq = map[int32]string{
	1: "ReceiptId",
}

var fieldIDToName_ListReceiptsReq = map[int32]string{
	1: "UserId",
	2: "Paging",
}

var fieldIDToName_ListReceiptsResp = map[int32]string{
	1: "Code",
	2: "Msg",
	3: "Receipts",
	4: "Total",
}

var fieldIDToName_MarkReceiptReadReq = map[int32]string{
	1: "ReceiptId",
}

var fieldIDToName_DoFavoriteReq = map[int32]string{
	1: "UserId",
	2: "ActivityId",
}

var fieldIDToName_CancelFavoriteReq = map[int32]string{
	1: "Id",
}

var fieldIDToName_CreateViewReq = map[int32]string{
	1: "TargetId",
	2: "Type",
}

var fieldIDToName_IncViewReq = map[int32]string{
	1: "TargetId",
	2: "Type",
}

var fieldIDToName_IncViewResp = map[int32]string{}

var fieldIDToName_GetFavoriteAndViewOfActivityReq = map[int32]string{
	1: "ActivityId",
}

var fieldIDToName_GetFavoriteAndViewOfActivityResp = map[int32]string{
	1: "Favorite",
	2: "View",
}

var fieldIDToName_GetViewOfMerchantReq = map[int32]string{
	1: "MerchantId",
}

var fieldIDToName_GetViewOfMerchantResp = map[int32]string{
	1: "View",
}

var fieldIDToName_Response = map[int32]string{
	1: "Code",
	2: "Msg",
}

var _ = basic.File_basic_paging_proto
