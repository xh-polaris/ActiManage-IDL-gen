// Code generated by Kitex v0.12.1. DO NOT EDIT.

package userservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	user "github.com/xh-polaris/ActiManage-IDL-gen/kitex_gen/user"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"UserSignUp": kitex.NewMethodInfo(
		userSignUpHandler,
		newUserSignUpArgs,
		newUserSignUpResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserLogin": kitex.NewMethodInfo(
		userLoginHandler,
		newUserLoginArgs,
		newUserLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newGetUserInfoArgs,
		newGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateUserInfo": kitex.NewMethodInfo(
		updateUserInfoHandler,
		newUpdateUserInfoArgs,
		newUpdateUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateReserver": kitex.NewMethodInfo(
		createReserverHandler,
		newCreateReserverArgs,
		newCreateReserverResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteReserver": kitex.NewMethodInfo(
		deleteReserverHandler,
		newDeleteReserverArgs,
		newDeleteReserverResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateReserver": kitex.NewMethodInfo(
		updateReserverHandler,
		newUpdateReserverArgs,
		newUpdateReserverResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListReservers": kitex.NewMethodInfo(
		listReserversHandler,
		newListReserversArgs,
		newListReserversResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateBooking": kitex.NewMethodInfo(
		createBookingHandler,
		newCreateBookingArgs,
		newCreateBookingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteBooking": kitex.NewMethodInfo(
		deleteBookingHandler,
		newDeleteBookingArgs,
		newDeleteBookingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetBookingDetail": kitex.NewMethodInfo(
		getBookingDetailHandler,
		newGetBookingDetailArgs,
		newGetBookingDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListBookRecordsByUser": kitex.NewMethodInfo(
		listBookRecordsByUserHandler,
		newListBookRecordsByUserArgs,
		newListBookRecordsByUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateReceipt": kitex.NewMethodInfo(
		createReceiptHandler,
		newCreateReceiptArgs,
		newCreateReceiptResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteReceipt": kitex.NewMethodInfo(
		deleteReceiptHandler,
		newDeleteReceiptArgs,
		newDeleteReceiptResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListReceipts": kitex.NewMethodInfo(
		listReceiptsHandler,
		newListReceiptsArgs,
		newListReceiptsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MarkReceiptRead": kitex.NewMethodInfo(
		markReceiptReadHandler,
		newMarkReceiptReadArgs,
		newMarkReceiptReadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateFavorite": kitex.NewMethodInfo(
		createFavoriteHandler,
		newCreateFavoriteArgs,
		newCreateFavoriteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelFavorite": kitex.NewMethodInfo(
		cancelFavoriteHandler,
		newCancelFavoriteArgs,
		newCancelFavoriteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	userServiceServiceInfo                = NewServiceInfo()
	userServiceServiceInfoForClient       = NewServiceInfoForClient()
	userServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func userSignUpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserSignUpReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserSignUp(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserSignUpArgs:
		success, err := handler.(user.UserService).UserSignUp(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserSignUpResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserSignUpArgs() interface{} {
	return &UserSignUpArgs{}
}

func newUserSignUpResult() interface{} {
	return &UserSignUpResult{}
}

type UserSignUpArgs struct {
	Req *user.UserSignUpReq
}

func (p *UserSignUpArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserSignUpReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UserSignUpArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UserSignUpArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UserSignUpArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserSignUpArgs) Unmarshal(in []byte) error {
	msg := new(user.UserSignUpReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserSignUpArgs_Req_DEFAULT *user.UserSignUpReq

func (p *UserSignUpArgs) GetReq() *user.UserSignUpReq {
	if !p.IsSetReq() {
		return UserSignUpArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserSignUpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserSignUpArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserSignUpResult struct {
	Success *user.UserSignUpResp
}

var UserSignUpResult_Success_DEFAULT *user.UserSignUpResp

func (p *UserSignUpResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserSignUpResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UserSignUpResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UserSignUpResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UserSignUpResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserSignUpResult) Unmarshal(in []byte) error {
	msg := new(user.UserSignUpResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserSignUpResult) GetSuccess() *user.UserSignUpResp {
	if !p.IsSetSuccess() {
		return UserSignUpResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserSignUpResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserSignUpResp)
}

func (p *UserSignUpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserSignUpResult) GetResult() interface{} {
	return p.Success
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserLoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserLogin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserLoginArgs:
		success, err := handler.(user.UserService).UserLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserLoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserLoginArgs() interface{} {
	return &UserLoginArgs{}
}

func newUserLoginResult() interface{} {
	return &UserLoginResult{}
}

type UserLoginArgs struct {
	Req *user.UserLoginReq
}

func (p *UserLoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserLoginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UserLoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UserLoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UserLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserLoginArgs) Unmarshal(in []byte) error {
	msg := new(user.UserLoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserLoginArgs_Req_DEFAULT *user.UserLoginReq

func (p *UserLoginArgs) GetReq() *user.UserLoginReq {
	if !p.IsSetReq() {
		return UserLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserLoginResult struct {
	Success *user.UserLoginResp
}

var UserLoginResult_Success_DEFAULT *user.UserLoginResp

func (p *UserLoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserLoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UserLoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UserLoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UserLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserLoginResult) Unmarshal(in []byte) error {
	msg := new(user.UserLoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserLoginResult) GetSuccess() *user.UserLoginResp {
	if !p.IsSetSuccess() {
		return UserLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserLoginResp)
}

func (p *UserLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserLoginResult) GetResult() interface{} {
	return p.Success
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).GetUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserInfoArgs:
		success, err := handler.(user.UserService).GetUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserInfoArgs() interface{} {
	return &GetUserInfoArgs{}
}

func newGetUserInfoResult() interface{} {
	return &GetUserInfoResult{}
}

type GetUserInfoArgs struct {
	Req *user.GetUserInfoReq
}

func (p *GetUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.GetUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserInfoArgs_Req_DEFAULT *user.GetUserInfoReq

func (p *GetUserInfoArgs) GetReq() *user.GetUserInfoReq {
	if !p.IsSetReq() {
		return GetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserInfoResult struct {
	Success *user.GetUserInfoResp
}

var GetUserInfoResult_Success_DEFAULT *user.GetUserInfoResp

func (p *GetUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetUserInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserInfoResult) Unmarshal(in []byte) error {
	msg := new(user.GetUserInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserInfoResult) GetSuccess() *user.GetUserInfoResp {
	if !p.IsSetSuccess() {
		return GetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetUserInfoResp)
}

func (p *GetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserInfoResult) GetResult() interface{} {
	return p.Success
}

func updateUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UpdateUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UpdateUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateUserInfoArgs:
		success, err := handler.(user.UserService).UpdateUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateUserInfoArgs() interface{} {
	return &UpdateUserInfoArgs{}
}

func newUpdateUserInfoResult() interface{} {
	return &UpdateUserInfoResult{}
}

type UpdateUserInfoArgs struct {
	Req *user.UpdateUserInfoReq
}

func (p *UpdateUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UpdateUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.UpdateUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateUserInfoArgs_Req_DEFAULT *user.UpdateUserInfoReq

func (p *UpdateUserInfoArgs) GetReq() *user.UpdateUserInfoReq {
	if !p.IsSetReq() {
		return UpdateUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateUserInfoResult struct {
	Success *user.Response
}

var UpdateUserInfoResult_Success_DEFAULT *user.Response

func (p *UpdateUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateUserInfoResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateUserInfoResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return UpdateUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *UpdateUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateUserInfoResult) GetResult() interface{} {
	return p.Success
}

func createReserverHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CreateReserverReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CreateReserver(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateReserverArgs:
		success, err := handler.(user.UserService).CreateReserver(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateReserverResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateReserverArgs() interface{} {
	return &CreateReserverArgs{}
}

func newCreateReserverResult() interface{} {
	return &CreateReserverResult{}
}

type CreateReserverArgs struct {
	Req *user.CreateReserverReq
}

func (p *CreateReserverArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CreateReserverReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateReserverArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateReserverArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateReserverArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateReserverArgs) Unmarshal(in []byte) error {
	msg := new(user.CreateReserverReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateReserverArgs_Req_DEFAULT *user.CreateReserverReq

func (p *CreateReserverArgs) GetReq() *user.CreateReserverReq {
	if !p.IsSetReq() {
		return CreateReserverArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateReserverArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateReserverArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateReserverResult struct {
	Success *user.Response
}

var CreateReserverResult_Success_DEFAULT *user.Response

func (p *CreateReserverResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateReserverResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateReserverResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateReserverResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateReserverResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateReserverResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return CreateReserverResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateReserverResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *CreateReserverResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateReserverResult) GetResult() interface{} {
	return p.Success
}

func deleteReserverHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.DeleteReserverReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).DeleteReserver(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteReserverArgs:
		success, err := handler.(user.UserService).DeleteReserver(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteReserverResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteReserverArgs() interface{} {
	return &DeleteReserverArgs{}
}

func newDeleteReserverResult() interface{} {
	return &DeleteReserverResult{}
}

type DeleteReserverArgs struct {
	Req *user.DeleteReserverReq
}

func (p *DeleteReserverArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.DeleteReserverReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteReserverArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteReserverArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteReserverArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteReserverArgs) Unmarshal(in []byte) error {
	msg := new(user.DeleteReserverReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteReserverArgs_Req_DEFAULT *user.DeleteReserverReq

func (p *DeleteReserverArgs) GetReq() *user.DeleteReserverReq {
	if !p.IsSetReq() {
		return DeleteReserverArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteReserverArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteReserverArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteReserverResult struct {
	Success *user.Response
}

var DeleteReserverResult_Success_DEFAULT *user.Response

func (p *DeleteReserverResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteReserverResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteReserverResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteReserverResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteReserverResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteReserverResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return DeleteReserverResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteReserverResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *DeleteReserverResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteReserverResult) GetResult() interface{} {
	return p.Success
}

func updateReserverHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UpdateReserverReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UpdateReserver(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateReserverArgs:
		success, err := handler.(user.UserService).UpdateReserver(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateReserverResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateReserverArgs() interface{} {
	return &UpdateReserverArgs{}
}

func newUpdateReserverResult() interface{} {
	return &UpdateReserverResult{}
}

type UpdateReserverArgs struct {
	Req *user.UpdateReserverReq
}

func (p *UpdateReserverArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UpdateReserverReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateReserverArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateReserverArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateReserverArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateReserverArgs) Unmarshal(in []byte) error {
	msg := new(user.UpdateReserverReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateReserverArgs_Req_DEFAULT *user.UpdateReserverReq

func (p *UpdateReserverArgs) GetReq() *user.UpdateReserverReq {
	if !p.IsSetReq() {
		return UpdateReserverArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateReserverArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateReserverArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateReserverResult struct {
	Success *user.Response
}

var UpdateReserverResult_Success_DEFAULT *user.Response

func (p *UpdateReserverResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateReserverResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateReserverResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateReserverResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateReserverResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateReserverResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return UpdateReserverResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateReserverResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *UpdateReserverResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateReserverResult) GetResult() interface{} {
	return p.Success
}

func listReserversHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.ListReserversReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).ListReservers(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListReserversArgs:
		success, err := handler.(user.UserService).ListReservers(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListReserversResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListReserversArgs() interface{} {
	return &ListReserversArgs{}
}

func newListReserversResult() interface{} {
	return &ListReserversResult{}
}

type ListReserversArgs struct {
	Req *user.ListReserversReq
}

func (p *ListReserversArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.ListReserversReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListReserversArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListReserversArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListReserversArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListReserversArgs) Unmarshal(in []byte) error {
	msg := new(user.ListReserversReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListReserversArgs_Req_DEFAULT *user.ListReserversReq

func (p *ListReserversArgs) GetReq() *user.ListReserversReq {
	if !p.IsSetReq() {
		return ListReserversArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListReserversArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListReserversArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListReserversResult struct {
	Success *user.ListReserversResp
}

var ListReserversResult_Success_DEFAULT *user.ListReserversResp

func (p *ListReserversResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.ListReserversResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListReserversResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListReserversResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListReserversResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListReserversResult) Unmarshal(in []byte) error {
	msg := new(user.ListReserversResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListReserversResult) GetSuccess() *user.ListReserversResp {
	if !p.IsSetSuccess() {
		return ListReserversResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListReserversResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.ListReserversResp)
}

func (p *ListReserversResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListReserversResult) GetResult() interface{} {
	return p.Success
}

func createBookingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CreateBookRecordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CreateBooking(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateBookingArgs:
		success, err := handler.(user.UserService).CreateBooking(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateBookingResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateBookingArgs() interface{} {
	return &CreateBookingArgs{}
}

func newCreateBookingResult() interface{} {
	return &CreateBookingResult{}
}

type CreateBookingArgs struct {
	Req *user.CreateBookRecordReq
}

func (p *CreateBookingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CreateBookRecordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateBookingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateBookingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateBookingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateBookingArgs) Unmarshal(in []byte) error {
	msg := new(user.CreateBookRecordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateBookingArgs_Req_DEFAULT *user.CreateBookRecordReq

func (p *CreateBookingArgs) GetReq() *user.CreateBookRecordReq {
	if !p.IsSetReq() {
		return CreateBookingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateBookingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateBookingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateBookingResult struct {
	Success *user.Response
}

var CreateBookingResult_Success_DEFAULT *user.Response

func (p *CreateBookingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateBookingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateBookingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateBookingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateBookingResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateBookingResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return CreateBookingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateBookingResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *CreateBookingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateBookingResult) GetResult() interface{} {
	return p.Success
}

func deleteBookingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.DeleteBookRecordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).DeleteBooking(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteBookingArgs:
		success, err := handler.(user.UserService).DeleteBooking(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteBookingResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteBookingArgs() interface{} {
	return &DeleteBookingArgs{}
}

func newDeleteBookingResult() interface{} {
	return &DeleteBookingResult{}
}

type DeleteBookingArgs struct {
	Req *user.DeleteBookRecordReq
}

func (p *DeleteBookingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.DeleteBookRecordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteBookingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteBookingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteBookingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteBookingArgs) Unmarshal(in []byte) error {
	msg := new(user.DeleteBookRecordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteBookingArgs_Req_DEFAULT *user.DeleteBookRecordReq

func (p *DeleteBookingArgs) GetReq() *user.DeleteBookRecordReq {
	if !p.IsSetReq() {
		return DeleteBookingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteBookingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteBookingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteBookingResult struct {
	Success *user.Response
}

var DeleteBookingResult_Success_DEFAULT *user.Response

func (p *DeleteBookingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteBookingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteBookingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteBookingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteBookingResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteBookingResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return DeleteBookingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteBookingResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *DeleteBookingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteBookingResult) GetResult() interface{} {
	return p.Success
}

func getBookingDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetBookRecordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).GetBookingDetail(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetBookingDetailArgs:
		success, err := handler.(user.UserService).GetBookingDetail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetBookingDetailResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetBookingDetailArgs() interface{} {
	return &GetBookingDetailArgs{}
}

func newGetBookingDetailResult() interface{} {
	return &GetBookingDetailResult{}
}

type GetBookingDetailArgs struct {
	Req *user.GetBookRecordReq
}

func (p *GetBookingDetailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetBookRecordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetBookingDetailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetBookingDetailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetBookingDetailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetBookingDetailArgs) Unmarshal(in []byte) error {
	msg := new(user.GetBookRecordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetBookingDetailArgs_Req_DEFAULT *user.GetBookRecordReq

func (p *GetBookingDetailArgs) GetReq() *user.GetBookRecordReq {
	if !p.IsSetReq() {
		return GetBookingDetailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetBookingDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetBookingDetailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetBookingDetailResult struct {
	Success *user.GetBookRecordResp
}

var GetBookingDetailResult_Success_DEFAULT *user.GetBookRecordResp

func (p *GetBookingDetailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetBookRecordResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetBookingDetailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetBookingDetailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetBookingDetailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetBookingDetailResult) Unmarshal(in []byte) error {
	msg := new(user.GetBookRecordResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetBookingDetailResult) GetSuccess() *user.GetBookRecordResp {
	if !p.IsSetSuccess() {
		return GetBookingDetailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetBookingDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetBookRecordResp)
}

func (p *GetBookingDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetBookingDetailResult) GetResult() interface{} {
	return p.Success
}

func listBookRecordsByUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.ListBookRecordsByUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).ListBookRecordsByUser(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListBookRecordsByUserArgs:
		success, err := handler.(user.UserService).ListBookRecordsByUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListBookRecordsByUserResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListBookRecordsByUserArgs() interface{} {
	return &ListBookRecordsByUserArgs{}
}

func newListBookRecordsByUserResult() interface{} {
	return &ListBookRecordsByUserResult{}
}

type ListBookRecordsByUserArgs struct {
	Req *user.ListBookRecordsByUserReq
}

func (p *ListBookRecordsByUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.ListBookRecordsByUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListBookRecordsByUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListBookRecordsByUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListBookRecordsByUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListBookRecordsByUserArgs) Unmarshal(in []byte) error {
	msg := new(user.ListBookRecordsByUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListBookRecordsByUserArgs_Req_DEFAULT *user.ListBookRecordsByUserReq

func (p *ListBookRecordsByUserArgs) GetReq() *user.ListBookRecordsByUserReq {
	if !p.IsSetReq() {
		return ListBookRecordsByUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListBookRecordsByUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListBookRecordsByUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListBookRecordsByUserResult struct {
	Success *user.ListBookRecordsByUserResp
}

var ListBookRecordsByUserResult_Success_DEFAULT *user.ListBookRecordsByUserResp

func (p *ListBookRecordsByUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.ListBookRecordsByUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListBookRecordsByUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListBookRecordsByUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListBookRecordsByUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListBookRecordsByUserResult) Unmarshal(in []byte) error {
	msg := new(user.ListBookRecordsByUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListBookRecordsByUserResult) GetSuccess() *user.ListBookRecordsByUserResp {
	if !p.IsSetSuccess() {
		return ListBookRecordsByUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListBookRecordsByUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.ListBookRecordsByUserResp)
}

func (p *ListBookRecordsByUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListBookRecordsByUserResult) GetResult() interface{} {
	return p.Success
}

func createReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CreateReceiptReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CreateReceipt(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateReceiptArgs:
		success, err := handler.(user.UserService).CreateReceipt(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateReceiptResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateReceiptArgs() interface{} {
	return &CreateReceiptArgs{}
}

func newCreateReceiptResult() interface{} {
	return &CreateReceiptResult{}
}

type CreateReceiptArgs struct {
	Req *user.CreateReceiptReq
}

func (p *CreateReceiptArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CreateReceiptReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateReceiptArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateReceiptArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateReceiptArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateReceiptArgs) Unmarshal(in []byte) error {
	msg := new(user.CreateReceiptReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateReceiptArgs_Req_DEFAULT *user.CreateReceiptReq

func (p *CreateReceiptArgs) GetReq() *user.CreateReceiptReq {
	if !p.IsSetReq() {
		return CreateReceiptArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateReceiptArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateReceiptResult struct {
	Success *user.Response
}

var CreateReceiptResult_Success_DEFAULT *user.Response

func (p *CreateReceiptResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateReceiptResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateReceiptResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateReceiptResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateReceiptResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateReceiptResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return CreateReceiptResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateReceiptResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *CreateReceiptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateReceiptResult) GetResult() interface{} {
	return p.Success
}

func deleteReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.DeleteReceiptReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).DeleteReceipt(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteReceiptArgs:
		success, err := handler.(user.UserService).DeleteReceipt(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteReceiptResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteReceiptArgs() interface{} {
	return &DeleteReceiptArgs{}
}

func newDeleteReceiptResult() interface{} {
	return &DeleteReceiptResult{}
}

type DeleteReceiptArgs struct {
	Req *user.DeleteReceiptReq
}

func (p *DeleteReceiptArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.DeleteReceiptReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteReceiptArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteReceiptArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteReceiptArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteReceiptArgs) Unmarshal(in []byte) error {
	msg := new(user.DeleteReceiptReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteReceiptArgs_Req_DEFAULT *user.DeleteReceiptReq

func (p *DeleteReceiptArgs) GetReq() *user.DeleteReceiptReq {
	if !p.IsSetReq() {
		return DeleteReceiptArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteReceiptArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteReceiptResult struct {
	Success *user.Response
}

var DeleteReceiptResult_Success_DEFAULT *user.Response

func (p *DeleteReceiptResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteReceiptResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteReceiptResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteReceiptResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteReceiptResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteReceiptResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return DeleteReceiptResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteReceiptResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *DeleteReceiptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteReceiptResult) GetResult() interface{} {
	return p.Success
}

func listReceiptsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.ListReceiptsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).ListReceipts(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListReceiptsArgs:
		success, err := handler.(user.UserService).ListReceipts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListReceiptsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListReceiptsArgs() interface{} {
	return &ListReceiptsArgs{}
}

func newListReceiptsResult() interface{} {
	return &ListReceiptsResult{}
}

type ListReceiptsArgs struct {
	Req *user.ListReceiptsReq
}

func (p *ListReceiptsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.ListReceiptsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListReceiptsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListReceiptsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListReceiptsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListReceiptsArgs) Unmarshal(in []byte) error {
	msg := new(user.ListReceiptsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListReceiptsArgs_Req_DEFAULT *user.ListReceiptsReq

func (p *ListReceiptsArgs) GetReq() *user.ListReceiptsReq {
	if !p.IsSetReq() {
		return ListReceiptsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListReceiptsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListReceiptsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListReceiptsResult struct {
	Success *user.ListReceiptsResp
}

var ListReceiptsResult_Success_DEFAULT *user.ListReceiptsResp

func (p *ListReceiptsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.ListReceiptsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListReceiptsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListReceiptsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListReceiptsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListReceiptsResult) Unmarshal(in []byte) error {
	msg := new(user.ListReceiptsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListReceiptsResult) GetSuccess() *user.ListReceiptsResp {
	if !p.IsSetSuccess() {
		return ListReceiptsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListReceiptsResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.ListReceiptsResp)
}

func (p *ListReceiptsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListReceiptsResult) GetResult() interface{} {
	return p.Success
}

func markReceiptReadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.MarkReceiptReadReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).MarkReceiptRead(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MarkReceiptReadArgs:
		success, err := handler.(user.UserService).MarkReceiptRead(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MarkReceiptReadResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMarkReceiptReadArgs() interface{} {
	return &MarkReceiptReadArgs{}
}

func newMarkReceiptReadResult() interface{} {
	return &MarkReceiptReadResult{}
}

type MarkReceiptReadArgs struct {
	Req *user.MarkReceiptReadReq
}

func (p *MarkReceiptReadArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.MarkReceiptReadReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MarkReceiptReadArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MarkReceiptReadArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MarkReceiptReadArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MarkReceiptReadArgs) Unmarshal(in []byte) error {
	msg := new(user.MarkReceiptReadReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MarkReceiptReadArgs_Req_DEFAULT *user.MarkReceiptReadReq

func (p *MarkReceiptReadArgs) GetReq() *user.MarkReceiptReadReq {
	if !p.IsSetReq() {
		return MarkReceiptReadArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MarkReceiptReadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MarkReceiptReadArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MarkReceiptReadResult struct {
	Success *user.Response
}

var MarkReceiptReadResult_Success_DEFAULT *user.Response

func (p *MarkReceiptReadResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MarkReceiptReadResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MarkReceiptReadResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MarkReceiptReadResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MarkReceiptReadResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MarkReceiptReadResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return MarkReceiptReadResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MarkReceiptReadResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *MarkReceiptReadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MarkReceiptReadResult) GetResult() interface{} {
	return p.Success
}

func createFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CreateFavoriteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CreateFavorite(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateFavoriteArgs:
		success, err := handler.(user.UserService).CreateFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateFavoriteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateFavoriteArgs() interface{} {
	return &CreateFavoriteArgs{}
}

func newCreateFavoriteResult() interface{} {
	return &CreateFavoriteResult{}
}

type CreateFavoriteArgs struct {
	Req *user.CreateFavoriteReq
}

func (p *CreateFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CreateFavoriteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(user.CreateFavoriteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateFavoriteArgs_Req_DEFAULT *user.CreateFavoriteReq

func (p *CreateFavoriteArgs) GetReq() *user.CreateFavoriteReq {
	if !p.IsSetReq() {
		return CreateFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateFavoriteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateFavoriteResult struct {
	Success *user.Response
}

var CreateFavoriteResult_Success_DEFAULT *user.Response

func (p *CreateFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateFavoriteResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateFavoriteResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return CreateFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *CreateFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateFavoriteResult) GetResult() interface{} {
	return p.Success
}

func cancelFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CancelFavoriteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CancelFavorite(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelFavoriteArgs:
		success, err := handler.(user.UserService).CancelFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelFavoriteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelFavoriteArgs() interface{} {
	return &CancelFavoriteArgs{}
}

func newCancelFavoriteResult() interface{} {
	return &CancelFavoriteResult{}
}

type CancelFavoriteArgs struct {
	Req *user.CancelFavoriteReq
}

func (p *CancelFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CancelFavoriteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(user.CancelFavoriteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelFavoriteArgs_Req_DEFAULT *user.CancelFavoriteReq

func (p *CancelFavoriteArgs) GetReq() *user.CancelFavoriteReq {
	if !p.IsSetReq() {
		return CancelFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelFavoriteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelFavoriteResult struct {
	Success *user.Response
}

var CancelFavoriteResult_Success_DEFAULT *user.Response

func (p *CancelFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelFavoriteResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelFavoriteResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return CancelFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *CancelFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelFavoriteResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserSignUp(ctx context.Context, Req *user.UserSignUpReq) (r *user.UserSignUpResp, err error) {
	var _args UserSignUpArgs
	_args.Req = Req
	var _result UserSignUpResult
	if err = p.c.Call(ctx, "UserSignUp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogin(ctx context.Context, Req *user.UserLoginReq) (r *user.UserLoginResp, err error) {
	var _args UserLoginArgs
	_args.Req = Req
	var _result UserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, Req *user.GetUserInfoReq) (r *user.GetUserInfoResp, err error) {
	var _args GetUserInfoArgs
	_args.Req = Req
	var _result GetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserInfo(ctx context.Context, Req *user.UpdateUserInfoReq) (r *user.Response, err error) {
	var _args UpdateUserInfoArgs
	_args.Req = Req
	var _result UpdateUserInfoResult
	if err = p.c.Call(ctx, "UpdateUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateReserver(ctx context.Context, Req *user.CreateReserverReq) (r *user.Response, err error) {
	var _args CreateReserverArgs
	_args.Req = Req
	var _result CreateReserverResult
	if err = p.c.Call(ctx, "CreateReserver", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteReserver(ctx context.Context, Req *user.DeleteReserverReq) (r *user.Response, err error) {
	var _args DeleteReserverArgs
	_args.Req = Req
	var _result DeleteReserverResult
	if err = p.c.Call(ctx, "DeleteReserver", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateReserver(ctx context.Context, Req *user.UpdateReserverReq) (r *user.Response, err error) {
	var _args UpdateReserverArgs
	_args.Req = Req
	var _result UpdateReserverResult
	if err = p.c.Call(ctx, "UpdateReserver", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListReservers(ctx context.Context, Req *user.ListReserversReq) (r *user.ListReserversResp, err error) {
	var _args ListReserversArgs
	_args.Req = Req
	var _result ListReserversResult
	if err = p.c.Call(ctx, "ListReservers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateBooking(ctx context.Context, Req *user.CreateBookRecordReq) (r *user.Response, err error) {
	var _args CreateBookingArgs
	_args.Req = Req
	var _result CreateBookingResult
	if err = p.c.Call(ctx, "CreateBooking", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteBooking(ctx context.Context, Req *user.DeleteBookRecordReq) (r *user.Response, err error) {
	var _args DeleteBookingArgs
	_args.Req = Req
	var _result DeleteBookingResult
	if err = p.c.Call(ctx, "DeleteBooking", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBookingDetail(ctx context.Context, Req *user.GetBookRecordReq) (r *user.GetBookRecordResp, err error) {
	var _args GetBookingDetailArgs
	_args.Req = Req
	var _result GetBookingDetailResult
	if err = p.c.Call(ctx, "GetBookingDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListBookRecordsByUser(ctx context.Context, Req *user.ListBookRecordsByUserReq) (r *user.ListBookRecordsByUserResp, err error) {
	var _args ListBookRecordsByUserArgs
	_args.Req = Req
	var _result ListBookRecordsByUserResult
	if err = p.c.Call(ctx, "ListBookRecordsByUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateReceipt(ctx context.Context, Req *user.CreateReceiptReq) (r *user.Response, err error) {
	var _args CreateReceiptArgs
	_args.Req = Req
	var _result CreateReceiptResult
	if err = p.c.Call(ctx, "CreateReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteReceipt(ctx context.Context, Req *user.DeleteReceiptReq) (r *user.Response, err error) {
	var _args DeleteReceiptArgs
	_args.Req = Req
	var _result DeleteReceiptResult
	if err = p.c.Call(ctx, "DeleteReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListReceipts(ctx context.Context, Req *user.ListReceiptsReq) (r *user.ListReceiptsResp, err error) {
	var _args ListReceiptsArgs
	_args.Req = Req
	var _result ListReceiptsResult
	if err = p.c.Call(ctx, "ListReceipts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MarkReceiptRead(ctx context.Context, Req *user.MarkReceiptReadReq) (r *user.Response, err error) {
	var _args MarkReceiptReadArgs
	_args.Req = Req
	var _result MarkReceiptReadResult
	if err = p.c.Call(ctx, "MarkReceiptRead", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateFavorite(ctx context.Context, Req *user.CreateFavoriteReq) (r *user.Response, err error) {
	var _args CreateFavoriteArgs
	_args.Req = Req
	var _result CreateFavoriteResult
	if err = p.c.Call(ctx, "CreateFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelFavorite(ctx context.Context, Req *user.CancelFavoriteReq) (r *user.Response, err error) {
	var _args CancelFavoriteArgs
	_args.Req = Req
	var _result CancelFavoriteResult
	if err = p.c.Call(ctx, "CancelFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
