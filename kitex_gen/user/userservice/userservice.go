// Code generated by Kitex v0.12.2. DO NOT EDIT.

package userservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	user "github.com/xh-polaris/ActiManage-IDL-gen/kitex_gen/user"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"UserSignUp": kitex.NewMethodInfo(
		userSignUpHandler,
		newUserSignUpArgs,
		newUserSignUpResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UserLogin": kitex.NewMethodInfo(
		userLoginHandler,
		newUserLoginArgs,
		newUserLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newGetUserInfoArgs,
		newGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateUserInfo": kitex.NewMethodInfo(
		updateUserInfoHandler,
		newUpdateUserInfoArgs,
		newUpdateUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SetPassword": kitex.NewMethodInfo(
		setPasswordHandler,
		newSetPasswordArgs,
		newSetPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SetNotice": kitex.NewMethodInfo(
		setNoticeHandler,
		newSetNoticeArgs,
		newSetNoticeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateReserver": kitex.NewMethodInfo(
		createReserverHandler,
		newCreateReserverArgs,
		newCreateReserverResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteReserver": kitex.NewMethodInfo(
		deleteReserverHandler,
		newDeleteReserverArgs,
		newDeleteReserverResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateReserver": kitex.NewMethodInfo(
		updateReserverHandler,
		newUpdateReserverArgs,
		newUpdateReserverResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListReservers": kitex.NewMethodInfo(
		listReserversHandler,
		newListReserversArgs,
		newListReserversResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateBookRecord": kitex.NewMethodInfo(
		createBookRecordHandler,
		newCreateBookRecordArgs,
		newCreateBookRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelBookRecord": kitex.NewMethodInfo(
		cancelBookRecordHandler,
		newCancelBookRecordArgs,
		newCancelBookRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetBookRecordDetail": kitex.NewMethodInfo(
		getBookRecordDetailHandler,
		newGetBookRecordDetailArgs,
		newGetBookRecordDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListBookRecordsByUser": kitex.NewMethodInfo(
		listBookRecordsByUserHandler,
		newListBookRecordsByUserArgs,
		newListBookRecordsByUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListBookRecordsByActivity": kitex.NewMethodInfo(
		listBookRecordsByActivityHandler,
		newListBookRecordsByActivityArgs,
		newListBookRecordsByActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CheckBookRecordByUserIdAndActivityId": kitex.NewMethodInfo(
		checkBookRecordByUserIdAndActivityIdHandler,
		newCheckBookRecordByUserIdAndActivityIdArgs,
		newCheckBookRecordByUserIdAndActivityIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateReceipt": kitex.NewMethodInfo(
		createReceiptHandler,
		newCreateReceiptArgs,
		newCreateReceiptResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteReceipt": kitex.NewMethodInfo(
		deleteReceiptHandler,
		newDeleteReceiptArgs,
		newDeleteReceiptResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListReceipts": kitex.NewMethodInfo(
		listReceiptsHandler,
		newListReceiptsArgs,
		newListReceiptsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MarkReceiptRead": kitex.NewMethodInfo(
		markReceiptReadHandler,
		newMarkReceiptReadArgs,
		newMarkReceiptReadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DoFavorite": kitex.NewMethodInfo(
		doFavoriteHandler,
		newDoFavoriteArgs,
		newDoFavoriteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelFavorite": kitex.NewMethodInfo(
		cancelFavoriteHandler,
		newCancelFavoriteArgs,
		newCancelFavoriteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateView": kitex.NewMethodInfo(
		createViewHandler,
		newCreateViewArgs,
		newCreateViewResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetFavoriteAndViewOfActivity": kitex.NewMethodInfo(
		getFavoriteAndViewOfActivityHandler,
		newGetFavoriteAndViewOfActivityArgs,
		newGetFavoriteAndViewOfActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetViewOfMerchant": kitex.NewMethodInfo(
		getViewOfMerchantHandler,
		newGetViewOfMerchantArgs,
		newGetViewOfMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListActivityIdsByView": kitex.NewMethodInfo(
		listActivityIdsByViewHandler,
		newListActivityIdsByViewArgs,
		newListActivityIdsByViewResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListMerchantIdByViewRank": kitex.NewMethodInfo(
		listMerchantIdByViewRankHandler,
		newListMerchantIdByViewRankArgs,
		newListMerchantIdByViewRankResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListMerchantIdByBookRecordRank": kitex.NewMethodInfo(
		listMerchantIdByBookRecordRankHandler,
		newListMerchantIdByBookRecordRankArgs,
		newListMerchantIdByBookRecordRankResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListActivityIdByBookRecordRank": kitex.NewMethodInfo(
		listActivityIdByBookRecordRankHandler,
		newListActivityIdByBookRecordRankArgs,
		newListActivityIdByBookRecordRankResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetViewDataByMerchant": kitex.NewMethodInfo(
		getViewDataByMerchantHandler,
		newGetViewDataByMerchantArgs,
		newGetViewDataByMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	userServiceServiceInfo                = NewServiceInfo()
	userServiceServiceInfoForClient       = NewServiceInfoForClient()
	userServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return userServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.2",
		Extra:           extra,
	}
	return svcInfo
}

func userSignUpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserSignUpReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserSignUp(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserSignUpArgs:
		success, err := handler.(user.UserService).UserSignUp(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserSignUpResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserSignUpArgs() interface{} {
	return &UserSignUpArgs{}
}

func newUserSignUpResult() interface{} {
	return &UserSignUpResult{}
}

type UserSignUpArgs struct {
	Req *user.UserSignUpReq
}

func (p *UserSignUpArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserSignUpReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UserSignUpArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UserSignUpArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UserSignUpArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserSignUpArgs) Unmarshal(in []byte) error {
	msg := new(user.UserSignUpReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserSignUpArgs_Req_DEFAULT *user.UserSignUpReq

func (p *UserSignUpArgs) GetReq() *user.UserSignUpReq {
	if !p.IsSetReq() {
		return UserSignUpArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserSignUpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserSignUpArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserSignUpResult struct {
	Success *user.UserSignUpResp
}

var UserSignUpResult_Success_DEFAULT *user.UserSignUpResp

func (p *UserSignUpResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserSignUpResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UserSignUpResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UserSignUpResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UserSignUpResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserSignUpResult) Unmarshal(in []byte) error {
	msg := new(user.UserSignUpResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserSignUpResult) GetSuccess() *user.UserSignUpResp {
	if !p.IsSetSuccess() {
		return UserSignUpResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserSignUpResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserSignUpResp)
}

func (p *UserSignUpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserSignUpResult) GetResult() interface{} {
	return p.Success
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UserLoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UserLogin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UserLoginArgs:
		success, err := handler.(user.UserService).UserLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UserLoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUserLoginArgs() interface{} {
	return &UserLoginArgs{}
}

func newUserLoginResult() interface{} {
	return &UserLoginResult{}
}

type UserLoginArgs struct {
	Req *user.UserLoginReq
}

func (p *UserLoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UserLoginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UserLoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UserLoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UserLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UserLoginArgs) Unmarshal(in []byte) error {
	msg := new(user.UserLoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UserLoginArgs_Req_DEFAULT *user.UserLoginReq

func (p *UserLoginArgs) GetReq() *user.UserLoginReq {
	if !p.IsSetReq() {
		return UserLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UserLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UserLoginResult struct {
	Success *user.UserLoginResp
}

var UserLoginResult_Success_DEFAULT *user.UserLoginResp

func (p *UserLoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UserLoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UserLoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UserLoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UserLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UserLoginResult) Unmarshal(in []byte) error {
	msg := new(user.UserLoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UserLoginResult) GetSuccess() *user.UserLoginResp {
	if !p.IsSetSuccess() {
		return UserLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UserLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UserLoginResp)
}

func (p *UserLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserLoginResult) GetResult() interface{} {
	return p.Success
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).GetUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserInfoArgs:
		success, err := handler.(user.UserService).GetUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserInfoArgs() interface{} {
	return &GetUserInfoArgs{}
}

func newGetUserInfoResult() interface{} {
	return &GetUserInfoResult{}
}

type GetUserInfoArgs struct {
	Req *user.GetUserInfoReq
}

func (p *GetUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.GetUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserInfoArgs_Req_DEFAULT *user.GetUserInfoReq

func (p *GetUserInfoArgs) GetReq() *user.GetUserInfoReq {
	if !p.IsSetReq() {
		return GetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserInfoResult struct {
	Success *user.GetUserInfoResp
}

var GetUserInfoResult_Success_DEFAULT *user.GetUserInfoResp

func (p *GetUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetUserInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserInfoResult) Unmarshal(in []byte) error {
	msg := new(user.GetUserInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserInfoResult) GetSuccess() *user.GetUserInfoResp {
	if !p.IsSetSuccess() {
		return GetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetUserInfoResp)
}

func (p *GetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserInfoResult) GetResult() interface{} {
	return p.Success
}

func updateUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UpdateUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UpdateUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateUserInfoArgs:
		success, err := handler.(user.UserService).UpdateUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateUserInfoArgs() interface{} {
	return &UpdateUserInfoArgs{}
}

func newUpdateUserInfoResult() interface{} {
	return &UpdateUserInfoResult{}
}

type UpdateUserInfoArgs struct {
	Req *user.UpdateUserInfoReq
}

func (p *UpdateUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UpdateUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(user.UpdateUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateUserInfoArgs_Req_DEFAULT *user.UpdateUserInfoReq

func (p *UpdateUserInfoArgs) GetReq() *user.UpdateUserInfoReq {
	if !p.IsSetReq() {
		return UpdateUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateUserInfoResult struct {
	Success *user.Response
}

var UpdateUserInfoResult_Success_DEFAULT *user.Response

func (p *UpdateUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateUserInfoResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateUserInfoResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return UpdateUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *UpdateUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateUserInfoResult) GetResult() interface{} {
	return p.Success
}

func setPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.SetPasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).SetPassword(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SetPasswordArgs:
		success, err := handler.(user.UserService).SetPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SetPasswordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSetPasswordArgs() interface{} {
	return &SetPasswordArgs{}
}

func newSetPasswordResult() interface{} {
	return &SetPasswordResult{}
}

type SetPasswordArgs struct {
	Req *user.SetPasswordReq
}

func (p *SetPasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.SetPasswordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SetPasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SetPasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SetPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SetPasswordArgs) Unmarshal(in []byte) error {
	msg := new(user.SetPasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SetPasswordArgs_Req_DEFAULT *user.SetPasswordReq

func (p *SetPasswordArgs) GetReq() *user.SetPasswordReq {
	if !p.IsSetReq() {
		return SetPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SetPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SetPasswordResult struct {
	Success *user.Response
}

var SetPasswordResult_Success_DEFAULT *user.Response

func (p *SetPasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SetPasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SetPasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SetPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SetPasswordResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SetPasswordResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return SetPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SetPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *SetPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetPasswordResult) GetResult() interface{} {
	return p.Success
}

func setNoticeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.SetNoticeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).SetNotice(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SetNoticeArgs:
		success, err := handler.(user.UserService).SetNotice(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SetNoticeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSetNoticeArgs() interface{} {
	return &SetNoticeArgs{}
}

func newSetNoticeResult() interface{} {
	return &SetNoticeResult{}
}

type SetNoticeArgs struct {
	Req *user.SetNoticeReq
}

func (p *SetNoticeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.SetNoticeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SetNoticeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SetNoticeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SetNoticeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SetNoticeArgs) Unmarshal(in []byte) error {
	msg := new(user.SetNoticeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SetNoticeArgs_Req_DEFAULT *user.SetNoticeReq

func (p *SetNoticeArgs) GetReq() *user.SetNoticeReq {
	if !p.IsSetReq() {
		return SetNoticeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SetNoticeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetNoticeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SetNoticeResult struct {
	Success *user.Response
}

var SetNoticeResult_Success_DEFAULT *user.Response

func (p *SetNoticeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SetNoticeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SetNoticeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SetNoticeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SetNoticeResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SetNoticeResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return SetNoticeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SetNoticeResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *SetNoticeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetNoticeResult) GetResult() interface{} {
	return p.Success
}

func createReserverHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CreateReserverReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CreateReserver(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateReserverArgs:
		success, err := handler.(user.UserService).CreateReserver(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateReserverResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateReserverArgs() interface{} {
	return &CreateReserverArgs{}
}

func newCreateReserverResult() interface{} {
	return &CreateReserverResult{}
}

type CreateReserverArgs struct {
	Req *user.CreateReserverReq
}

func (p *CreateReserverArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CreateReserverReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateReserverArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateReserverArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateReserverArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateReserverArgs) Unmarshal(in []byte) error {
	msg := new(user.CreateReserverReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateReserverArgs_Req_DEFAULT *user.CreateReserverReq

func (p *CreateReserverArgs) GetReq() *user.CreateReserverReq {
	if !p.IsSetReq() {
		return CreateReserverArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateReserverArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateReserverArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateReserverResult struct {
	Success *user.Response
}

var CreateReserverResult_Success_DEFAULT *user.Response

func (p *CreateReserverResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateReserverResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateReserverResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateReserverResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateReserverResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateReserverResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return CreateReserverResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateReserverResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *CreateReserverResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateReserverResult) GetResult() interface{} {
	return p.Success
}

func deleteReserverHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.DeleteReserverReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).DeleteReserver(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteReserverArgs:
		success, err := handler.(user.UserService).DeleteReserver(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteReserverResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteReserverArgs() interface{} {
	return &DeleteReserverArgs{}
}

func newDeleteReserverResult() interface{} {
	return &DeleteReserverResult{}
}

type DeleteReserverArgs struct {
	Req *user.DeleteReserverReq
}

func (p *DeleteReserverArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.DeleteReserverReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteReserverArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteReserverArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteReserverArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteReserverArgs) Unmarshal(in []byte) error {
	msg := new(user.DeleteReserverReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteReserverArgs_Req_DEFAULT *user.DeleteReserverReq

func (p *DeleteReserverArgs) GetReq() *user.DeleteReserverReq {
	if !p.IsSetReq() {
		return DeleteReserverArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteReserverArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteReserverArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteReserverResult struct {
	Success *user.Response
}

var DeleteReserverResult_Success_DEFAULT *user.Response

func (p *DeleteReserverResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteReserverResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteReserverResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteReserverResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteReserverResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteReserverResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return DeleteReserverResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteReserverResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *DeleteReserverResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteReserverResult) GetResult() interface{} {
	return p.Success
}

func updateReserverHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UpdateReserverReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UpdateReserver(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateReserverArgs:
		success, err := handler.(user.UserService).UpdateReserver(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateReserverResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateReserverArgs() interface{} {
	return &UpdateReserverArgs{}
}

func newUpdateReserverResult() interface{} {
	return &UpdateReserverResult{}
}

type UpdateReserverArgs struct {
	Req *user.UpdateReserverReq
}

func (p *UpdateReserverArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UpdateReserverReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateReserverArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateReserverArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateReserverArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateReserverArgs) Unmarshal(in []byte) error {
	msg := new(user.UpdateReserverReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateReserverArgs_Req_DEFAULT *user.UpdateReserverReq

func (p *UpdateReserverArgs) GetReq() *user.UpdateReserverReq {
	if !p.IsSetReq() {
		return UpdateReserverArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateReserverArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateReserverArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateReserverResult struct {
	Success *user.Response
}

var UpdateReserverResult_Success_DEFAULT *user.Response

func (p *UpdateReserverResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateReserverResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateReserverResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateReserverResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateReserverResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateReserverResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return UpdateReserverResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateReserverResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *UpdateReserverResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateReserverResult) GetResult() interface{} {
	return p.Success
}

func listReserversHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.ListReserversReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).ListReservers(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListReserversArgs:
		success, err := handler.(user.UserService).ListReservers(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListReserversResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListReserversArgs() interface{} {
	return &ListReserversArgs{}
}

func newListReserversResult() interface{} {
	return &ListReserversResult{}
}

type ListReserversArgs struct {
	Req *user.ListReserversReq
}

func (p *ListReserversArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.ListReserversReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListReserversArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListReserversArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListReserversArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListReserversArgs) Unmarshal(in []byte) error {
	msg := new(user.ListReserversReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListReserversArgs_Req_DEFAULT *user.ListReserversReq

func (p *ListReserversArgs) GetReq() *user.ListReserversReq {
	if !p.IsSetReq() {
		return ListReserversArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListReserversArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListReserversArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListReserversResult struct {
	Success *user.ListReserversResp
}

var ListReserversResult_Success_DEFAULT *user.ListReserversResp

func (p *ListReserversResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.ListReserversResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListReserversResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListReserversResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListReserversResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListReserversResult) Unmarshal(in []byte) error {
	msg := new(user.ListReserversResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListReserversResult) GetSuccess() *user.ListReserversResp {
	if !p.IsSetSuccess() {
		return ListReserversResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListReserversResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.ListReserversResp)
}

func (p *ListReserversResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListReserversResult) GetResult() interface{} {
	return p.Success
}

func createBookRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CreateBookRecordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CreateBookRecord(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateBookRecordArgs:
		success, err := handler.(user.UserService).CreateBookRecord(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateBookRecordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateBookRecordArgs() interface{} {
	return &CreateBookRecordArgs{}
}

func newCreateBookRecordResult() interface{} {
	return &CreateBookRecordResult{}
}

type CreateBookRecordArgs struct {
	Req *user.CreateBookRecordReq
}

func (p *CreateBookRecordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CreateBookRecordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateBookRecordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateBookRecordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateBookRecordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateBookRecordArgs) Unmarshal(in []byte) error {
	msg := new(user.CreateBookRecordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateBookRecordArgs_Req_DEFAULT *user.CreateBookRecordReq

func (p *CreateBookRecordArgs) GetReq() *user.CreateBookRecordReq {
	if !p.IsSetReq() {
		return CreateBookRecordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateBookRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateBookRecordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateBookRecordResult struct {
	Success *user.Response
}

var CreateBookRecordResult_Success_DEFAULT *user.Response

func (p *CreateBookRecordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateBookRecordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateBookRecordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateBookRecordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateBookRecordResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateBookRecordResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return CreateBookRecordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateBookRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *CreateBookRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateBookRecordResult) GetResult() interface{} {
	return p.Success
}

func cancelBookRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CancelBookRecordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CancelBookRecord(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelBookRecordArgs:
		success, err := handler.(user.UserService).CancelBookRecord(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelBookRecordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelBookRecordArgs() interface{} {
	return &CancelBookRecordArgs{}
}

func newCancelBookRecordResult() interface{} {
	return &CancelBookRecordResult{}
}

type CancelBookRecordArgs struct {
	Req *user.CancelBookRecordReq
}

func (p *CancelBookRecordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CancelBookRecordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelBookRecordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelBookRecordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelBookRecordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelBookRecordArgs) Unmarshal(in []byte) error {
	msg := new(user.CancelBookRecordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelBookRecordArgs_Req_DEFAULT *user.CancelBookRecordReq

func (p *CancelBookRecordArgs) GetReq() *user.CancelBookRecordReq {
	if !p.IsSetReq() {
		return CancelBookRecordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelBookRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelBookRecordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelBookRecordResult struct {
	Success *user.Response
}

var CancelBookRecordResult_Success_DEFAULT *user.Response

func (p *CancelBookRecordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelBookRecordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelBookRecordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelBookRecordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelBookRecordResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelBookRecordResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return CancelBookRecordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelBookRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *CancelBookRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelBookRecordResult) GetResult() interface{} {
	return p.Success
}

func getBookRecordDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetBookRecordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).GetBookRecordDetail(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetBookRecordDetailArgs:
		success, err := handler.(user.UserService).GetBookRecordDetail(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetBookRecordDetailResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetBookRecordDetailArgs() interface{} {
	return &GetBookRecordDetailArgs{}
}

func newGetBookRecordDetailResult() interface{} {
	return &GetBookRecordDetailResult{}
}

type GetBookRecordDetailArgs struct {
	Req *user.GetBookRecordReq
}

func (p *GetBookRecordDetailArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetBookRecordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetBookRecordDetailArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetBookRecordDetailArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetBookRecordDetailArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetBookRecordDetailArgs) Unmarshal(in []byte) error {
	msg := new(user.GetBookRecordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetBookRecordDetailArgs_Req_DEFAULT *user.GetBookRecordReq

func (p *GetBookRecordDetailArgs) GetReq() *user.GetBookRecordReq {
	if !p.IsSetReq() {
		return GetBookRecordDetailArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetBookRecordDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetBookRecordDetailArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetBookRecordDetailResult struct {
	Success *user.GetBookRecordResp
}

var GetBookRecordDetailResult_Success_DEFAULT *user.GetBookRecordResp

func (p *GetBookRecordDetailResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetBookRecordResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetBookRecordDetailResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetBookRecordDetailResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetBookRecordDetailResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetBookRecordDetailResult) Unmarshal(in []byte) error {
	msg := new(user.GetBookRecordResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetBookRecordDetailResult) GetSuccess() *user.GetBookRecordResp {
	if !p.IsSetSuccess() {
		return GetBookRecordDetailResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetBookRecordDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetBookRecordResp)
}

func (p *GetBookRecordDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetBookRecordDetailResult) GetResult() interface{} {
	return p.Success
}

func listBookRecordsByUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.ListBookRecordsByUserReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).ListBookRecordsByUser(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListBookRecordsByUserArgs:
		success, err := handler.(user.UserService).ListBookRecordsByUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListBookRecordsByUserResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListBookRecordsByUserArgs() interface{} {
	return &ListBookRecordsByUserArgs{}
}

func newListBookRecordsByUserResult() interface{} {
	return &ListBookRecordsByUserResult{}
}

type ListBookRecordsByUserArgs struct {
	Req *user.ListBookRecordsByUserReq
}

func (p *ListBookRecordsByUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.ListBookRecordsByUserReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListBookRecordsByUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListBookRecordsByUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListBookRecordsByUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListBookRecordsByUserArgs) Unmarshal(in []byte) error {
	msg := new(user.ListBookRecordsByUserReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListBookRecordsByUserArgs_Req_DEFAULT *user.ListBookRecordsByUserReq

func (p *ListBookRecordsByUserArgs) GetReq() *user.ListBookRecordsByUserReq {
	if !p.IsSetReq() {
		return ListBookRecordsByUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListBookRecordsByUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListBookRecordsByUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListBookRecordsByUserResult struct {
	Success *user.ListBookRecordsByUserResp
}

var ListBookRecordsByUserResult_Success_DEFAULT *user.ListBookRecordsByUserResp

func (p *ListBookRecordsByUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.ListBookRecordsByUserResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListBookRecordsByUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListBookRecordsByUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListBookRecordsByUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListBookRecordsByUserResult) Unmarshal(in []byte) error {
	msg := new(user.ListBookRecordsByUserResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListBookRecordsByUserResult) GetSuccess() *user.ListBookRecordsByUserResp {
	if !p.IsSetSuccess() {
		return ListBookRecordsByUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListBookRecordsByUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.ListBookRecordsByUserResp)
}

func (p *ListBookRecordsByUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListBookRecordsByUserResult) GetResult() interface{} {
	return p.Success
}

func listBookRecordsByActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.ListBookRecordsByActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).ListBookRecordsByActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListBookRecordsByActivityArgs:
		success, err := handler.(user.UserService).ListBookRecordsByActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListBookRecordsByActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListBookRecordsByActivityArgs() interface{} {
	return &ListBookRecordsByActivityArgs{}
}

func newListBookRecordsByActivityResult() interface{} {
	return &ListBookRecordsByActivityResult{}
}

type ListBookRecordsByActivityArgs struct {
	Req *user.ListBookRecordsByActivityReq
}

func (p *ListBookRecordsByActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.ListBookRecordsByActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListBookRecordsByActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListBookRecordsByActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListBookRecordsByActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListBookRecordsByActivityArgs) Unmarshal(in []byte) error {
	msg := new(user.ListBookRecordsByActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListBookRecordsByActivityArgs_Req_DEFAULT *user.ListBookRecordsByActivityReq

func (p *ListBookRecordsByActivityArgs) GetReq() *user.ListBookRecordsByActivityReq {
	if !p.IsSetReq() {
		return ListBookRecordsByActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListBookRecordsByActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListBookRecordsByActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListBookRecordsByActivityResult struct {
	Success *user.ListBookRecordsByActivityResp
}

var ListBookRecordsByActivityResult_Success_DEFAULT *user.ListBookRecordsByActivityResp

func (p *ListBookRecordsByActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.ListBookRecordsByActivityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListBookRecordsByActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListBookRecordsByActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListBookRecordsByActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListBookRecordsByActivityResult) Unmarshal(in []byte) error {
	msg := new(user.ListBookRecordsByActivityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListBookRecordsByActivityResult) GetSuccess() *user.ListBookRecordsByActivityResp {
	if !p.IsSetSuccess() {
		return ListBookRecordsByActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListBookRecordsByActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.ListBookRecordsByActivityResp)
}

func (p *ListBookRecordsByActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListBookRecordsByActivityResult) GetResult() interface{} {
	return p.Success
}

func checkBookRecordByUserIdAndActivityIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CheckBookRecordByUserIdAndActivityIdReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CheckBookRecordByUserIdAndActivityId(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CheckBookRecordByUserIdAndActivityIdArgs:
		success, err := handler.(user.UserService).CheckBookRecordByUserIdAndActivityId(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckBookRecordByUserIdAndActivityIdResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCheckBookRecordByUserIdAndActivityIdArgs() interface{} {
	return &CheckBookRecordByUserIdAndActivityIdArgs{}
}

func newCheckBookRecordByUserIdAndActivityIdResult() interface{} {
	return &CheckBookRecordByUserIdAndActivityIdResult{}
}

type CheckBookRecordByUserIdAndActivityIdArgs struct {
	Req *user.CheckBookRecordByUserIdAndActivityIdReq
}

func (p *CheckBookRecordByUserIdAndActivityIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CheckBookRecordByUserIdAndActivityIdReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckBookRecordByUserIdAndActivityIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckBookRecordByUserIdAndActivityIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckBookRecordByUserIdAndActivityIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CheckBookRecordByUserIdAndActivityIdArgs) Unmarshal(in []byte) error {
	msg := new(user.CheckBookRecordByUserIdAndActivityIdReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckBookRecordByUserIdAndActivityIdArgs_Req_DEFAULT *user.CheckBookRecordByUserIdAndActivityIdReq

func (p *CheckBookRecordByUserIdAndActivityIdArgs) GetReq() *user.CheckBookRecordByUserIdAndActivityIdReq {
	if !p.IsSetReq() {
		return CheckBookRecordByUserIdAndActivityIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckBookRecordByUserIdAndActivityIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CheckBookRecordByUserIdAndActivityIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CheckBookRecordByUserIdAndActivityIdResult struct {
	Success *user.CheckBookRecordByUserIdAndActivityIdResp
}

var CheckBookRecordByUserIdAndActivityIdResult_Success_DEFAULT *user.CheckBookRecordByUserIdAndActivityIdResp

func (p *CheckBookRecordByUserIdAndActivityIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.CheckBookRecordByUserIdAndActivityIdResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckBookRecordByUserIdAndActivityIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckBookRecordByUserIdAndActivityIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckBookRecordByUserIdAndActivityIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CheckBookRecordByUserIdAndActivityIdResult) Unmarshal(in []byte) error {
	msg := new(user.CheckBookRecordByUserIdAndActivityIdResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckBookRecordByUserIdAndActivityIdResult) GetSuccess() *user.CheckBookRecordByUserIdAndActivityIdResp {
	if !p.IsSetSuccess() {
		return CheckBookRecordByUserIdAndActivityIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckBookRecordByUserIdAndActivityIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.CheckBookRecordByUserIdAndActivityIdResp)
}

func (p *CheckBookRecordByUserIdAndActivityIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CheckBookRecordByUserIdAndActivityIdResult) GetResult() interface{} {
	return p.Success
}

func createReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CreateReceiptReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CreateReceipt(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateReceiptArgs:
		success, err := handler.(user.UserService).CreateReceipt(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateReceiptResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateReceiptArgs() interface{} {
	return &CreateReceiptArgs{}
}

func newCreateReceiptResult() interface{} {
	return &CreateReceiptResult{}
}

type CreateReceiptArgs struct {
	Req *user.CreateReceiptReq
}

func (p *CreateReceiptArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CreateReceiptReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateReceiptArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateReceiptArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateReceiptArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateReceiptArgs) Unmarshal(in []byte) error {
	msg := new(user.CreateReceiptReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateReceiptArgs_Req_DEFAULT *user.CreateReceiptReq

func (p *CreateReceiptArgs) GetReq() *user.CreateReceiptReq {
	if !p.IsSetReq() {
		return CreateReceiptArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateReceiptArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateReceiptResult struct {
	Success *user.Response
}

var CreateReceiptResult_Success_DEFAULT *user.Response

func (p *CreateReceiptResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateReceiptResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateReceiptResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateReceiptResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateReceiptResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateReceiptResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return CreateReceiptResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateReceiptResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *CreateReceiptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateReceiptResult) GetResult() interface{} {
	return p.Success
}

func deleteReceiptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.DeleteReceiptReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).DeleteReceipt(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteReceiptArgs:
		success, err := handler.(user.UserService).DeleteReceipt(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteReceiptResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteReceiptArgs() interface{} {
	return &DeleteReceiptArgs{}
}

func newDeleteReceiptResult() interface{} {
	return &DeleteReceiptResult{}
}

type DeleteReceiptArgs struct {
	Req *user.DeleteReceiptReq
}

func (p *DeleteReceiptArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.DeleteReceiptReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteReceiptArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteReceiptArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteReceiptArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteReceiptArgs) Unmarshal(in []byte) error {
	msg := new(user.DeleteReceiptReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteReceiptArgs_Req_DEFAULT *user.DeleteReceiptReq

func (p *DeleteReceiptArgs) GetReq() *user.DeleteReceiptReq {
	if !p.IsSetReq() {
		return DeleteReceiptArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteReceiptArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteReceiptArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteReceiptResult struct {
	Success *user.Response
}

var DeleteReceiptResult_Success_DEFAULT *user.Response

func (p *DeleteReceiptResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteReceiptResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteReceiptResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteReceiptResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteReceiptResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteReceiptResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return DeleteReceiptResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteReceiptResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *DeleteReceiptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteReceiptResult) GetResult() interface{} {
	return p.Success
}

func listReceiptsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.ListReceiptsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).ListReceipts(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListReceiptsArgs:
		success, err := handler.(user.UserService).ListReceipts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListReceiptsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListReceiptsArgs() interface{} {
	return &ListReceiptsArgs{}
}

func newListReceiptsResult() interface{} {
	return &ListReceiptsResult{}
}

type ListReceiptsArgs struct {
	Req *user.ListReceiptsReq
}

func (p *ListReceiptsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.ListReceiptsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListReceiptsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListReceiptsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListReceiptsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListReceiptsArgs) Unmarshal(in []byte) error {
	msg := new(user.ListReceiptsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListReceiptsArgs_Req_DEFAULT *user.ListReceiptsReq

func (p *ListReceiptsArgs) GetReq() *user.ListReceiptsReq {
	if !p.IsSetReq() {
		return ListReceiptsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListReceiptsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListReceiptsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListReceiptsResult struct {
	Success *user.ListReceiptsResp
}

var ListReceiptsResult_Success_DEFAULT *user.ListReceiptsResp

func (p *ListReceiptsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.ListReceiptsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListReceiptsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListReceiptsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListReceiptsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListReceiptsResult) Unmarshal(in []byte) error {
	msg := new(user.ListReceiptsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListReceiptsResult) GetSuccess() *user.ListReceiptsResp {
	if !p.IsSetSuccess() {
		return ListReceiptsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListReceiptsResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.ListReceiptsResp)
}

func (p *ListReceiptsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListReceiptsResult) GetResult() interface{} {
	return p.Success
}

func markReceiptReadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.MarkReceiptReadReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).MarkReceiptRead(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MarkReceiptReadArgs:
		success, err := handler.(user.UserService).MarkReceiptRead(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MarkReceiptReadResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMarkReceiptReadArgs() interface{} {
	return &MarkReceiptReadArgs{}
}

func newMarkReceiptReadResult() interface{} {
	return &MarkReceiptReadResult{}
}

type MarkReceiptReadArgs struct {
	Req *user.MarkReceiptReadReq
}

func (p *MarkReceiptReadArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.MarkReceiptReadReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MarkReceiptReadArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MarkReceiptReadArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MarkReceiptReadArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MarkReceiptReadArgs) Unmarshal(in []byte) error {
	msg := new(user.MarkReceiptReadReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MarkReceiptReadArgs_Req_DEFAULT *user.MarkReceiptReadReq

func (p *MarkReceiptReadArgs) GetReq() *user.MarkReceiptReadReq {
	if !p.IsSetReq() {
		return MarkReceiptReadArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MarkReceiptReadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MarkReceiptReadArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MarkReceiptReadResult struct {
	Success *user.Response
}

var MarkReceiptReadResult_Success_DEFAULT *user.Response

func (p *MarkReceiptReadResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MarkReceiptReadResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MarkReceiptReadResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MarkReceiptReadResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MarkReceiptReadResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MarkReceiptReadResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return MarkReceiptReadResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MarkReceiptReadResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *MarkReceiptReadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MarkReceiptReadResult) GetResult() interface{} {
	return p.Success
}

func doFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.DoFavoriteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).DoFavorite(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DoFavoriteArgs:
		success, err := handler.(user.UserService).DoFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DoFavoriteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDoFavoriteArgs() interface{} {
	return &DoFavoriteArgs{}
}

func newDoFavoriteResult() interface{} {
	return &DoFavoriteResult{}
}

type DoFavoriteArgs struct {
	Req *user.DoFavoriteReq
}

func (p *DoFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.DoFavoriteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DoFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DoFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DoFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DoFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(user.DoFavoriteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DoFavoriteArgs_Req_DEFAULT *user.DoFavoriteReq

func (p *DoFavoriteArgs) GetReq() *user.DoFavoriteReq {
	if !p.IsSetReq() {
		return DoFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DoFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DoFavoriteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DoFavoriteResult struct {
	Success *user.Response
}

var DoFavoriteResult_Success_DEFAULT *user.Response

func (p *DoFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DoFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DoFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DoFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DoFavoriteResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DoFavoriteResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return DoFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DoFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *DoFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoFavoriteResult) GetResult() interface{} {
	return p.Success
}

func cancelFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CancelFavoriteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CancelFavorite(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelFavoriteArgs:
		success, err := handler.(user.UserService).CancelFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelFavoriteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelFavoriteArgs() interface{} {
	return &CancelFavoriteArgs{}
}

func newCancelFavoriteResult() interface{} {
	return &CancelFavoriteResult{}
}

type CancelFavoriteArgs struct {
	Req *user.CancelFavoriteReq
}

func (p *CancelFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CancelFavoriteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(user.CancelFavoriteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelFavoriteArgs_Req_DEFAULT *user.CancelFavoriteReq

func (p *CancelFavoriteArgs) GetReq() *user.CancelFavoriteReq {
	if !p.IsSetReq() {
		return CancelFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelFavoriteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelFavoriteResult struct {
	Success *user.Response
}

var CancelFavoriteResult_Success_DEFAULT *user.Response

func (p *CancelFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelFavoriteResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelFavoriteResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return CancelFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *CancelFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelFavoriteResult) GetResult() interface{} {
	return p.Success
}

func createViewHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CreateViewReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CreateView(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateViewArgs:
		success, err := handler.(user.UserService).CreateView(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateViewResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateViewArgs() interface{} {
	return &CreateViewArgs{}
}

func newCreateViewResult() interface{} {
	return &CreateViewResult{}
}

type CreateViewArgs struct {
	Req *user.CreateViewReq
}

func (p *CreateViewArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CreateViewReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateViewArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateViewArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateViewArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateViewArgs) Unmarshal(in []byte) error {
	msg := new(user.CreateViewReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateViewArgs_Req_DEFAULT *user.CreateViewReq

func (p *CreateViewArgs) GetReq() *user.CreateViewReq {
	if !p.IsSetReq() {
		return CreateViewArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateViewArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateViewArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateViewResult struct {
	Success *user.Response
}

var CreateViewResult_Success_DEFAULT *user.Response

func (p *CreateViewResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateViewResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateViewResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateViewResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateViewResult) Unmarshal(in []byte) error {
	msg := new(user.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateViewResult) GetSuccess() *user.Response {
	if !p.IsSetSuccess() {
		return CreateViewResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateViewResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.Response)
}

func (p *CreateViewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateViewResult) GetResult() interface{} {
	return p.Success
}

func getFavoriteAndViewOfActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetFavoriteAndViewOfActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).GetFavoriteAndViewOfActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetFavoriteAndViewOfActivityArgs:
		success, err := handler.(user.UserService).GetFavoriteAndViewOfActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFavoriteAndViewOfActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetFavoriteAndViewOfActivityArgs() interface{} {
	return &GetFavoriteAndViewOfActivityArgs{}
}

func newGetFavoriteAndViewOfActivityResult() interface{} {
	return &GetFavoriteAndViewOfActivityResult{}
}

type GetFavoriteAndViewOfActivityArgs struct {
	Req *user.GetFavoriteAndViewOfActivityReq
}

func (p *GetFavoriteAndViewOfActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetFavoriteAndViewOfActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFavoriteAndViewOfActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFavoriteAndViewOfActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFavoriteAndViewOfActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetFavoriteAndViewOfActivityArgs) Unmarshal(in []byte) error {
	msg := new(user.GetFavoriteAndViewOfActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFavoriteAndViewOfActivityArgs_Req_DEFAULT *user.GetFavoriteAndViewOfActivityReq

func (p *GetFavoriteAndViewOfActivityArgs) GetReq() *user.GetFavoriteAndViewOfActivityReq {
	if !p.IsSetReq() {
		return GetFavoriteAndViewOfActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFavoriteAndViewOfActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetFavoriteAndViewOfActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetFavoriteAndViewOfActivityResult struct {
	Success *user.GetFavoriteAndViewOfActivityResp
}

var GetFavoriteAndViewOfActivityResult_Success_DEFAULT *user.GetFavoriteAndViewOfActivityResp

func (p *GetFavoriteAndViewOfActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetFavoriteAndViewOfActivityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFavoriteAndViewOfActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFavoriteAndViewOfActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFavoriteAndViewOfActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetFavoriteAndViewOfActivityResult) Unmarshal(in []byte) error {
	msg := new(user.GetFavoriteAndViewOfActivityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFavoriteAndViewOfActivityResult) GetSuccess() *user.GetFavoriteAndViewOfActivityResp {
	if !p.IsSetSuccess() {
		return GetFavoriteAndViewOfActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFavoriteAndViewOfActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetFavoriteAndViewOfActivityResp)
}

func (p *GetFavoriteAndViewOfActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetFavoriteAndViewOfActivityResult) GetResult() interface{} {
	return p.Success
}

func getViewOfMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetViewOfMerchantReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).GetViewOfMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetViewOfMerchantArgs:
		success, err := handler.(user.UserService).GetViewOfMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetViewOfMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetViewOfMerchantArgs() interface{} {
	return &GetViewOfMerchantArgs{}
}

func newGetViewOfMerchantResult() interface{} {
	return &GetViewOfMerchantResult{}
}

type GetViewOfMerchantArgs struct {
	Req *user.GetViewOfMerchantReq
}

func (p *GetViewOfMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetViewOfMerchantReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetViewOfMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetViewOfMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetViewOfMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetViewOfMerchantArgs) Unmarshal(in []byte) error {
	msg := new(user.GetViewOfMerchantReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetViewOfMerchantArgs_Req_DEFAULT *user.GetViewOfMerchantReq

func (p *GetViewOfMerchantArgs) GetReq() *user.GetViewOfMerchantReq {
	if !p.IsSetReq() {
		return GetViewOfMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetViewOfMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetViewOfMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetViewOfMerchantResult struct {
	Success *user.GetViewOfMerchantResp
}

var GetViewOfMerchantResult_Success_DEFAULT *user.GetViewOfMerchantResp

func (p *GetViewOfMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetViewOfMerchantResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetViewOfMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetViewOfMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetViewOfMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetViewOfMerchantResult) Unmarshal(in []byte) error {
	msg := new(user.GetViewOfMerchantResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetViewOfMerchantResult) GetSuccess() *user.GetViewOfMerchantResp {
	if !p.IsSetSuccess() {
		return GetViewOfMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetViewOfMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetViewOfMerchantResp)
}

func (p *GetViewOfMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetViewOfMerchantResult) GetResult() interface{} {
	return p.Success
}

func listActivityIdsByViewHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.ListActivityIdsByViewReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).ListActivityIdsByView(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListActivityIdsByViewArgs:
		success, err := handler.(user.UserService).ListActivityIdsByView(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListActivityIdsByViewResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListActivityIdsByViewArgs() interface{} {
	return &ListActivityIdsByViewArgs{}
}

func newListActivityIdsByViewResult() interface{} {
	return &ListActivityIdsByViewResult{}
}

type ListActivityIdsByViewArgs struct {
	Req *user.ListActivityIdsByViewReq
}

func (p *ListActivityIdsByViewArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.ListActivityIdsByViewReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListActivityIdsByViewArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListActivityIdsByViewArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListActivityIdsByViewArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListActivityIdsByViewArgs) Unmarshal(in []byte) error {
	msg := new(user.ListActivityIdsByViewReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListActivityIdsByViewArgs_Req_DEFAULT *user.ListActivityIdsByViewReq

func (p *ListActivityIdsByViewArgs) GetReq() *user.ListActivityIdsByViewReq {
	if !p.IsSetReq() {
		return ListActivityIdsByViewArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListActivityIdsByViewArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListActivityIdsByViewArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListActivityIdsByViewResult struct {
	Success *user.ListActivityIdsByViewResp
}

var ListActivityIdsByViewResult_Success_DEFAULT *user.ListActivityIdsByViewResp

func (p *ListActivityIdsByViewResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.ListActivityIdsByViewResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListActivityIdsByViewResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListActivityIdsByViewResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListActivityIdsByViewResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListActivityIdsByViewResult) Unmarshal(in []byte) error {
	msg := new(user.ListActivityIdsByViewResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListActivityIdsByViewResult) GetSuccess() *user.ListActivityIdsByViewResp {
	if !p.IsSetSuccess() {
		return ListActivityIdsByViewResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListActivityIdsByViewResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.ListActivityIdsByViewResp)
}

func (p *ListActivityIdsByViewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListActivityIdsByViewResult) GetResult() interface{} {
	return p.Success
}

func listMerchantIdByViewRankHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.ListMerchantIdsByViewRankReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).ListMerchantIdByViewRank(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListMerchantIdByViewRankArgs:
		success, err := handler.(user.UserService).ListMerchantIdByViewRank(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListMerchantIdByViewRankResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListMerchantIdByViewRankArgs() interface{} {
	return &ListMerchantIdByViewRankArgs{}
}

func newListMerchantIdByViewRankResult() interface{} {
	return &ListMerchantIdByViewRankResult{}
}

type ListMerchantIdByViewRankArgs struct {
	Req *user.ListMerchantIdsByViewRankReq
}

func (p *ListMerchantIdByViewRankArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.ListMerchantIdsByViewRankReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListMerchantIdByViewRankArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListMerchantIdByViewRankArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListMerchantIdByViewRankArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListMerchantIdByViewRankArgs) Unmarshal(in []byte) error {
	msg := new(user.ListMerchantIdsByViewRankReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListMerchantIdByViewRankArgs_Req_DEFAULT *user.ListMerchantIdsByViewRankReq

func (p *ListMerchantIdByViewRankArgs) GetReq() *user.ListMerchantIdsByViewRankReq {
	if !p.IsSetReq() {
		return ListMerchantIdByViewRankArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListMerchantIdByViewRankArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListMerchantIdByViewRankArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListMerchantIdByViewRankResult struct {
	Success *user.ListMerchantIdsByViewRankResp
}

var ListMerchantIdByViewRankResult_Success_DEFAULT *user.ListMerchantIdsByViewRankResp

func (p *ListMerchantIdByViewRankResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.ListMerchantIdsByViewRankResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListMerchantIdByViewRankResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListMerchantIdByViewRankResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListMerchantIdByViewRankResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListMerchantIdByViewRankResult) Unmarshal(in []byte) error {
	msg := new(user.ListMerchantIdsByViewRankResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListMerchantIdByViewRankResult) GetSuccess() *user.ListMerchantIdsByViewRankResp {
	if !p.IsSetSuccess() {
		return ListMerchantIdByViewRankResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListMerchantIdByViewRankResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.ListMerchantIdsByViewRankResp)
}

func (p *ListMerchantIdByViewRankResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListMerchantIdByViewRankResult) GetResult() interface{} {
	return p.Success
}

func listMerchantIdByBookRecordRankHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.ListMerchantIdsByBookRecordRankReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).ListMerchantIdByBookRecordRank(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListMerchantIdByBookRecordRankArgs:
		success, err := handler.(user.UserService).ListMerchantIdByBookRecordRank(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListMerchantIdByBookRecordRankResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListMerchantIdByBookRecordRankArgs() interface{} {
	return &ListMerchantIdByBookRecordRankArgs{}
}

func newListMerchantIdByBookRecordRankResult() interface{} {
	return &ListMerchantIdByBookRecordRankResult{}
}

type ListMerchantIdByBookRecordRankArgs struct {
	Req *user.ListMerchantIdsByBookRecordRankReq
}

func (p *ListMerchantIdByBookRecordRankArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.ListMerchantIdsByBookRecordRankReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListMerchantIdByBookRecordRankArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListMerchantIdByBookRecordRankArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListMerchantIdByBookRecordRankArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListMerchantIdByBookRecordRankArgs) Unmarshal(in []byte) error {
	msg := new(user.ListMerchantIdsByBookRecordRankReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListMerchantIdByBookRecordRankArgs_Req_DEFAULT *user.ListMerchantIdsByBookRecordRankReq

func (p *ListMerchantIdByBookRecordRankArgs) GetReq() *user.ListMerchantIdsByBookRecordRankReq {
	if !p.IsSetReq() {
		return ListMerchantIdByBookRecordRankArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListMerchantIdByBookRecordRankArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListMerchantIdByBookRecordRankArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListMerchantIdByBookRecordRankResult struct {
	Success *user.ListMerchantIdsByBookRecordRankResp
}

var ListMerchantIdByBookRecordRankResult_Success_DEFAULT *user.ListMerchantIdsByBookRecordRankResp

func (p *ListMerchantIdByBookRecordRankResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.ListMerchantIdsByBookRecordRankResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListMerchantIdByBookRecordRankResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListMerchantIdByBookRecordRankResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListMerchantIdByBookRecordRankResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListMerchantIdByBookRecordRankResult) Unmarshal(in []byte) error {
	msg := new(user.ListMerchantIdsByBookRecordRankResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListMerchantIdByBookRecordRankResult) GetSuccess() *user.ListMerchantIdsByBookRecordRankResp {
	if !p.IsSetSuccess() {
		return ListMerchantIdByBookRecordRankResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListMerchantIdByBookRecordRankResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.ListMerchantIdsByBookRecordRankResp)
}

func (p *ListMerchantIdByBookRecordRankResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListMerchantIdByBookRecordRankResult) GetResult() interface{} {
	return p.Success
}

func listActivityIdByBookRecordRankHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.ListActivityIdsByBookRecordRankReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).ListActivityIdByBookRecordRank(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListActivityIdByBookRecordRankArgs:
		success, err := handler.(user.UserService).ListActivityIdByBookRecordRank(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListActivityIdByBookRecordRankResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListActivityIdByBookRecordRankArgs() interface{} {
	return &ListActivityIdByBookRecordRankArgs{}
}

func newListActivityIdByBookRecordRankResult() interface{} {
	return &ListActivityIdByBookRecordRankResult{}
}

type ListActivityIdByBookRecordRankArgs struct {
	Req *user.ListActivityIdsByBookRecordRankReq
}

func (p *ListActivityIdByBookRecordRankArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.ListActivityIdsByBookRecordRankReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListActivityIdByBookRecordRankArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListActivityIdByBookRecordRankArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListActivityIdByBookRecordRankArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListActivityIdByBookRecordRankArgs) Unmarshal(in []byte) error {
	msg := new(user.ListActivityIdsByBookRecordRankReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListActivityIdByBookRecordRankArgs_Req_DEFAULT *user.ListActivityIdsByBookRecordRankReq

func (p *ListActivityIdByBookRecordRankArgs) GetReq() *user.ListActivityIdsByBookRecordRankReq {
	if !p.IsSetReq() {
		return ListActivityIdByBookRecordRankArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListActivityIdByBookRecordRankArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListActivityIdByBookRecordRankArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListActivityIdByBookRecordRankResult struct {
	Success *user.ListActivityIdsByBookRecordRankResp
}

var ListActivityIdByBookRecordRankResult_Success_DEFAULT *user.ListActivityIdsByBookRecordRankResp

func (p *ListActivityIdByBookRecordRankResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.ListActivityIdsByBookRecordRankResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListActivityIdByBookRecordRankResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListActivityIdByBookRecordRankResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListActivityIdByBookRecordRankResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListActivityIdByBookRecordRankResult) Unmarshal(in []byte) error {
	msg := new(user.ListActivityIdsByBookRecordRankResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListActivityIdByBookRecordRankResult) GetSuccess() *user.ListActivityIdsByBookRecordRankResp {
	if !p.IsSetSuccess() {
		return ListActivityIdByBookRecordRankResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListActivityIdByBookRecordRankResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.ListActivityIdsByBookRecordRankResp)
}

func (p *ListActivityIdByBookRecordRankResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListActivityIdByBookRecordRankResult) GetResult() interface{} {
	return p.Success
}

func getViewDataByMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetViewDataByMerchantReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).GetViewDataByMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetViewDataByMerchantArgs:
		success, err := handler.(user.UserService).GetViewDataByMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetViewDataByMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetViewDataByMerchantArgs() interface{} {
	return &GetViewDataByMerchantArgs{}
}

func newGetViewDataByMerchantResult() interface{} {
	return &GetViewDataByMerchantResult{}
}

type GetViewDataByMerchantArgs struct {
	Req *user.GetViewDataByMerchantReq
}

func (p *GetViewDataByMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetViewDataByMerchantReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetViewDataByMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetViewDataByMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetViewDataByMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetViewDataByMerchantArgs) Unmarshal(in []byte) error {
	msg := new(user.GetViewDataByMerchantReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetViewDataByMerchantArgs_Req_DEFAULT *user.GetViewDataByMerchantReq

func (p *GetViewDataByMerchantArgs) GetReq() *user.GetViewDataByMerchantReq {
	if !p.IsSetReq() {
		return GetViewDataByMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetViewDataByMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetViewDataByMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetViewDataByMerchantResult struct {
	Success *user.GetViewDataByMerchantResp
}

var GetViewDataByMerchantResult_Success_DEFAULT *user.GetViewDataByMerchantResp

func (p *GetViewDataByMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetViewDataByMerchantResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetViewDataByMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetViewDataByMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetViewDataByMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetViewDataByMerchantResult) Unmarshal(in []byte) error {
	msg := new(user.GetViewDataByMerchantResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetViewDataByMerchantResult) GetSuccess() *user.GetViewDataByMerchantResp {
	if !p.IsSetSuccess() {
		return GetViewDataByMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetViewDataByMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetViewDataByMerchantResp)
}

func (p *GetViewDataByMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetViewDataByMerchantResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserSignUp(ctx context.Context, Req *user.UserSignUpReq) (r *user.UserSignUpResp, err error) {
	var _args UserSignUpArgs
	_args.Req = Req
	var _result UserSignUpResult
	if err = p.c.Call(ctx, "UserSignUp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogin(ctx context.Context, Req *user.UserLoginReq) (r *user.UserLoginResp, err error) {
	var _args UserLoginArgs
	_args.Req = Req
	var _result UserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, Req *user.GetUserInfoReq) (r *user.GetUserInfoResp, err error) {
	var _args GetUserInfoArgs
	_args.Req = Req
	var _result GetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserInfo(ctx context.Context, Req *user.UpdateUserInfoReq) (r *user.Response, err error) {
	var _args UpdateUserInfoArgs
	_args.Req = Req
	var _result UpdateUserInfoResult
	if err = p.c.Call(ctx, "UpdateUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetPassword(ctx context.Context, Req *user.SetPasswordReq) (r *user.Response, err error) {
	var _args SetPasswordArgs
	_args.Req = Req
	var _result SetPasswordResult
	if err = p.c.Call(ctx, "SetPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SetNotice(ctx context.Context, Req *user.SetNoticeReq) (r *user.Response, err error) {
	var _args SetNoticeArgs
	_args.Req = Req
	var _result SetNoticeResult
	if err = p.c.Call(ctx, "SetNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateReserver(ctx context.Context, Req *user.CreateReserverReq) (r *user.Response, err error) {
	var _args CreateReserverArgs
	_args.Req = Req
	var _result CreateReserverResult
	if err = p.c.Call(ctx, "CreateReserver", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteReserver(ctx context.Context, Req *user.DeleteReserverReq) (r *user.Response, err error) {
	var _args DeleteReserverArgs
	_args.Req = Req
	var _result DeleteReserverResult
	if err = p.c.Call(ctx, "DeleteReserver", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateReserver(ctx context.Context, Req *user.UpdateReserverReq) (r *user.Response, err error) {
	var _args UpdateReserverArgs
	_args.Req = Req
	var _result UpdateReserverResult
	if err = p.c.Call(ctx, "UpdateReserver", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListReservers(ctx context.Context, Req *user.ListReserversReq) (r *user.ListReserversResp, err error) {
	var _args ListReserversArgs
	_args.Req = Req
	var _result ListReserversResult
	if err = p.c.Call(ctx, "ListReservers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateBookRecord(ctx context.Context, Req *user.CreateBookRecordReq) (r *user.Response, err error) {
	var _args CreateBookRecordArgs
	_args.Req = Req
	var _result CreateBookRecordResult
	if err = p.c.Call(ctx, "CreateBookRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelBookRecord(ctx context.Context, Req *user.CancelBookRecordReq) (r *user.Response, err error) {
	var _args CancelBookRecordArgs
	_args.Req = Req
	var _result CancelBookRecordResult
	if err = p.c.Call(ctx, "CancelBookRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetBookRecordDetail(ctx context.Context, Req *user.GetBookRecordReq) (r *user.GetBookRecordResp, err error) {
	var _args GetBookRecordDetailArgs
	_args.Req = Req
	var _result GetBookRecordDetailResult
	if err = p.c.Call(ctx, "GetBookRecordDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListBookRecordsByUser(ctx context.Context, Req *user.ListBookRecordsByUserReq) (r *user.ListBookRecordsByUserResp, err error) {
	var _args ListBookRecordsByUserArgs
	_args.Req = Req
	var _result ListBookRecordsByUserResult
	if err = p.c.Call(ctx, "ListBookRecordsByUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListBookRecordsByActivity(ctx context.Context, Req *user.ListBookRecordsByActivityReq) (r *user.ListBookRecordsByActivityResp, err error) {
	var _args ListBookRecordsByActivityArgs
	_args.Req = Req
	var _result ListBookRecordsByActivityResult
	if err = p.c.Call(ctx, "ListBookRecordsByActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckBookRecordByUserIdAndActivityId(ctx context.Context, Req *user.CheckBookRecordByUserIdAndActivityIdReq) (r *user.CheckBookRecordByUserIdAndActivityIdResp, err error) {
	var _args CheckBookRecordByUserIdAndActivityIdArgs
	_args.Req = Req
	var _result CheckBookRecordByUserIdAndActivityIdResult
	if err = p.c.Call(ctx, "CheckBookRecordByUserIdAndActivityId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateReceipt(ctx context.Context, Req *user.CreateReceiptReq) (r *user.Response, err error) {
	var _args CreateReceiptArgs
	_args.Req = Req
	var _result CreateReceiptResult
	if err = p.c.Call(ctx, "CreateReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteReceipt(ctx context.Context, Req *user.DeleteReceiptReq) (r *user.Response, err error) {
	var _args DeleteReceiptArgs
	_args.Req = Req
	var _result DeleteReceiptResult
	if err = p.c.Call(ctx, "DeleteReceipt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListReceipts(ctx context.Context, Req *user.ListReceiptsReq) (r *user.ListReceiptsResp, err error) {
	var _args ListReceiptsArgs
	_args.Req = Req
	var _result ListReceiptsResult
	if err = p.c.Call(ctx, "ListReceipts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MarkReceiptRead(ctx context.Context, Req *user.MarkReceiptReadReq) (r *user.Response, err error) {
	var _args MarkReceiptReadArgs
	_args.Req = Req
	var _result MarkReceiptReadResult
	if err = p.c.Call(ctx, "MarkReceiptRead", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DoFavorite(ctx context.Context, Req *user.DoFavoriteReq) (r *user.Response, err error) {
	var _args DoFavoriteArgs
	_args.Req = Req
	var _result DoFavoriteResult
	if err = p.c.Call(ctx, "DoFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelFavorite(ctx context.Context, Req *user.CancelFavoriteReq) (r *user.Response, err error) {
	var _args CancelFavoriteArgs
	_args.Req = Req
	var _result CancelFavoriteResult
	if err = p.c.Call(ctx, "CancelFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateView(ctx context.Context, Req *user.CreateViewReq) (r *user.Response, err error) {
	var _args CreateViewArgs
	_args.Req = Req
	var _result CreateViewResult
	if err = p.c.Call(ctx, "CreateView", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteAndViewOfActivity(ctx context.Context, Req *user.GetFavoriteAndViewOfActivityReq) (r *user.GetFavoriteAndViewOfActivityResp, err error) {
	var _args GetFavoriteAndViewOfActivityArgs
	_args.Req = Req
	var _result GetFavoriteAndViewOfActivityResult
	if err = p.c.Call(ctx, "GetFavoriteAndViewOfActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetViewOfMerchant(ctx context.Context, Req *user.GetViewOfMerchantReq) (r *user.GetViewOfMerchantResp, err error) {
	var _args GetViewOfMerchantArgs
	_args.Req = Req
	var _result GetViewOfMerchantResult
	if err = p.c.Call(ctx, "GetViewOfMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListActivityIdsByView(ctx context.Context, Req *user.ListActivityIdsByViewReq) (r *user.ListActivityIdsByViewResp, err error) {
	var _args ListActivityIdsByViewArgs
	_args.Req = Req
	var _result ListActivityIdsByViewResult
	if err = p.c.Call(ctx, "ListActivityIdsByView", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListMerchantIdByViewRank(ctx context.Context, Req *user.ListMerchantIdsByViewRankReq) (r *user.ListMerchantIdsByViewRankResp, err error) {
	var _args ListMerchantIdByViewRankArgs
	_args.Req = Req
	var _result ListMerchantIdByViewRankResult
	if err = p.c.Call(ctx, "ListMerchantIdByViewRank", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListMerchantIdByBookRecordRank(ctx context.Context, Req *user.ListMerchantIdsByBookRecordRankReq) (r *user.ListMerchantIdsByBookRecordRankResp, err error) {
	var _args ListMerchantIdByBookRecordRankArgs
	_args.Req = Req
	var _result ListMerchantIdByBookRecordRankResult
	if err = p.c.Call(ctx, "ListMerchantIdByBookRecordRank", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListActivityIdByBookRecordRank(ctx context.Context, Req *user.ListActivityIdsByBookRecordRankReq) (r *user.ListActivityIdsByBookRecordRankResp, err error) {
	var _args ListActivityIdByBookRecordRankArgs
	_args.Req = Req
	var _result ListActivityIdByBookRecordRankResult
	if err = p.c.Call(ctx, "ListActivityIdByBookRecordRank", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetViewDataByMerchant(ctx context.Context, Req *user.GetViewDataByMerchantReq) (r *user.GetViewDataByMerchantResp, err error) {
	var _args GetViewDataByMerchantArgs
	_args.Req = Req
	var _result GetViewDataByMerchantResult
	if err = p.c.Call(ctx, "GetViewDataByMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
