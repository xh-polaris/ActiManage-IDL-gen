// Code generated by Kitex v0.12.1. DO NOT EDIT.

package coreapiservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	core_api "github.com/xh-polaris/ActiManage-IDL-gen/kitex_gen/core_api"
	userr "github.com/xh-polaris/ActiManage-IDL-gen/kitex_gen/userr"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newLoginArgs,
		newLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SignUp": kitex.NewMethodInfo(
		signUpHandler,
		newSignUpArgs,
		newSignUpResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetSetting": kitex.NewMethodInfo(
		getSettingHandler,
		newGetSettingArgs,
		newGetSettingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListActivities": kitex.NewMethodInfo(
		listActivitiesHandler,
		newListActivitiesArgs,
		newListActivitiesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetActivity": kitex.NewMethodInfo(
		getActivityHandler,
		newGetActivityArgs,
		newGetActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DoFavorite": kitex.NewMethodInfo(
		doFavoriteHandler,
		newDoFavoriteArgs,
		newDoFavoriteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelFavorite": kitex.NewMethodInfo(
		cancelFavoriteHandler,
		newCancelFavoriteArgs,
		newCancelFavoriteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateBooking": kitex.NewMethodInfo(
		createBookingHandler,
		newCreateBookingArgs,
		newCreateBookingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CancelBookRecord": kitex.NewMethodInfo(
		cancelBookRecordHandler,
		newCancelBookRecordArgs,
		newCancelBookRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListActivitiesByBookRecords": kitex.NewMethodInfo(
		listActivitiesByBookRecordsHandler,
		newListActivitiesByBookRecordsArgs,
		newListActivitiesByBookRecordsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListReservers": kitex.NewMethodInfo(
		listReserversHandler,
		newListReserversArgs,
		newListReserversResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"CreateReserver": kitex.NewMethodInfo(
		createReserverHandler,
		newCreateReserverArgs,
		newCreateReserverResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteReserver": kitex.NewMethodInfo(
		deleteReserverHandler,
		newDeleteReserverArgs,
		newDeleteReserverResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetUserInfo": kitex.NewMethodInfo(
		getUserInfoHandler,
		newGetUserInfoArgs,
		newGetUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateUserInfo": kitex.NewMethodInfo(
		updateUserInfoHandler,
		newUpdateUserInfoArgs,
		newUpdateUserInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateNotice": kitex.NewMethodInfo(
		updateNoticeHandler,
		newUpdateNoticeArgs,
		newUpdateNoticeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantListActivities": kitex.NewMethodInfo(
		merchantListActivitiesHandler,
		newMerchantListActivitiesArgs,
		newMerchantListActivitiesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantCreateActivity": kitex.NewMethodInfo(
		merchantCreateActivityHandler,
		newMerchantCreateActivityArgs,
		newMerchantCreateActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantDeleteActivity": kitex.NewMethodInfo(
		merchantDeleteActivityHandler,
		newMerchantDeleteActivityArgs,
		newMerchantDeleteActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantTopActivity": kitex.NewMethodInfo(
		merchantTopActivityHandler,
		newMerchantTopActivityArgs,
		newMerchantTopActivityResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantLogin": kitex.NewMethodInfo(
		merchantLoginHandler,
		newMerchantLoginArgs,
		newMerchantLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantGetSetting": kitex.NewMethodInfo(
		merchantGetSettingHandler,
		newMerchantGetSettingArgs,
		newMerchantGetSettingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantUpdateSetting": kitex.NewMethodInfo(
		merchantUpdateSettingHandler,
		newMerchantUpdateSettingArgs,
		newMerchantUpdateSettingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantGetBookRecords": kitex.NewMethodInfo(
		merchantGetBookRecordsHandler,
		newMerchantGetBookRecordsArgs,
		newMerchantGetBookRecordsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantUpdateInfo": kitex.NewMethodInfo(
		merchantUpdateInfoHandler,
		newMerchantUpdateInfoArgs,
		newMerchantUpdateInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantGetInfo": kitex.NewMethodInfo(
		merchantGetInfoHandler,
		newMerchantGetInfoArgs,
		newMerchantGetInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MerchantSetPassword": kitex.NewMethodInfo(
		merchantSetPasswordHandler,
		newMerchantSetPasswordArgs,
		newMerchantSetPasswordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SystemLogin": kitex.NewMethodInfo(
		systemLoginHandler,
		newSystemLoginArgs,
		newSystemLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SystemListMerchant": kitex.NewMethodInfo(
		systemListMerchantHandler,
		newSystemListMerchantArgs,
		newSystemListMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SystemGetMerchant": kitex.NewMethodInfo(
		systemGetMerchantHandler,
		newSystemGetMerchantArgs,
		newSystemGetMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SystemCreateMerchant": kitex.NewMethodInfo(
		systemCreateMerchantHandler,
		newSystemCreateMerchantArgs,
		newSystemCreateMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SystemUpdateMerchant": kitex.NewMethodInfo(
		systemUpdateMerchantHandler,
		newSystemUpdateMerchantArgs,
		newSystemUpdateMerchantResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SystemGetDashboard": kitex.NewMethodInfo(
		systemGetDashboardHandler,
		newSystemGetDashboardArgs,
		newSystemGetDashboardResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SystemGetOverallDashboard": kitex.NewMethodInfo(
		systemGetOverallDashboardHandler,
		newSystemGetOverallDashboardArgs,
		newSystemGetOverallDashboardResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"StsApplySignedUrl": kitex.NewMethodInfo(
		stsApplySignedUrlHandler,
		newStsApplySignedUrlArgs,
		newStsApplySignedUrlResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"StsAIModify": kitex.NewMethodInfo(
		stsAIModifyHandler,
		newStsAIModifyArgs,
		newStsAIModifyResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	coreApiServiceServiceInfo                = NewServiceInfo()
	coreApiServiceServiceInfoForClient       = NewServiceInfoForClient()
	coreApiServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return coreApiServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return coreApiServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return coreApiServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CoreApiService"
	handlerType := (*userr.CoreApiService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "core_api",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.LoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).Login(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *LoginArgs:
		success, err := handler.(userr.CoreApiService).Login(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newLoginArgs() interface{} {
	return &LoginArgs{}
}

func newLoginResult() interface{} {
	return &LoginResult{}
}

type LoginArgs struct {
	Req *core_api.LoginReq
}

func (p *LoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.LoginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LoginArgs) Unmarshal(in []byte) error {
	msg := new(core_api.LoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginArgs_Req_DEFAULT *core_api.LoginReq

func (p *LoginArgs) GetReq() *core_api.LoginReq {
	if !p.IsSetReq() {
		return LoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoginResult struct {
	Success *core_api.LoginResp
}

var LoginResult_Success_DEFAULT *core_api.LoginResp

func (p *LoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.LoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LoginResult) Unmarshal(in []byte) error {
	msg := new(core_api.LoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginResult) GetSuccess() *core_api.LoginResp {
	if !p.IsSetSuccess() {
		return LoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.LoginResp)
}

func (p *LoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginResult) GetResult() interface{} {
	return p.Success
}

func signUpHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SignUpReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).SignUp(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SignUpArgs:
		success, err := handler.(userr.CoreApiService).SignUp(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SignUpResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSignUpArgs() interface{} {
	return &SignUpArgs{}
}

func newSignUpResult() interface{} {
	return &SignUpResult{}
}

type SignUpArgs struct {
	Req *core_api.SignUpReq
}

func (p *SignUpArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SignUpReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SignUpArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SignUpArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SignUpArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SignUpArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SignUpReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SignUpArgs_Req_DEFAULT *core_api.SignUpReq

func (p *SignUpArgs) GetReq() *core_api.SignUpReq {
	if !p.IsSetReq() {
		return SignUpArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SignUpArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SignUpArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SignUpResult struct {
	Success *core_api.SignUpResp
}

var SignUpResult_Success_DEFAULT *core_api.SignUpResp

func (p *SignUpResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SignUpResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SignUpResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SignUpResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SignUpResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SignUpResult) Unmarshal(in []byte) error {
	msg := new(core_api.SignUpResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SignUpResult) GetSuccess() *core_api.SignUpResp {
	if !p.IsSetSuccess() {
		return SignUpResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SignUpResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SignUpResp)
}

func (p *SignUpResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SignUpResult) GetResult() interface{} {
	return p.Success
}

func getSettingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetSettingReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).GetSetting(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetSettingArgs:
		success, err := handler.(userr.CoreApiService).GetSetting(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSettingResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetSettingArgs() interface{} {
	return &GetSettingArgs{}
}

func newGetSettingResult() interface{} {
	return &GetSettingResult{}
}

type GetSettingArgs struct {
	Req *core_api.GetSettingReq
}

func (p *GetSettingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetSettingReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSettingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSettingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSettingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSettingArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetSettingReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSettingArgs_Req_DEFAULT *core_api.GetSettingReq

func (p *GetSettingArgs) GetReq() *core_api.GetSettingReq {
	if !p.IsSetReq() {
		return GetSettingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSettingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSettingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSettingResult struct {
	Success *core_api.GetSettingResp
}

var GetSettingResult_Success_DEFAULT *core_api.GetSettingResp

func (p *GetSettingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetSettingResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSettingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSettingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSettingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSettingResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetSettingResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSettingResult) GetSuccess() *core_api.GetSettingResp {
	if !p.IsSetSuccess() {
		return GetSettingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSettingResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetSettingResp)
}

func (p *GetSettingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSettingResult) GetResult() interface{} {
	return p.Success
}

func listActivitiesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListActivitiesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).ListActivities(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListActivitiesArgs:
		success, err := handler.(userr.CoreApiService).ListActivities(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListActivitiesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListActivitiesArgs() interface{} {
	return &ListActivitiesArgs{}
}

func newListActivitiesResult() interface{} {
	return &ListActivitiesResult{}
}

type ListActivitiesArgs struct {
	Req *core_api.ListActivitiesReq
}

func (p *ListActivitiesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ListActivitiesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListActivitiesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListActivitiesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListActivitiesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListActivitiesArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListActivitiesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListActivitiesArgs_Req_DEFAULT *core_api.ListActivitiesReq

func (p *ListActivitiesArgs) GetReq() *core_api.ListActivitiesReq {
	if !p.IsSetReq() {
		return ListActivitiesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListActivitiesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListActivitiesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListActivitiesResult struct {
	Success *core_api.ListActivitiesResp
}

var ListActivitiesResult_Success_DEFAULT *core_api.ListActivitiesResp

func (p *ListActivitiesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ListActivitiesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListActivitiesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListActivitiesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListActivitiesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListActivitiesResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListActivitiesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListActivitiesResult) GetSuccess() *core_api.ListActivitiesResp {
	if !p.IsSetSuccess() {
		return ListActivitiesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListActivitiesResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListActivitiesResp)
}

func (p *ListActivitiesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListActivitiesResult) GetResult() interface{} {
	return p.Success
}

func getActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).GetActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetActivityArgs:
		success, err := handler.(userr.CoreApiService).GetActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetActivityArgs() interface{} {
	return &GetActivityArgs{}
}

func newGetActivityResult() interface{} {
	return &GetActivityResult{}
}

type GetActivityArgs struct {
	Req *core_api.GetActivityReq
}

func (p *GetActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetActivityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetActivityArgs_Req_DEFAULT *core_api.GetActivityReq

func (p *GetActivityArgs) GetReq() *core_api.GetActivityReq {
	if !p.IsSetReq() {
		return GetActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetActivityResult struct {
	Success *core_api.GetActivityResp
}

var GetActivityResult_Success_DEFAULT *core_api.GetActivityResp

func (p *GetActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetActivityResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetActivityResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetActivityResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetActivityResult) GetSuccess() *core_api.GetActivityResp {
	if !p.IsSetSuccess() {
		return GetActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetActivityResp)
}

func (p *GetActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetActivityResult) GetResult() interface{} {
	return p.Success
}

func doFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DoFavoriteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).DoFavorite(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DoFavoriteArgs:
		success, err := handler.(userr.CoreApiService).DoFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DoFavoriteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDoFavoriteArgs() interface{} {
	return &DoFavoriteArgs{}
}

func newDoFavoriteResult() interface{} {
	return &DoFavoriteResult{}
}

type DoFavoriteArgs struct {
	Req *core_api.DoFavoriteReq
}

func (p *DoFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DoFavoriteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DoFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DoFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DoFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DoFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DoFavoriteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DoFavoriteArgs_Req_DEFAULT *core_api.DoFavoriteReq

func (p *DoFavoriteArgs) GetReq() *core_api.DoFavoriteReq {
	if !p.IsSetReq() {
		return DoFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DoFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DoFavoriteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DoFavoriteResult struct {
	Success *core_api.Response
}

var DoFavoriteResult_Success_DEFAULT *core_api.Response

func (p *DoFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DoFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DoFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DoFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DoFavoriteResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DoFavoriteResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return DoFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DoFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *DoFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DoFavoriteResult) GetResult() interface{} {
	return p.Success
}

func cancelFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CancelFavoriteReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).CancelFavorite(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelFavoriteArgs:
		success, err := handler.(userr.CoreApiService).CancelFavorite(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelFavoriteResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelFavoriteArgs() interface{} {
	return &CancelFavoriteArgs{}
}

func newCancelFavoriteResult() interface{} {
	return &CancelFavoriteResult{}
}

type CancelFavoriteArgs struct {
	Req *core_api.CancelFavoriteReq
}

func (p *CancelFavoriteArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CancelFavoriteReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelFavoriteArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelFavoriteArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelFavoriteArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelFavoriteArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CancelFavoriteReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelFavoriteArgs_Req_DEFAULT *core_api.CancelFavoriteReq

func (p *CancelFavoriteArgs) GetReq() *core_api.CancelFavoriteReq {
	if !p.IsSetReq() {
		return CancelFavoriteArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelFavoriteArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelFavoriteArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelFavoriteResult struct {
	Success *core_api.Response
}

var CancelFavoriteResult_Success_DEFAULT *core_api.Response

func (p *CancelFavoriteResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelFavoriteResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelFavoriteResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelFavoriteResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelFavoriteResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelFavoriteResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return CancelFavoriteResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelFavoriteResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *CancelFavoriteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelFavoriteResult) GetResult() interface{} {
	return p.Success
}

func createBookingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateBookingReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).CreateBooking(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateBookingArgs:
		success, err := handler.(userr.CoreApiService).CreateBooking(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateBookingResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateBookingArgs() interface{} {
	return &CreateBookingArgs{}
}

func newCreateBookingResult() interface{} {
	return &CreateBookingResult{}
}

type CreateBookingArgs struct {
	Req *core_api.CreateBookingReq
}

func (p *CreateBookingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateBookingReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateBookingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateBookingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateBookingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateBookingArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateBookingReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateBookingArgs_Req_DEFAULT *core_api.CreateBookingReq

func (p *CreateBookingArgs) GetReq() *core_api.CreateBookingReq {
	if !p.IsSetReq() {
		return CreateBookingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateBookingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateBookingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateBookingResult struct {
	Success *core_api.Response
}

var CreateBookingResult_Success_DEFAULT *core_api.Response

func (p *CreateBookingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateBookingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateBookingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateBookingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateBookingResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateBookingResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return CreateBookingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateBookingResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *CreateBookingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateBookingResult) GetResult() interface{} {
	return p.Success
}

func cancelBookRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CancelBookRecordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).CancelBookRecord(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CancelBookRecordArgs:
		success, err := handler.(userr.CoreApiService).CancelBookRecord(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CancelBookRecordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCancelBookRecordArgs() interface{} {
	return &CancelBookRecordArgs{}
}

func newCancelBookRecordResult() interface{} {
	return &CancelBookRecordResult{}
}

type CancelBookRecordArgs struct {
	Req *core_api.CancelBookRecordReq
}

func (p *CancelBookRecordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CancelBookRecordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CancelBookRecordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CancelBookRecordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CancelBookRecordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CancelBookRecordArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CancelBookRecordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CancelBookRecordArgs_Req_DEFAULT *core_api.CancelBookRecordReq

func (p *CancelBookRecordArgs) GetReq() *core_api.CancelBookRecordReq {
	if !p.IsSetReq() {
		return CancelBookRecordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CancelBookRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CancelBookRecordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CancelBookRecordResult struct {
	Success *core_api.Response
}

var CancelBookRecordResult_Success_DEFAULT *core_api.Response

func (p *CancelBookRecordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CancelBookRecordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CancelBookRecordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CancelBookRecordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CancelBookRecordResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CancelBookRecordResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return CancelBookRecordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CancelBookRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *CancelBookRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CancelBookRecordResult) GetResult() interface{} {
	return p.Success
}

func listActivitiesByBookRecordsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListBookRecordsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).ListActivitiesByBookRecords(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListActivitiesByBookRecordsArgs:
		success, err := handler.(userr.CoreApiService).ListActivitiesByBookRecords(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListActivitiesByBookRecordsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListActivitiesByBookRecordsArgs() interface{} {
	return &ListActivitiesByBookRecordsArgs{}
}

func newListActivitiesByBookRecordsResult() interface{} {
	return &ListActivitiesByBookRecordsResult{}
}

type ListActivitiesByBookRecordsArgs struct {
	Req *core_api.ListBookRecordsReq
}

func (p *ListActivitiesByBookRecordsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ListBookRecordsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListActivitiesByBookRecordsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListActivitiesByBookRecordsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListActivitiesByBookRecordsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListActivitiesByBookRecordsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListBookRecordsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListActivitiesByBookRecordsArgs_Req_DEFAULT *core_api.ListBookRecordsReq

func (p *ListActivitiesByBookRecordsArgs) GetReq() *core_api.ListBookRecordsReq {
	if !p.IsSetReq() {
		return ListActivitiesByBookRecordsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListActivitiesByBookRecordsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListActivitiesByBookRecordsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListActivitiesByBookRecordsResult struct {
	Success *core_api.ListBookRecordsResp
}

var ListActivitiesByBookRecordsResult_Success_DEFAULT *core_api.ListBookRecordsResp

func (p *ListActivitiesByBookRecordsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ListBookRecordsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListActivitiesByBookRecordsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListActivitiesByBookRecordsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListActivitiesByBookRecordsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListActivitiesByBookRecordsResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListBookRecordsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListActivitiesByBookRecordsResult) GetSuccess() *core_api.ListBookRecordsResp {
	if !p.IsSetSuccess() {
		return ListActivitiesByBookRecordsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListActivitiesByBookRecordsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListBookRecordsResp)
}

func (p *ListActivitiesByBookRecordsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListActivitiesByBookRecordsResult) GetResult() interface{} {
	return p.Success
}

func listReserversHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.ListReserversReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).ListReservers(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListReserversArgs:
		success, err := handler.(userr.CoreApiService).ListReservers(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListReserversResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListReserversArgs() interface{} {
	return &ListReserversArgs{}
}

func newListReserversResult() interface{} {
	return &ListReserversResult{}
}

type ListReserversArgs struct {
	Req *core_api.ListReserversReq
}

func (p *ListReserversArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.ListReserversReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListReserversArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListReserversArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListReserversArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListReserversArgs) Unmarshal(in []byte) error {
	msg := new(core_api.ListReserversReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListReserversArgs_Req_DEFAULT *core_api.ListReserversReq

func (p *ListReserversArgs) GetReq() *core_api.ListReserversReq {
	if !p.IsSetReq() {
		return ListReserversArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListReserversArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListReserversArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListReserversResult struct {
	Success *core_api.ListReserversResp
}

var ListReserversResult_Success_DEFAULT *core_api.ListReserversResp

func (p *ListReserversResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.ListReserversResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListReserversResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListReserversResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListReserversResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListReserversResult) Unmarshal(in []byte) error {
	msg := new(core_api.ListReserversResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListReserversResult) GetSuccess() *core_api.ListReserversResp {
	if !p.IsSetSuccess() {
		return ListReserversResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListReserversResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.ListReserversResp)
}

func (p *ListReserversResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListReserversResult) GetResult() interface{} {
	return p.Success
}

func createReserverHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.CreateReserverReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).CreateReserver(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *CreateReserverArgs:
		success, err := handler.(userr.CoreApiService).CreateReserver(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateReserverResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newCreateReserverArgs() interface{} {
	return &CreateReserverArgs{}
}

func newCreateReserverResult() interface{} {
	return &CreateReserverResult{}
}

type CreateReserverArgs struct {
	Req *core_api.CreateReserverReq
}

func (p *CreateReserverArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.CreateReserverReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateReserverArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateReserverArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateReserverArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateReserverArgs) Unmarshal(in []byte) error {
	msg := new(core_api.CreateReserverReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateReserverArgs_Req_DEFAULT *core_api.CreateReserverReq

func (p *CreateReserverArgs) GetReq() *core_api.CreateReserverReq {
	if !p.IsSetReq() {
		return CreateReserverArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateReserverArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateReserverArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateReserverResult struct {
	Success *core_api.Response
}

var CreateReserverResult_Success_DEFAULT *core_api.Response

func (p *CreateReserverResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateReserverResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateReserverResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateReserverResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateReserverResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateReserverResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return CreateReserverResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateReserverResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *CreateReserverResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateReserverResult) GetResult() interface{} {
	return p.Success
}

func deleteReserverHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.DeleteReserverReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).DeleteReserver(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteReserverArgs:
		success, err := handler.(userr.CoreApiService).DeleteReserver(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteReserverResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteReserverArgs() interface{} {
	return &DeleteReserverArgs{}
}

func newDeleteReserverResult() interface{} {
	return &DeleteReserverResult{}
}

type DeleteReserverArgs struct {
	Req *core_api.DeleteReserverReq
}

func (p *DeleteReserverArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.DeleteReserverReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteReserverArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteReserverArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteReserverArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteReserverArgs) Unmarshal(in []byte) error {
	msg := new(core_api.DeleteReserverReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteReserverArgs_Req_DEFAULT *core_api.DeleteReserverReq

func (p *DeleteReserverArgs) GetReq() *core_api.DeleteReserverReq {
	if !p.IsSetReq() {
		return DeleteReserverArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteReserverArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteReserverArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteReserverResult struct {
	Success *core_api.Response
}

var DeleteReserverResult_Success_DEFAULT *core_api.Response

func (p *DeleteReserverResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteReserverResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteReserverResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteReserverResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteReserverResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteReserverResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return DeleteReserverResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteReserverResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *DeleteReserverResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteReserverResult) GetResult() interface{} {
	return p.Success
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.GetUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).GetUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetUserInfoArgs:
		success, err := handler.(userr.CoreApiService).GetUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetUserInfoArgs() interface{} {
	return &GetUserInfoArgs{}
}

func newGetUserInfoResult() interface{} {
	return &GetUserInfoResult{}
}

type GetUserInfoArgs struct {
	Req *core_api.GetUserInfoReq
}

func (p *GetUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.GetUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserInfoArgs_Req_DEFAULT *core_api.GetUserInfoReq

func (p *GetUserInfoArgs) GetReq() *core_api.GetUserInfoReq {
	if !p.IsSetReq() {
		return GetUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserInfoResult struct {
	Success *core_api.GetUserInfoResp
}

var GetUserInfoResult_Success_DEFAULT *core_api.GetUserInfoResp

func (p *GetUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.GetUserInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserInfoResult) Unmarshal(in []byte) error {
	msg := new(core_api.GetUserInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserInfoResult) GetSuccess() *core_api.GetUserInfoResp {
	if !p.IsSetSuccess() {
		return GetUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.GetUserInfoResp)
}

func (p *GetUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserInfoResult) GetResult() interface{} {
	return p.Success
}

func updateUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateUserInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).UpdateUserInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateUserInfoArgs:
		success, err := handler.(userr.CoreApiService).UpdateUserInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateUserInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateUserInfoArgs() interface{} {
	return &UpdateUserInfoArgs{}
}

func newUpdateUserInfoResult() interface{} {
	return &UpdateUserInfoResult{}
}

type UpdateUserInfoArgs struct {
	Req *core_api.UpdateUserInfoReq
}

func (p *UpdateUserInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateUserInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateUserInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateUserInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateUserInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateUserInfoArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateUserInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateUserInfoArgs_Req_DEFAULT *core_api.UpdateUserInfoReq

func (p *UpdateUserInfoArgs) GetReq() *core_api.UpdateUserInfoReq {
	if !p.IsSetReq() {
		return UpdateUserInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateUserInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateUserInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateUserInfoResult struct {
	Success *core_api.Response
}

var UpdateUserInfoResult_Success_DEFAULT *core_api.Response

func (p *UpdateUserInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateUserInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateUserInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateUserInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateUserInfoResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateUserInfoResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateUserInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateUserInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateUserInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateUserInfoResult) GetResult() interface{} {
	return p.Success
}

func updateNoticeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.UpdateNoticeReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).UpdateNotice(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateNoticeArgs:
		success, err := handler.(userr.CoreApiService).UpdateNotice(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateNoticeResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateNoticeArgs() interface{} {
	return &UpdateNoticeArgs{}
}

func newUpdateNoticeResult() interface{} {
	return &UpdateNoticeResult{}
}

type UpdateNoticeArgs struct {
	Req *core_api.UpdateNoticeReq
}

func (p *UpdateNoticeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.UpdateNoticeReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateNoticeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateNoticeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateNoticeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateNoticeArgs) Unmarshal(in []byte) error {
	msg := new(core_api.UpdateNoticeReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateNoticeArgs_Req_DEFAULT *core_api.UpdateNoticeReq

func (p *UpdateNoticeArgs) GetReq() *core_api.UpdateNoticeReq {
	if !p.IsSetReq() {
		return UpdateNoticeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateNoticeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateNoticeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateNoticeResult struct {
	Success *core_api.Response
}

var UpdateNoticeResult_Success_DEFAULT *core_api.Response

func (p *UpdateNoticeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateNoticeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateNoticeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateNoticeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateNoticeResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateNoticeResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return UpdateNoticeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateNoticeResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *UpdateNoticeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateNoticeResult) GetResult() interface{} {
	return p.Success
}

func merchantListActivitiesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantListActivitiesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).MerchantListActivities(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantListActivitiesArgs:
		success, err := handler.(userr.CoreApiService).MerchantListActivities(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantListActivitiesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantListActivitiesArgs() interface{} {
	return &MerchantListActivitiesArgs{}
}

func newMerchantListActivitiesResult() interface{} {
	return &MerchantListActivitiesResult{}
}

type MerchantListActivitiesArgs struct {
	Req *core_api.MerchantListActivitiesReq
}

func (p *MerchantListActivitiesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantListActivitiesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantListActivitiesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantListActivitiesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantListActivitiesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantListActivitiesArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantListActivitiesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantListActivitiesArgs_Req_DEFAULT *core_api.MerchantListActivitiesReq

func (p *MerchantListActivitiesArgs) GetReq() *core_api.MerchantListActivitiesReq {
	if !p.IsSetReq() {
		return MerchantListActivitiesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantListActivitiesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantListActivitiesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantListActivitiesResult struct {
	Success *core_api.MerchantListActivitiesResp
}

var MerchantListActivitiesResult_Success_DEFAULT *core_api.MerchantListActivitiesResp

func (p *MerchantListActivitiesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.MerchantListActivitiesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantListActivitiesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantListActivitiesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantListActivitiesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantListActivitiesResult) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantListActivitiesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantListActivitiesResult) GetSuccess() *core_api.MerchantListActivitiesResp {
	if !p.IsSetSuccess() {
		return MerchantListActivitiesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantListActivitiesResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.MerchantListActivitiesResp)
}

func (p *MerchantListActivitiesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantListActivitiesResult) GetResult() interface{} {
	return p.Success
}

func merchantCreateActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantCreateActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).MerchantCreateActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantCreateActivityArgs:
		success, err := handler.(userr.CoreApiService).MerchantCreateActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantCreateActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantCreateActivityArgs() interface{} {
	return &MerchantCreateActivityArgs{}
}

func newMerchantCreateActivityResult() interface{} {
	return &MerchantCreateActivityResult{}
}

type MerchantCreateActivityArgs struct {
	Req *core_api.MerchantCreateActivityReq
}

func (p *MerchantCreateActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantCreateActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantCreateActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantCreateActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantCreateActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantCreateActivityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantCreateActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantCreateActivityArgs_Req_DEFAULT *core_api.MerchantCreateActivityReq

func (p *MerchantCreateActivityArgs) GetReq() *core_api.MerchantCreateActivityReq {
	if !p.IsSetReq() {
		return MerchantCreateActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantCreateActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantCreateActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantCreateActivityResult struct {
	Success *core_api.Response
}

var MerchantCreateActivityResult_Success_DEFAULT *core_api.Response

func (p *MerchantCreateActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantCreateActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantCreateActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantCreateActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantCreateActivityResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantCreateActivityResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return MerchantCreateActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantCreateActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *MerchantCreateActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantCreateActivityResult) GetResult() interface{} {
	return p.Success
}

func merchantDeleteActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantDeleteActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).MerchantDeleteActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantDeleteActivityArgs:
		success, err := handler.(userr.CoreApiService).MerchantDeleteActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantDeleteActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantDeleteActivityArgs() interface{} {
	return &MerchantDeleteActivityArgs{}
}

func newMerchantDeleteActivityResult() interface{} {
	return &MerchantDeleteActivityResult{}
}

type MerchantDeleteActivityArgs struct {
	Req *core_api.MerchantDeleteActivityReq
}

func (p *MerchantDeleteActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantDeleteActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantDeleteActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantDeleteActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantDeleteActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantDeleteActivityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantDeleteActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantDeleteActivityArgs_Req_DEFAULT *core_api.MerchantDeleteActivityReq

func (p *MerchantDeleteActivityArgs) GetReq() *core_api.MerchantDeleteActivityReq {
	if !p.IsSetReq() {
		return MerchantDeleteActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantDeleteActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantDeleteActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantDeleteActivityResult struct {
	Success *core_api.Response
}

var MerchantDeleteActivityResult_Success_DEFAULT *core_api.Response

func (p *MerchantDeleteActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantDeleteActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantDeleteActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantDeleteActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantDeleteActivityResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantDeleteActivityResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return MerchantDeleteActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantDeleteActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *MerchantDeleteActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantDeleteActivityResult) GetResult() interface{} {
	return p.Success
}

func merchantTopActivityHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantTopActivityReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).MerchantTopActivity(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantTopActivityArgs:
		success, err := handler.(userr.CoreApiService).MerchantTopActivity(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantTopActivityResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantTopActivityArgs() interface{} {
	return &MerchantTopActivityArgs{}
}

func newMerchantTopActivityResult() interface{} {
	return &MerchantTopActivityResult{}
}

type MerchantTopActivityArgs struct {
	Req *core_api.MerchantTopActivityReq
}

func (p *MerchantTopActivityArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantTopActivityReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantTopActivityArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantTopActivityArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantTopActivityArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantTopActivityArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantTopActivityReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantTopActivityArgs_Req_DEFAULT *core_api.MerchantTopActivityReq

func (p *MerchantTopActivityArgs) GetReq() *core_api.MerchantTopActivityReq {
	if !p.IsSetReq() {
		return MerchantTopActivityArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantTopActivityArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantTopActivityArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantTopActivityResult struct {
	Success *core_api.Response
}

var MerchantTopActivityResult_Success_DEFAULT *core_api.Response

func (p *MerchantTopActivityResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantTopActivityResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantTopActivityResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantTopActivityResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantTopActivityResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantTopActivityResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return MerchantTopActivityResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantTopActivityResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *MerchantTopActivityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantTopActivityResult) GetResult() interface{} {
	return p.Success
}

func merchantLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantLoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).MerchantLogin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantLoginArgs:
		success, err := handler.(userr.CoreApiService).MerchantLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantLoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantLoginArgs() interface{} {
	return &MerchantLoginArgs{}
}

func newMerchantLoginResult() interface{} {
	return &MerchantLoginResult{}
}

type MerchantLoginArgs struct {
	Req *core_api.MerchantLoginReq
}

func (p *MerchantLoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantLoginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantLoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantLoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantLoginArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantLoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantLoginArgs_Req_DEFAULT *core_api.MerchantLoginReq

func (p *MerchantLoginArgs) GetReq() *core_api.MerchantLoginReq {
	if !p.IsSetReq() {
		return MerchantLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantLoginResult struct {
	Success *core_api.MerchantLoginResp
}

var MerchantLoginResult_Success_DEFAULT *core_api.MerchantLoginResp

func (p *MerchantLoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.MerchantLoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantLoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantLoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantLoginResult) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantLoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantLoginResult) GetSuccess() *core_api.MerchantLoginResp {
	if !p.IsSetSuccess() {
		return MerchantLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.MerchantLoginResp)
}

func (p *MerchantLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantLoginResult) GetResult() interface{} {
	return p.Success
}

func merchantGetSettingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantGetSettingReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).MerchantGetSetting(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantGetSettingArgs:
		success, err := handler.(userr.CoreApiService).MerchantGetSetting(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantGetSettingResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantGetSettingArgs() interface{} {
	return &MerchantGetSettingArgs{}
}

func newMerchantGetSettingResult() interface{} {
	return &MerchantGetSettingResult{}
}

type MerchantGetSettingArgs struct {
	Req *core_api.MerchantGetSettingReq
}

func (p *MerchantGetSettingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantGetSettingReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantGetSettingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantGetSettingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantGetSettingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantGetSettingArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantGetSettingReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantGetSettingArgs_Req_DEFAULT *core_api.MerchantGetSettingReq

func (p *MerchantGetSettingArgs) GetReq() *core_api.MerchantGetSettingReq {
	if !p.IsSetReq() {
		return MerchantGetSettingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantGetSettingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantGetSettingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantGetSettingResult struct {
	Success *core_api.MerchantGetSettingResp
}

var MerchantGetSettingResult_Success_DEFAULT *core_api.MerchantGetSettingResp

func (p *MerchantGetSettingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.MerchantGetSettingResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantGetSettingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantGetSettingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantGetSettingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantGetSettingResult) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantGetSettingResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantGetSettingResult) GetSuccess() *core_api.MerchantGetSettingResp {
	if !p.IsSetSuccess() {
		return MerchantGetSettingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantGetSettingResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.MerchantGetSettingResp)
}

func (p *MerchantGetSettingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantGetSettingResult) GetResult() interface{} {
	return p.Success
}

func merchantUpdateSettingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantUpdateSettingReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).MerchantUpdateSetting(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantUpdateSettingArgs:
		success, err := handler.(userr.CoreApiService).MerchantUpdateSetting(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantUpdateSettingResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantUpdateSettingArgs() interface{} {
	return &MerchantUpdateSettingArgs{}
}

func newMerchantUpdateSettingResult() interface{} {
	return &MerchantUpdateSettingResult{}
}

type MerchantUpdateSettingArgs struct {
	Req *core_api.MerchantUpdateSettingReq
}

func (p *MerchantUpdateSettingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantUpdateSettingReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantUpdateSettingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantUpdateSettingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantUpdateSettingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantUpdateSettingArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantUpdateSettingReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantUpdateSettingArgs_Req_DEFAULT *core_api.MerchantUpdateSettingReq

func (p *MerchantUpdateSettingArgs) GetReq() *core_api.MerchantUpdateSettingReq {
	if !p.IsSetReq() {
		return MerchantUpdateSettingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantUpdateSettingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantUpdateSettingArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantUpdateSettingResult struct {
	Success *core_api.MerchantGetSettingResp
}

var MerchantUpdateSettingResult_Success_DEFAULT *core_api.MerchantGetSettingResp

func (p *MerchantUpdateSettingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.MerchantGetSettingResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantUpdateSettingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantUpdateSettingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantUpdateSettingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantUpdateSettingResult) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantGetSettingResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantUpdateSettingResult) GetSuccess() *core_api.MerchantGetSettingResp {
	if !p.IsSetSuccess() {
		return MerchantUpdateSettingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantUpdateSettingResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.MerchantGetSettingResp)
}

func (p *MerchantUpdateSettingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantUpdateSettingResult) GetResult() interface{} {
	return p.Success
}

func merchantGetBookRecordsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantListBookRecordsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).MerchantGetBookRecords(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantGetBookRecordsArgs:
		success, err := handler.(userr.CoreApiService).MerchantGetBookRecords(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantGetBookRecordsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantGetBookRecordsArgs() interface{} {
	return &MerchantGetBookRecordsArgs{}
}

func newMerchantGetBookRecordsResult() interface{} {
	return &MerchantGetBookRecordsResult{}
}

type MerchantGetBookRecordsArgs struct {
	Req *core_api.MerchantListBookRecordsReq
}

func (p *MerchantGetBookRecordsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantListBookRecordsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantGetBookRecordsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantGetBookRecordsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantGetBookRecordsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantGetBookRecordsArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantListBookRecordsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantGetBookRecordsArgs_Req_DEFAULT *core_api.MerchantListBookRecordsReq

func (p *MerchantGetBookRecordsArgs) GetReq() *core_api.MerchantListBookRecordsReq {
	if !p.IsSetReq() {
		return MerchantGetBookRecordsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantGetBookRecordsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantGetBookRecordsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantGetBookRecordsResult struct {
	Success *core_api.MerchantListBookRecordsResp
}

var MerchantGetBookRecordsResult_Success_DEFAULT *core_api.MerchantListBookRecordsResp

func (p *MerchantGetBookRecordsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.MerchantListBookRecordsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantGetBookRecordsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantGetBookRecordsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantGetBookRecordsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantGetBookRecordsResult) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantListBookRecordsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantGetBookRecordsResult) GetSuccess() *core_api.MerchantListBookRecordsResp {
	if !p.IsSetSuccess() {
		return MerchantGetBookRecordsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantGetBookRecordsResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.MerchantListBookRecordsResp)
}

func (p *MerchantGetBookRecordsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantGetBookRecordsResult) GetResult() interface{} {
	return p.Success
}

func merchantUpdateInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantUpdateInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).MerchantUpdateInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantUpdateInfoArgs:
		success, err := handler.(userr.CoreApiService).MerchantUpdateInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantUpdateInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantUpdateInfoArgs() interface{} {
	return &MerchantUpdateInfoArgs{}
}

func newMerchantUpdateInfoResult() interface{} {
	return &MerchantUpdateInfoResult{}
}

type MerchantUpdateInfoArgs struct {
	Req *core_api.MerchantUpdateInfoReq
}

func (p *MerchantUpdateInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantUpdateInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantUpdateInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantUpdateInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantUpdateInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantUpdateInfoArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantUpdateInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantUpdateInfoArgs_Req_DEFAULT *core_api.MerchantUpdateInfoReq

func (p *MerchantUpdateInfoArgs) GetReq() *core_api.MerchantUpdateInfoReq {
	if !p.IsSetReq() {
		return MerchantUpdateInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantUpdateInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantUpdateInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantUpdateInfoResult struct {
	Success *core_api.Response
}

var MerchantUpdateInfoResult_Success_DEFAULT *core_api.Response

func (p *MerchantUpdateInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantUpdateInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantUpdateInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantUpdateInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantUpdateInfoResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantUpdateInfoResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return MerchantUpdateInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantUpdateInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *MerchantUpdateInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantUpdateInfoResult) GetResult() interface{} {
	return p.Success
}

func merchantGetInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantGetInfoReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).MerchantGetInfo(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantGetInfoArgs:
		success, err := handler.(userr.CoreApiService).MerchantGetInfo(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantGetInfoResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantGetInfoArgs() interface{} {
	return &MerchantGetInfoArgs{}
}

func newMerchantGetInfoResult() interface{} {
	return &MerchantGetInfoResult{}
}

type MerchantGetInfoArgs struct {
	Req *core_api.MerchantGetInfoReq
}

func (p *MerchantGetInfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantGetInfoReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantGetInfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantGetInfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantGetInfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantGetInfoArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantGetInfoReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantGetInfoArgs_Req_DEFAULT *core_api.MerchantGetInfoReq

func (p *MerchantGetInfoArgs) GetReq() *core_api.MerchantGetInfoReq {
	if !p.IsSetReq() {
		return MerchantGetInfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantGetInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantGetInfoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantGetInfoResult struct {
	Success *core_api.MerchantGetInfoResp
}

var MerchantGetInfoResult_Success_DEFAULT *core_api.MerchantGetInfoResp

func (p *MerchantGetInfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.MerchantGetInfoResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantGetInfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantGetInfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantGetInfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantGetInfoResult) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantGetInfoResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantGetInfoResult) GetSuccess() *core_api.MerchantGetInfoResp {
	if !p.IsSetSuccess() {
		return MerchantGetInfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantGetInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.MerchantGetInfoResp)
}

func (p *MerchantGetInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantGetInfoResult) GetResult() interface{} {
	return p.Success
}

func merchantSetPasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.MerchantSetPasswordReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).MerchantSetPassword(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MerchantSetPasswordArgs:
		success, err := handler.(userr.CoreApiService).MerchantSetPassword(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MerchantSetPasswordResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMerchantSetPasswordArgs() interface{} {
	return &MerchantSetPasswordArgs{}
}

func newMerchantSetPasswordResult() interface{} {
	return &MerchantSetPasswordResult{}
}

type MerchantSetPasswordArgs struct {
	Req *core_api.MerchantSetPasswordReq
}

func (p *MerchantSetPasswordArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.MerchantSetPasswordReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MerchantSetPasswordArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MerchantSetPasswordArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MerchantSetPasswordArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MerchantSetPasswordArgs) Unmarshal(in []byte) error {
	msg := new(core_api.MerchantSetPasswordReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MerchantSetPasswordArgs_Req_DEFAULT *core_api.MerchantSetPasswordReq

func (p *MerchantSetPasswordArgs) GetReq() *core_api.MerchantSetPasswordReq {
	if !p.IsSetReq() {
		return MerchantSetPasswordArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MerchantSetPasswordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantSetPasswordArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MerchantSetPasswordResult struct {
	Success *core_api.Response
}

var MerchantSetPasswordResult_Success_DEFAULT *core_api.Response

func (p *MerchantSetPasswordResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MerchantSetPasswordResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MerchantSetPasswordResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MerchantSetPasswordResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MerchantSetPasswordResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MerchantSetPasswordResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return MerchantSetPasswordResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MerchantSetPasswordResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *MerchantSetPasswordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantSetPasswordResult) GetResult() interface{} {
	return p.Success
}

func systemLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SystemLoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).SystemLogin(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SystemLoginArgs:
		success, err := handler.(userr.CoreApiService).SystemLogin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SystemLoginResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSystemLoginArgs() interface{} {
	return &SystemLoginArgs{}
}

func newSystemLoginResult() interface{} {
	return &SystemLoginResult{}
}

type SystemLoginArgs struct {
	Req *core_api.SystemLoginReq
}

func (p *SystemLoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SystemLoginReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SystemLoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SystemLoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SystemLoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SystemLoginArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SystemLoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SystemLoginArgs_Req_DEFAULT *core_api.SystemLoginReq

func (p *SystemLoginArgs) GetReq() *core_api.SystemLoginReq {
	if !p.IsSetReq() {
		return SystemLoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SystemLoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemLoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SystemLoginResult struct {
	Success *core_api.SystemLoginResp
}

var SystemLoginResult_Success_DEFAULT *core_api.SystemLoginResp

func (p *SystemLoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SystemLoginResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SystemLoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SystemLoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SystemLoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SystemLoginResult) Unmarshal(in []byte) error {
	msg := new(core_api.SystemLoginResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SystemLoginResult) GetSuccess() *core_api.SystemLoginResp {
	if !p.IsSetSuccess() {
		return SystemLoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SystemLoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SystemLoginResp)
}

func (p *SystemLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemLoginResult) GetResult() interface{} {
	return p.Success
}

func systemListMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SystemListMerchantsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).SystemListMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SystemListMerchantArgs:
		success, err := handler.(userr.CoreApiService).SystemListMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SystemListMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSystemListMerchantArgs() interface{} {
	return &SystemListMerchantArgs{}
}

func newSystemListMerchantResult() interface{} {
	return &SystemListMerchantResult{}
}

type SystemListMerchantArgs struct {
	Req *core_api.SystemListMerchantsReq
}

func (p *SystemListMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SystemListMerchantsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SystemListMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SystemListMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SystemListMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SystemListMerchantArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SystemListMerchantsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SystemListMerchantArgs_Req_DEFAULT *core_api.SystemListMerchantsReq

func (p *SystemListMerchantArgs) GetReq() *core_api.SystemListMerchantsReq {
	if !p.IsSetReq() {
		return SystemListMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SystemListMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemListMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SystemListMerchantResult struct {
	Success *core_api.SystemListMerchantsReq
}

var SystemListMerchantResult_Success_DEFAULT *core_api.SystemListMerchantsReq

func (p *SystemListMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SystemListMerchantsReq)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SystemListMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SystemListMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SystemListMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SystemListMerchantResult) Unmarshal(in []byte) error {
	msg := new(core_api.SystemListMerchantsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SystemListMerchantResult) GetSuccess() *core_api.SystemListMerchantsReq {
	if !p.IsSetSuccess() {
		return SystemListMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SystemListMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SystemListMerchantsReq)
}

func (p *SystemListMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemListMerchantResult) GetResult() interface{} {
	return p.Success
}

func systemGetMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SystemGetMerchantReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).SystemGetMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SystemGetMerchantArgs:
		success, err := handler.(userr.CoreApiService).SystemGetMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SystemGetMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSystemGetMerchantArgs() interface{} {
	return &SystemGetMerchantArgs{}
}

func newSystemGetMerchantResult() interface{} {
	return &SystemGetMerchantResult{}
}

type SystemGetMerchantArgs struct {
	Req *core_api.SystemGetMerchantReq
}

func (p *SystemGetMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SystemGetMerchantReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SystemGetMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SystemGetMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SystemGetMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SystemGetMerchantArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SystemGetMerchantReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SystemGetMerchantArgs_Req_DEFAULT *core_api.SystemGetMerchantReq

func (p *SystemGetMerchantArgs) GetReq() *core_api.SystemGetMerchantReq {
	if !p.IsSetReq() {
		return SystemGetMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SystemGetMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemGetMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SystemGetMerchantResult struct {
	Success *core_api.SystemGetMerchantResp
}

var SystemGetMerchantResult_Success_DEFAULT *core_api.SystemGetMerchantResp

func (p *SystemGetMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SystemGetMerchantResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SystemGetMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SystemGetMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SystemGetMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SystemGetMerchantResult) Unmarshal(in []byte) error {
	msg := new(core_api.SystemGetMerchantResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SystemGetMerchantResult) GetSuccess() *core_api.SystemGetMerchantResp {
	if !p.IsSetSuccess() {
		return SystemGetMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SystemGetMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SystemGetMerchantResp)
}

func (p *SystemGetMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemGetMerchantResult) GetResult() interface{} {
	return p.Success
}

func systemCreateMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SystemCreateMerchantReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).SystemCreateMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SystemCreateMerchantArgs:
		success, err := handler.(userr.CoreApiService).SystemCreateMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SystemCreateMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSystemCreateMerchantArgs() interface{} {
	return &SystemCreateMerchantArgs{}
}

func newSystemCreateMerchantResult() interface{} {
	return &SystemCreateMerchantResult{}
}

type SystemCreateMerchantArgs struct {
	Req *core_api.SystemCreateMerchantReq
}

func (p *SystemCreateMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SystemCreateMerchantReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SystemCreateMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SystemCreateMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SystemCreateMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SystemCreateMerchantArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SystemCreateMerchantReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SystemCreateMerchantArgs_Req_DEFAULT *core_api.SystemCreateMerchantReq

func (p *SystemCreateMerchantArgs) GetReq() *core_api.SystemCreateMerchantReq {
	if !p.IsSetReq() {
		return SystemCreateMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SystemCreateMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemCreateMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SystemCreateMerchantResult struct {
	Success *core_api.Response
}

var SystemCreateMerchantResult_Success_DEFAULT *core_api.Response

func (p *SystemCreateMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SystemCreateMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SystemCreateMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SystemCreateMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SystemCreateMerchantResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SystemCreateMerchantResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return SystemCreateMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SystemCreateMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *SystemCreateMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemCreateMerchantResult) GetResult() interface{} {
	return p.Success
}

func systemUpdateMerchantHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SystemUpdateMerchantReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).SystemUpdateMerchant(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SystemUpdateMerchantArgs:
		success, err := handler.(userr.CoreApiService).SystemUpdateMerchant(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SystemUpdateMerchantResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSystemUpdateMerchantArgs() interface{} {
	return &SystemUpdateMerchantArgs{}
}

func newSystemUpdateMerchantResult() interface{} {
	return &SystemUpdateMerchantResult{}
}

type SystemUpdateMerchantArgs struct {
	Req *core_api.SystemUpdateMerchantReq
}

func (p *SystemUpdateMerchantArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SystemUpdateMerchantReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SystemUpdateMerchantArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SystemUpdateMerchantArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SystemUpdateMerchantArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SystemUpdateMerchantArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SystemUpdateMerchantReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SystemUpdateMerchantArgs_Req_DEFAULT *core_api.SystemUpdateMerchantReq

func (p *SystemUpdateMerchantArgs) GetReq() *core_api.SystemUpdateMerchantReq {
	if !p.IsSetReq() {
		return SystemUpdateMerchantArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SystemUpdateMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemUpdateMerchantArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SystemUpdateMerchantResult struct {
	Success *core_api.Response
}

var SystemUpdateMerchantResult_Success_DEFAULT *core_api.Response

func (p *SystemUpdateMerchantResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.Response)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SystemUpdateMerchantResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SystemUpdateMerchantResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SystemUpdateMerchantResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SystemUpdateMerchantResult) Unmarshal(in []byte) error {
	msg := new(core_api.Response)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SystemUpdateMerchantResult) GetSuccess() *core_api.Response {
	if !p.IsSetSuccess() {
		return SystemUpdateMerchantResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SystemUpdateMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.Response)
}

func (p *SystemUpdateMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemUpdateMerchantResult) GetResult() interface{} {
	return p.Success
}

func systemGetDashboardHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SystemGetDashboardReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).SystemGetDashboard(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SystemGetDashboardArgs:
		success, err := handler.(userr.CoreApiService).SystemGetDashboard(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SystemGetDashboardResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSystemGetDashboardArgs() interface{} {
	return &SystemGetDashboardArgs{}
}

func newSystemGetDashboardResult() interface{} {
	return &SystemGetDashboardResult{}
}

type SystemGetDashboardArgs struct {
	Req *core_api.SystemGetDashboardReq
}

func (p *SystemGetDashboardArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SystemGetDashboardReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SystemGetDashboardArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SystemGetDashboardArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SystemGetDashboardArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SystemGetDashboardArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SystemGetDashboardReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SystemGetDashboardArgs_Req_DEFAULT *core_api.SystemGetDashboardReq

func (p *SystemGetDashboardArgs) GetReq() *core_api.SystemGetDashboardReq {
	if !p.IsSetReq() {
		return SystemGetDashboardArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SystemGetDashboardArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemGetDashboardArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SystemGetDashboardResult struct {
	Success *core_api.SystemGetDashboardResp
}

var SystemGetDashboardResult_Success_DEFAULT *core_api.SystemGetDashboardResp

func (p *SystemGetDashboardResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SystemGetDashboardResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SystemGetDashboardResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SystemGetDashboardResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SystemGetDashboardResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SystemGetDashboardResult) Unmarshal(in []byte) error {
	msg := new(core_api.SystemGetDashboardResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SystemGetDashboardResult) GetSuccess() *core_api.SystemGetDashboardResp {
	if !p.IsSetSuccess() {
		return SystemGetDashboardResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SystemGetDashboardResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SystemGetDashboardResp)
}

func (p *SystemGetDashboardResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemGetDashboardResult) GetResult() interface{} {
	return p.Success
}

func systemGetOverallDashboardHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.SystemGetOverallDashboardReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).SystemGetOverallDashboard(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SystemGetOverallDashboardArgs:
		success, err := handler.(userr.CoreApiService).SystemGetOverallDashboard(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SystemGetOverallDashboardResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSystemGetOverallDashboardArgs() interface{} {
	return &SystemGetOverallDashboardArgs{}
}

func newSystemGetOverallDashboardResult() interface{} {
	return &SystemGetOverallDashboardResult{}
}

type SystemGetOverallDashboardArgs struct {
	Req *core_api.SystemGetOverallDashboardReq
}

func (p *SystemGetOverallDashboardArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.SystemGetOverallDashboardReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SystemGetOverallDashboardArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SystemGetOverallDashboardArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SystemGetOverallDashboardArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SystemGetOverallDashboardArgs) Unmarshal(in []byte) error {
	msg := new(core_api.SystemGetOverallDashboardReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SystemGetOverallDashboardArgs_Req_DEFAULT *core_api.SystemGetOverallDashboardReq

func (p *SystemGetOverallDashboardArgs) GetReq() *core_api.SystemGetOverallDashboardReq {
	if !p.IsSetReq() {
		return SystemGetOverallDashboardArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SystemGetOverallDashboardArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SystemGetOverallDashboardArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SystemGetOverallDashboardResult struct {
	Success *core_api.SystemGetOverallDashboardResp
}

var SystemGetOverallDashboardResult_Success_DEFAULT *core_api.SystemGetOverallDashboardResp

func (p *SystemGetOverallDashboardResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.SystemGetOverallDashboardResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SystemGetOverallDashboardResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SystemGetOverallDashboardResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SystemGetOverallDashboardResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SystemGetOverallDashboardResult) Unmarshal(in []byte) error {
	msg := new(core_api.SystemGetOverallDashboardResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SystemGetOverallDashboardResult) GetSuccess() *core_api.SystemGetOverallDashboardResp {
	if !p.IsSetSuccess() {
		return SystemGetOverallDashboardResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SystemGetOverallDashboardResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.SystemGetOverallDashboardResp)
}

func (p *SystemGetOverallDashboardResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SystemGetOverallDashboardResult) GetResult() interface{} {
	return p.Success
}

func stsApplySignedUrlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.StsApplySignedUrlReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).StsApplySignedUrl(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *StsApplySignedUrlArgs:
		success, err := handler.(userr.CoreApiService).StsApplySignedUrl(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*StsApplySignedUrlResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newStsApplySignedUrlArgs() interface{} {
	return &StsApplySignedUrlArgs{}
}

func newStsApplySignedUrlResult() interface{} {
	return &StsApplySignedUrlResult{}
}

type StsApplySignedUrlArgs struct {
	Req *core_api.StsApplySignedUrlReq
}

func (p *StsApplySignedUrlArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.StsApplySignedUrlReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *StsApplySignedUrlArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *StsApplySignedUrlArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *StsApplySignedUrlArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *StsApplySignedUrlArgs) Unmarshal(in []byte) error {
	msg := new(core_api.StsApplySignedUrlReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var StsApplySignedUrlArgs_Req_DEFAULT *core_api.StsApplySignedUrlReq

func (p *StsApplySignedUrlArgs) GetReq() *core_api.StsApplySignedUrlReq {
	if !p.IsSetReq() {
		return StsApplySignedUrlArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *StsApplySignedUrlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StsApplySignedUrlArgs) GetFirstArgument() interface{} {
	return p.Req
}

type StsApplySignedUrlResult struct {
	Success *core_api.StsApplySignedUrlResp
}

var StsApplySignedUrlResult_Success_DEFAULT *core_api.StsApplySignedUrlResp

func (p *StsApplySignedUrlResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.StsApplySignedUrlResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *StsApplySignedUrlResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *StsApplySignedUrlResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *StsApplySignedUrlResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *StsApplySignedUrlResult) Unmarshal(in []byte) error {
	msg := new(core_api.StsApplySignedUrlResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *StsApplySignedUrlResult) GetSuccess() *core_api.StsApplySignedUrlResp {
	if !p.IsSetSuccess() {
		return StsApplySignedUrlResult_Success_DEFAULT
	}
	return p.Success
}

func (p *StsApplySignedUrlResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.StsApplySignedUrlResp)
}

func (p *StsApplySignedUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StsApplySignedUrlResult) GetResult() interface{} {
	return p.Success
}

func stsAIModifyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(core_api.StsAIModifyReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(userr.CoreApiService).StsAIModify(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *StsAIModifyArgs:
		success, err := handler.(userr.CoreApiService).StsAIModify(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*StsAIModifyResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newStsAIModifyArgs() interface{} {
	return &StsAIModifyArgs{}
}

func newStsAIModifyResult() interface{} {
	return &StsAIModifyResult{}
}

type StsAIModifyArgs struct {
	Req *core_api.StsAIModifyReq
}

func (p *StsAIModifyArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(core_api.StsAIModifyReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *StsAIModifyArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *StsAIModifyArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *StsAIModifyArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *StsAIModifyArgs) Unmarshal(in []byte) error {
	msg := new(core_api.StsAIModifyReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var StsAIModifyArgs_Req_DEFAULT *core_api.StsAIModifyReq

func (p *StsAIModifyArgs) GetReq() *core_api.StsAIModifyReq {
	if !p.IsSetReq() {
		return StsAIModifyArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *StsAIModifyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StsAIModifyArgs) GetFirstArgument() interface{} {
	return p.Req
}

type StsAIModifyResult struct {
	Success *core_api.StsAIModifyResp
}

var StsAIModifyResult_Success_DEFAULT *core_api.StsAIModifyResp

func (p *StsAIModifyResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(core_api.StsAIModifyResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *StsAIModifyResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *StsAIModifyResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *StsAIModifyResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *StsAIModifyResult) Unmarshal(in []byte) error {
	msg := new(core_api.StsAIModifyResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *StsAIModifyResult) GetSuccess() *core_api.StsAIModifyResp {
	if !p.IsSetSuccess() {
		return StsAIModifyResult_Success_DEFAULT
	}
	return p.Success
}

func (p *StsAIModifyResult) SetSuccess(x interface{}) {
	p.Success = x.(*core_api.StsAIModifyResp)
}

func (p *StsAIModifyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StsAIModifyResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Login(ctx context.Context, Req *core_api.LoginReq) (r *core_api.LoginResp, err error) {
	var _args LoginArgs
	_args.Req = Req
	var _result LoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SignUp(ctx context.Context, Req *core_api.SignUpReq) (r *core_api.SignUpResp, err error) {
	var _args SignUpArgs
	_args.Req = Req
	var _result SignUpResult
	if err = p.c.Call(ctx, "SignUp", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSetting(ctx context.Context, Req *core_api.GetSettingReq) (r *core_api.GetSettingResp, err error) {
	var _args GetSettingArgs
	_args.Req = Req
	var _result GetSettingResult
	if err = p.c.Call(ctx, "GetSetting", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListActivities(ctx context.Context, Req *core_api.ListActivitiesReq) (r *core_api.ListActivitiesResp, err error) {
	var _args ListActivitiesArgs
	_args.Req = Req
	var _result ListActivitiesResult
	if err = p.c.Call(ctx, "ListActivities", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetActivity(ctx context.Context, Req *core_api.GetActivityReq) (r *core_api.GetActivityResp, err error) {
	var _args GetActivityArgs
	_args.Req = Req
	var _result GetActivityResult
	if err = p.c.Call(ctx, "GetActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DoFavorite(ctx context.Context, Req *core_api.DoFavoriteReq) (r *core_api.Response, err error) {
	var _args DoFavoriteArgs
	_args.Req = Req
	var _result DoFavoriteResult
	if err = p.c.Call(ctx, "DoFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelFavorite(ctx context.Context, Req *core_api.CancelFavoriteReq) (r *core_api.Response, err error) {
	var _args CancelFavoriteArgs
	_args.Req = Req
	var _result CancelFavoriteResult
	if err = p.c.Call(ctx, "CancelFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateBooking(ctx context.Context, Req *core_api.CreateBookingReq) (r *core_api.Response, err error) {
	var _args CreateBookingArgs
	_args.Req = Req
	var _result CreateBookingResult
	if err = p.c.Call(ctx, "CreateBooking", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelBookRecord(ctx context.Context, Req *core_api.CancelBookRecordReq) (r *core_api.Response, err error) {
	var _args CancelBookRecordArgs
	_args.Req = Req
	var _result CancelBookRecordResult
	if err = p.c.Call(ctx, "CancelBookRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListActivitiesByBookRecords(ctx context.Context, Req *core_api.ListBookRecordsReq) (r *core_api.ListBookRecordsResp, err error) {
	var _args ListActivitiesByBookRecordsArgs
	_args.Req = Req
	var _result ListActivitiesByBookRecordsResult
	if err = p.c.Call(ctx, "ListActivitiesByBookRecords", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListReservers(ctx context.Context, Req *core_api.ListReserversReq) (r *core_api.ListReserversResp, err error) {
	var _args ListReserversArgs
	_args.Req = Req
	var _result ListReserversResult
	if err = p.c.Call(ctx, "ListReservers", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateReserver(ctx context.Context, Req *core_api.CreateReserverReq) (r *core_api.Response, err error) {
	var _args CreateReserverArgs
	_args.Req = Req
	var _result CreateReserverResult
	if err = p.c.Call(ctx, "CreateReserver", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteReserver(ctx context.Context, Req *core_api.DeleteReserverReq) (r *core_api.Response, err error) {
	var _args DeleteReserverArgs
	_args.Req = Req
	var _result DeleteReserverResult
	if err = p.c.Call(ctx, "DeleteReserver", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, Req *core_api.GetUserInfoReq) (r *core_api.GetUserInfoResp, err error) {
	var _args GetUserInfoArgs
	_args.Req = Req
	var _result GetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserInfo(ctx context.Context, Req *core_api.UpdateUserInfoReq) (r *core_api.Response, err error) {
	var _args UpdateUserInfoArgs
	_args.Req = Req
	var _result UpdateUserInfoResult
	if err = p.c.Call(ctx, "UpdateUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateNotice(ctx context.Context, Req *core_api.UpdateNoticeReq) (r *core_api.Response, err error) {
	var _args UpdateNoticeArgs
	_args.Req = Req
	var _result UpdateNoticeResult
	if err = p.c.Call(ctx, "UpdateNotice", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantListActivities(ctx context.Context, Req *core_api.MerchantListActivitiesReq) (r *core_api.MerchantListActivitiesResp, err error) {
	var _args MerchantListActivitiesArgs
	_args.Req = Req
	var _result MerchantListActivitiesResult
	if err = p.c.Call(ctx, "MerchantListActivities", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantCreateActivity(ctx context.Context, Req *core_api.MerchantCreateActivityReq) (r *core_api.Response, err error) {
	var _args MerchantCreateActivityArgs
	_args.Req = Req
	var _result MerchantCreateActivityResult
	if err = p.c.Call(ctx, "MerchantCreateActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantDeleteActivity(ctx context.Context, Req *core_api.MerchantDeleteActivityReq) (r *core_api.Response, err error) {
	var _args MerchantDeleteActivityArgs
	_args.Req = Req
	var _result MerchantDeleteActivityResult
	if err = p.c.Call(ctx, "MerchantDeleteActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantTopActivity(ctx context.Context, Req *core_api.MerchantTopActivityReq) (r *core_api.Response, err error) {
	var _args MerchantTopActivityArgs
	_args.Req = Req
	var _result MerchantTopActivityResult
	if err = p.c.Call(ctx, "MerchantTopActivity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantLogin(ctx context.Context, Req *core_api.MerchantLoginReq) (r *core_api.MerchantLoginResp, err error) {
	var _args MerchantLoginArgs
	_args.Req = Req
	var _result MerchantLoginResult
	if err = p.c.Call(ctx, "MerchantLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantGetSetting(ctx context.Context, Req *core_api.MerchantGetSettingReq) (r *core_api.MerchantGetSettingResp, err error) {
	var _args MerchantGetSettingArgs
	_args.Req = Req
	var _result MerchantGetSettingResult
	if err = p.c.Call(ctx, "MerchantGetSetting", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantUpdateSetting(ctx context.Context, Req *core_api.MerchantUpdateSettingReq) (r *core_api.MerchantGetSettingResp, err error) {
	var _args MerchantUpdateSettingArgs
	_args.Req = Req
	var _result MerchantUpdateSettingResult
	if err = p.c.Call(ctx, "MerchantUpdateSetting", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantGetBookRecords(ctx context.Context, Req *core_api.MerchantListBookRecordsReq) (r *core_api.MerchantListBookRecordsResp, err error) {
	var _args MerchantGetBookRecordsArgs
	_args.Req = Req
	var _result MerchantGetBookRecordsResult
	if err = p.c.Call(ctx, "MerchantGetBookRecords", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantUpdateInfo(ctx context.Context, Req *core_api.MerchantUpdateInfoReq) (r *core_api.Response, err error) {
	var _args MerchantUpdateInfoArgs
	_args.Req = Req
	var _result MerchantUpdateInfoResult
	if err = p.c.Call(ctx, "MerchantUpdateInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantGetInfo(ctx context.Context, Req *core_api.MerchantGetInfoReq) (r *core_api.MerchantGetInfoResp, err error) {
	var _args MerchantGetInfoArgs
	_args.Req = Req
	var _result MerchantGetInfoResult
	if err = p.c.Call(ctx, "MerchantGetInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MerchantSetPassword(ctx context.Context, Req *core_api.MerchantSetPasswordReq) (r *core_api.Response, err error) {
	var _args MerchantSetPasswordArgs
	_args.Req = Req
	var _result MerchantSetPasswordResult
	if err = p.c.Call(ctx, "MerchantSetPassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SystemLogin(ctx context.Context, Req *core_api.SystemLoginReq) (r *core_api.SystemLoginResp, err error) {
	var _args SystemLoginArgs
	_args.Req = Req
	var _result SystemLoginResult
	if err = p.c.Call(ctx, "SystemLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SystemListMerchant(ctx context.Context, Req *core_api.SystemListMerchantsReq) (r *core_api.SystemListMerchantsReq, err error) {
	var _args SystemListMerchantArgs
	_args.Req = Req
	var _result SystemListMerchantResult
	if err = p.c.Call(ctx, "SystemListMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SystemGetMerchant(ctx context.Context, Req *core_api.SystemGetMerchantReq) (r *core_api.SystemGetMerchantResp, err error) {
	var _args SystemGetMerchantArgs
	_args.Req = Req
	var _result SystemGetMerchantResult
	if err = p.c.Call(ctx, "SystemGetMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SystemCreateMerchant(ctx context.Context, Req *core_api.SystemCreateMerchantReq) (r *core_api.Response, err error) {
	var _args SystemCreateMerchantArgs
	_args.Req = Req
	var _result SystemCreateMerchantResult
	if err = p.c.Call(ctx, "SystemCreateMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SystemUpdateMerchant(ctx context.Context, Req *core_api.SystemUpdateMerchantReq) (r *core_api.Response, err error) {
	var _args SystemUpdateMerchantArgs
	_args.Req = Req
	var _result SystemUpdateMerchantResult
	if err = p.c.Call(ctx, "SystemUpdateMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SystemGetDashboard(ctx context.Context, Req *core_api.SystemGetDashboardReq) (r *core_api.SystemGetDashboardResp, err error) {
	var _args SystemGetDashboardArgs
	_args.Req = Req
	var _result SystemGetDashboardResult
	if err = p.c.Call(ctx, "SystemGetDashboard", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SystemGetOverallDashboard(ctx context.Context, Req *core_api.SystemGetOverallDashboardReq) (r *core_api.SystemGetOverallDashboardResp, err error) {
	var _args SystemGetOverallDashboardArgs
	_args.Req = Req
	var _result SystemGetOverallDashboardResult
	if err = p.c.Call(ctx, "SystemGetOverallDashboard", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StsApplySignedUrl(ctx context.Context, Req *core_api.StsApplySignedUrlReq) (r *core_api.StsApplySignedUrlResp, err error) {
	var _args StsApplySignedUrlArgs
	_args.Req = Req
	var _result StsApplySignedUrlResult
	if err = p.c.Call(ctx, "StsApplySignedUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StsAIModify(ctx context.Context, Req *core_api.StsAIModifyReq) (r *core_api.StsAIModifyResp, err error) {
	var _args StsAIModifyArgs
	_args.Req = Req
	var _result StsAIModifyResult
	if err = p.c.Call(ctx, "StsAIModify", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
